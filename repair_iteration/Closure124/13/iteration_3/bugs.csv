bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	327	3	replace
2	[BUG]  [BUGGY]  if(node!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	327	3	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	36	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	36	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	36	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	36	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssign(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssign(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssign(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
11	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
13	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
14	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	168	None	add
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
16	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
18	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
19	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	168	None	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
21	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
23	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
25	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
26	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	165	None	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
28	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	165	5	add
29	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	165	None	add
30	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
32	[BUG]  [BUGGY]  if(replacement!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	2	None	replace
33	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	2	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  preconditions	146	None	replace
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	146	2	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	146	2	replace
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
42	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
43	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [CE]  cannot  find  symbol  SETELEM  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);	  	non-compiled	[CE]  cannot  find  symbol  SETELEM	233	None	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
45	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
46	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [CE]  cannot  find  symbol  SETPROP  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	233	None	add
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
48	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	180	5	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	180	5	replace
51	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	180	None	replace
52	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	145	None	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	276	5	replace
54	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	276	5	replace
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	276	5	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	276	5	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	276	4	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	276	4	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
61	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
62	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
63	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
64	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	156	None	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
66	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
67	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	156	None	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
69	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
70	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  Preconditions.checkArgument(node.getProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  Preconditions.checkArgument(node.getProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp()  ||  node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp()  ||  node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp(),  replacement);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
75	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp(),  replacement);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	110	1	add
77	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	110	1	add
78	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	110	None	add
79	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	110	None	add
80	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	110	4	add
81	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	110	4	add
82	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	110	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement  ==  null)  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  if(replacement  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
84	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement  ==  null)  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  if(replacement  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
86	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
88	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
90	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
92	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
93	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
94	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
96	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
98	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
100	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
102	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GET);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GET);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
104	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GET);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GET);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GET);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
106	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	283	1	add
107	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
111	[BUG]  [BUGGY]  if(!replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
115	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	314	5	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	314	5	replace
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	314	5	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	314	5	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getLastChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	278	5	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	278	5	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
135	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
136	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
140	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
142	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
144	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
145	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.gettype()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	334	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.gettype()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	334	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.gettype()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	334	None	replace
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	163	5	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	163	5	replace
150	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	163	None	replace
151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	163	5	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	163	5	replace
153	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
154	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
155	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	139	None	add
156	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
157	[BUG]  [BUGGY]  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
158	[BUG]  [BUGGY]  if(replacement.isName())  {  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
159	[BUG]  [BUGGY]  if(replacement.isName())  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
160	[BUG]  [BUGGY]  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
162	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
164	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
165	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.CALL  &&  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.CALL  &&  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	212	None	add
166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
167	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.CALL  &&  node.isGetProp());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.CALL  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	128	3	replace
169	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	128	3	replace
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  node)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  node)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	128	3	replace
171	[BUG]  [BUGGY]  if(isSafeReplacement(node,  node)&&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  node)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  node)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	128	3	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  node))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	128	5	replace
173	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  node))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	128	5	replace
174	[BUG]  [BUGGY]  if(isReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	323	2	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	323	2	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	323	5	replace
178	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	323	5	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	323	5	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	323	5	replace
181	[BUG]  [BUGGY]  if(replacement!=  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
182	[BUG]  [BUGGY]  if(replacement  ==  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
183	[BUG]  [BUGGY]  if(!node.isName())  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName())  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName())  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	90	None	replace
184	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	90	None	replace
185	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	199	None	replace
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
188	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  true);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
191	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
193	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
194	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  0);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
195	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	331	None	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
202	[BUG]  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
203	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  cannot  find  symbol  replace  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  cannot  find  symbol  replace	161	None	replace
204	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  false))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    node,    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	99	None	replace
205	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    node,    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	99	None	replace
206	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  type))  {  [CE]  cannot  find  symbol  type  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  type))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  type))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    node,    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  type	99	None	replace
207	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  description))  {  [CE]  cannot  find  symbol  description  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  description))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  description))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    node,    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  description	99	None	replace
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	83	5	replace
209	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	83	5	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP;  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP;  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP;	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	83	None	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	83	2	replace
212	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	83	2	replace
213	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
214	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {	  	non-compiled	[CE]  ';'  expected	117	None	add
215	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
216	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node));	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
217	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
220	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	187	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	187	2	replace
222	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	187	2	replace
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	187	3	replace
224	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	187	3	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	187	1	replace
226	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	187	1	replace
227	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
228	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	54	5	add
230	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	54	5	add
231	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	54	None	add
232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	54	5	add
233	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	54	5	add
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
235	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  if  (node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  if  (node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
237	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  if  (node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  if  (node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  if  (node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	54	5	add
238	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(replacement.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	114	None	replace
239	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node,  node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node,  node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node,  node.getString(),  replacement))  {	  if(replacement.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	114	None	replace
240	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node.getString(),  node))  {	  if(replacement.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	114	None	replace
241	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
242	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
244	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
246	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	19	5	replace
247	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
248	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SCRIPT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SCRIPT);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SCRIPT);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SCRIPT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SCRIPT);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
251	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
252	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	308	5	replace
253	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	308	None	replace
254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
255	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
257	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
259	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
260	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
261	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
262	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	150	None	add
263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	194	5	replace
264	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	194	5	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	194	2	replace
266	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	194	2	replace
267	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	14	None	replace
272	[BUG]  [BUGGY]  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	14	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	14	None	replace
274	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName())  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName())  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName())  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
275	[BUG]  [BUGGY]  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
276	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
277	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  false))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    false))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	100	None	replace
278	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
279	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
280	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
281	[BUG]  [BUGGY]  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
282	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
283	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  cannot  find  symbol  ref  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  cannot  find  symbol  ref	230	None	replace
284	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
285	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
287	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
289	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
290	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement.getString());  [CE]  no  suitable  method  found  for  checkArgument(int,String)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement.getString());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,String)	206	None	add
291	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
292	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	27	5	add
294	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	27	5	add
295	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	27	None	add
296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	27	5	add
297	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	27	5	add
298	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
299	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	27	None	add
300	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	5	add
301	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	5	add
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isName());	  	compilable	  [FE]  RuntimeException  	112	5	add
303	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isName());	  	compilable	  [FE]  RuntimeException  	112	5	add
304	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	112	None	add
305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	112	5	add
306	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	112	5	add
307	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isType());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isType());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
308	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	112	None	add
309	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isReplacement());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isReplacement());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isReplacement());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
310	[BUG]  [BUGGY]  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
311	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
312	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
313	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
314	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ".prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
316	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ".prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ".prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
318	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
319	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ",prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
320	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ",prototype   "));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ",prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
321	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
322	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
323	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	51	None	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	51	5	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	51	5	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
327	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
328	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	277	None	add
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
330	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
331	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	277	None	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
333	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	277	1	add
334	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
335	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
336	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
337	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
339	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
340	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	162	None	add
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
342	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
343	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
345	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	76	None	replace
346	[BUG]  [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	292	None	replace
347	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	45	None	replace
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL,  node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL,  node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	compilable	  [FE]  RuntimeException  	45	5	replace
349	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL,  node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL,  node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL,  node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	compilable	  [FE]  RuntimeException  	45	5	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
351	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
352	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	158	None	replace
353	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	158	None	replace
354	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	294	None	add
355	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	294	None	add
356	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	294	None	add
357	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	294	None	add
358	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	219	None	replace
359	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	219	None	replace
360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
361	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
362	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
363	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
364	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  name);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	non-compiled	[CE]  cannot  find  symbol  name	207	None	replace
365	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	215	None	replace
366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
369	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
371	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
373	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
375	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
377	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
378	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	153	None	add
379	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	153	None	add
380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
381	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
382	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	253	None	replace
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	253	4	replace
384	[BUG]  [BUGGY]  if(node!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	253	4	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	253	2	replace
386	[BUG]  [BUGGY]  if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	253	2	replace
387	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	221	5	replace
388	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	221	5	replace
389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	221	5	replace
390	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  0);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	221	5	replace
391	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	non-compiled	[CE]  cannot  find  symbol  CRALL	251	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	non-compiled	[CE]  cannot  find  symbol  CRALL	251	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	non-compiled	[CE]  cannot  find  symbol  CRALL	251	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
398	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
400	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	85	2	replace
402	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	85	2	replace
403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
404	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	274	5	replace
406	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	274	5	replace
407	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	274	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	274	None	replace
409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
410	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
411	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	73	None	add
412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
413	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
414	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
415	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
416	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	73	None	add
417	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	73	None	add
418	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	133	None	replace
419	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
423	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  RuntimeException  	234	5	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  RuntimeException  	234	5	replace
429	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	234	None	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  RuntimeException  	234	5	replace
431	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  RuntimeException  	234	5	replace
432	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [CE]  cannot  find  symbol  SETPROP  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	234	None	replace
433	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
434	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
435	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
436	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
437	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	220	None	add
438	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
439	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
440	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	220	None	add
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
443	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
444	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
446	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	304	5	replace
448	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	304	5	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    	compilable	  [FE]  AssertionFailedError  	118	2	replace
450	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    	compilable	  [FE]  AssertionFailedError  	118	2	replace
451	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
454	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
455	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
456	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
457	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
458	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  &&  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  &&  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	223	None	add
459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
460	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	223	5	add
461	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isProp());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isProp());	  	non-compiled	[CE]  cannot  find  symbol	223	None	add
462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	105	5	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	105	5	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
465	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
467	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
468	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	37	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	37	None	replace
470	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
471	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
472	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
473	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
474	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	21	None	add
475	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
476	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
478	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
479	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
480	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
481	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	184	None	replace
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	184	5	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	184	5	replace
487	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
488	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
489	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	77	None	add
490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
491	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
493	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	77	5	add
494	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  [Delete]  Token.GETPROP);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  [Delete]  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  [Delete]  Token.GETPROP);	  	non-compiled	[CE]  ')'  expected	77	None	add
495	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	77	None	add
496	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	33	None	replace
497	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	66	5	replace
498	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	66	5	replace
499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
500	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	66	5	replace
502	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	66	5	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
504	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
505	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
506	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  If(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  If(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    If(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	127	None	add
507	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
508	[BUG]  [BUGGY]  if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  replaceable  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replaceable))    {    	non-compiled	[CE]  cannot  find  symbol  replaceable	262	None	replace
509	[BUG]  [BUGGY]  if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [CE]  cannot  find  symbol  replaceable  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replaceable.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replaceable))    {    	non-compiled	[CE]  cannot  find  symbol  replaceable	262	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	226	None	replace
511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
512	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
514	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  0);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
516	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
518	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getFirstChild());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
519	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
520	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
521	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	13	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
523	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
524	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	335	None	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
526	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
527	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	335	None	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
529	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	335	1	add
530	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
531	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
533	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
534	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	31	None	add
535	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
536	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
538	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	31	5	add
539	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	31	None	add
540	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    &&    node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
541	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	136	None	replace
542	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	136	None	replace
543	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  description))  {  [CE]  cannot  find  symbol  description  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  description))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  description))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  description	136	None	replace
544	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  warning))  {  [CE]  cannot  find  symbol  warning  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  warning))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  warning))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  warning	136	None	replace
545	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
546	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
547	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	254	None	add
548	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
549	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
550	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
551	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
552	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
553	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
554	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
555	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
556	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
557	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
558	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	293	None	replace
559	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
560	[BUG]  [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
561	[BUG]  [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	60	5	replace
563	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	60	5	replace
564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
565	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
566	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	330	None	add
567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
568	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
570	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	164	5	replace
572	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	164	5	replace
573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	203	5	replace
574	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	203	5	replace
575	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
576	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
577	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
578	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
579	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
580	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
581	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
582	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
583	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	7	None	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
585	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
589	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
590	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
591	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
592	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
593	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
594	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
595	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
596	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	84	None	add
597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
598	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	84	5	add
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
600	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
601	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	34	None	add
602	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	34	5	add
603	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	34	5	add
604	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	34	5	add
605	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	34	5	add
606	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	34	None	add
607	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	34	None	add
608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
609	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
610	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
611	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
612	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	non-compiled	[CE]  ';'  expected	297	None	add
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
614	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
615	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  >=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	297	None	add
616	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
618	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
619	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
620	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
621	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
622	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
623	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
624	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
625	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
626	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
627	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
628	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	9	None	add
629	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	9	None	add
630	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	9	None	add
631	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
632	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
633	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
634	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
636	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
637	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.RETURN  &&  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.RETURN  &&  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	243	None	add
638	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
639	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
640	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isProp());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isProp());	  	non-compiled	[CE]  cannot  find  symbol	243	None	add
641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
642	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	196	2	replace
644	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	196	2	replace
645	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
646	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	196	2	replace
648	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	196	2	replace
649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	5	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	35	5	replace
651	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	326	None	add
652	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	326	None	add
653	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	326	None	add
654	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	326	None	add
655	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	217	None	replace
656	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	217	5	replace
657	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	217	5	replace
658	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SCRIPT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SCRIPT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	217	5	replace
659	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SCRIPT);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SCRIPT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SCRIPT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	217	5	replace
660	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	217	None	replace
661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
662	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
663	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
664	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
665	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
666	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    	compilable	  [FE]  RuntimeException  	157	5	replace
667	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	30	2	replace
668	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	30	2	replace
669	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	44	5	replace
670	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	44	5	replace
671	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	44	5	replace
672	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	44	5	replace
673	[BUG]  [BUGGY]  Presconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Presconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Presconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Presconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Presconditions	268	None	replace
674	[BUG]  [BUGGY]  Conditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Conditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Conditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Conditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Conditions	268	None	replace
675	[BUG]  [BUGGY]  Condition.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Condition  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Condition.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Condition.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Condition	268	None	replace
676	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isName());	  Preconditions.checkArgument(node.isName());    	compilable	  [FE]  RuntimeException  	113	5	replace
677	[BUG]  [BUGGY]  Preconditions.checkState(node.isName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isName());	  Preconditions.checkArgument(node.isName());    	compilable	  [FE]  RuntimeException  	113	5	replace
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
679	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
680	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	193	None	add
681	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	193	5	add
682	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	193	5	add
683	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  [Delete]  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  [Delete]  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  [Delete]  Token.EXPR_RESULT);	  	non-compiled	[CE]  ')'  expected	193	None	add
684	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Node  node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	193	None	add
685	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
686	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
688	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
689	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	171	None	replace
690	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
691	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
692	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
693	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
695	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
696	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	241	None	add
697	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
698	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	241	1	add
699	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.RETURN  ||  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.RETURN  ||  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	241	None	add
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	59	1	add
701	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	59	1	add
702	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	59	None	add
703	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	59	5	add
704	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	59	5	add
705	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  [Delete]  Token.VAR);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  [Delete]  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  [Delete]  Token.VAR);	  	non-compiled	[CE]  ')'  expected	59	None	add
706	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.VAR);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  [BUGGY]  Token.VAR);	  	non-compiled	[CE]  ')'  expected	59	None	add
707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
708	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
709	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
710	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
711	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	108	None	add
712	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
713	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	108	5	add
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	202	1	add
715	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	202	1	add
716	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	202	None	add
717	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	202	5	add
718	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	202	5	add
719	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	202	None	add
720	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	202	4	add
721	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	202	4	add
722	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
723	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
724	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
725	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  null);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  AssertionFailedError  	298	2	replace
727	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getLastChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  AssertionFailedError  	298	2	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  AssertionFailedError  	298	2	replace
729	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  AssertionFailedError  	298	2	replace
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
731	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
732	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	176	None	add
733	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
734	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
735	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
736	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
737	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	176	5	add
738	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	176	5	add
739	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
740	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
741	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
742	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
743	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	225	None	add
744	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
745	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP,  replacement);	  	compilable	  [FE]  RuntimeException  	225	5	add
746	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node);	  	compilable	  [FE]  RuntimeException  	225	5	add
747	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node);	  	compilable	  [FE]  RuntimeException  	225	5	add
748	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacer);  [CE]  cannot  find  symbol  replacer  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacer);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacer);	  	non-compiled	[CE]  cannot  find  symbol  replacer	225	None	add
749	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
750	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	329	None	replace
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
752	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
754	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
756	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
757	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	252	None	add
758	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	252	None	add
759	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	252	None	add
760	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	252	None	add
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	147	5	add
762	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	147	5	add
763	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	147	4	add
764	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	147	4	add
765	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	147	None	add
766	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	147	5	add
767	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	147	5	add
768	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	147	None	add
769	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	147	None	add
770	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
771	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
772	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
773	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
774	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	300	None	add
775	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >>  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  >>  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	300	None	add
776	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
777	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.getString()!=  null);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
778	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
779	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
780	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	55	None	replace
781	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
783	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
784	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
785	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
786	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
787	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	52	None	add
788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
789	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
790	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	52	None	add
791	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
792	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
793	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	16	5	replace
794	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	16	5	replace
795	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
796	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
797	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	235	None	add
798	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
799	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
800	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
801	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
802	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
803	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
804	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
805	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
806	[BUG]  [BUGGY]  if(!replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
807	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
808	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
809	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
810	[BUG]  [BUGGY]  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	209	2	replace
812	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	209	2	replace
813	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	166	5	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	166	5	replace
815	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  >=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	131	5	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  >=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	131	5	replace
817	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getType()!=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
818	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()!=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
819	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
820	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
821	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	61	None	add
822	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
823	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
824	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  >>  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	61	None	add
825	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  >=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
826	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  >=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	61	5	add
827	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	61	5	add
828	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	61	5	add
829	[BUG]  [BUGGY]  Node  node  =  replacement.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.removeFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.removeFirstChild();	  Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	316	None	replace
830	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild(),  replacement);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.removeFirstChild(),  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild(),  replacement);	  Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  ';'  expected	316	None	replace
831	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
832	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  AssertionFailedError  	301	2	replace
834	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  AssertionFailedError  	301	2	replace
835	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
836	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  ==  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
837	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
838	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getString()!=  null);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  RuntimeException  	301	5	replace
839	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	208	1	add
840	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	208	1	add
841	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	208	None	add
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	208	1	add
843	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	208	1	add
844	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	208	None	add
845	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  [Delete]  Token.NAME);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  [Delete]  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  [Delete]  Token.NAME);	  	non-compiled	[CE]  ')'  expected	208	None	add
846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	8	5	replace
847	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	8	5	replace
848	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  preconditions	48	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  preconditions	48	None	replace
850	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  preconditions	48	None	replace
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	130	1	add
852	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	130	1	add
853	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	130	None	add
854	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	130	None	add
855	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	130	5	add
856	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	130	5	add
857	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	130	5	add
858	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	130	5	add
859	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	130	4	add
860	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	130	4	add
861	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
862	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	290	None	replace
863	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	290	None	replace
864	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	290	None	replace
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
866	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
867	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	328	None	add
868	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
869	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
870	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
871	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
872	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
873	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
874	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
875	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
876	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	201	None	replace
877	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
878	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
879	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	201	None	replace
880	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
881	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  true);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
883	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
884	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	144	5	replace
885	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	144	5	replace
886	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	144	5	replace
887	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	144	5	replace
888	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
889	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
890	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
891	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
893	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
895	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
897	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
899	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
900	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
901	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	286	5	replace
903	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(replacement!=    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	6	None	replace
904	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(replacement!=    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	6	None	replace
905	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  node))  {	  if(replacement!=    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	6	None	replace
906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
907	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
909	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
911	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
912	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
913	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
914	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.AR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  AR  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.AR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.AR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  AR	15	None	add
915	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	50	5	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	50	5	replace
917	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
918	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
919	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
920	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
922	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
923	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	273	5	replace
924	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	273	5	replace
925	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	273	5	replace
926	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	273	5	replace
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	2	replace
928	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	2	replace
929	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	4	replace
930	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	4	replace
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
932	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
933	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	313	None	add
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
935	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
936	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	313	None	add
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
938	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	62	2	replace
940	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	62	2	replace
941	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
942	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
943	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
944	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(node));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
945	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
946	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	62	5	replace
947	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
948	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
949	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
950	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
951	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	198	None	add
952	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
953	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT,  replacement);	  	compilable	  [FE]  RuntimeException  	198	5	add
954	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Node  node.getType()  ==  Token.EXPR_RESULT,  replacement);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Node  node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Node  node.getType()  ==  Token.EXPR_RESULT,  replacement);	  	non-compiled	[CE]  ';'  expected	198	None	add
955	[BUG]  [BUGGY]  Node  node  =  node.getNext(),  replacement);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext(),  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext(),  replacement);	  Node    node    =    node.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
956	[BUG]  [BUGGY]  Node  node  =  node.getNext()  -  1;  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext()  -  1;  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext()  -  1;	  Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	replace
957	[BUG]  [BUGGY]  Node  node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	218	None	replace
958	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	218	None	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	218	None	replace
960	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
961	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
962	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	65	None	add
963	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
964	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
965	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	add
966	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
967	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
968	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
969	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
970	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
971	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
972	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	87	1	add
973	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	87	1	add
974	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	87	None	add
975	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	87	5	add
976	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	87	5	add
977	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	87	1	add
978	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	87	1	add
979	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Node  node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	87	None	add
980	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
981	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
983	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
984	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	43	None	add
985	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	43	None	add
986	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
987	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
988	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	43	None	add
989	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	151	5	replace
990	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	151	5	replace
991	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
992	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
993	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
994	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
996	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
997	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
998	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
999	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	23	None	add
1000	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1001	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1002	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1003	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1004	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	23	None	add
1005	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	23	None	add
1006	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  null))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  null))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement,  null))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    null))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	231	None	replace
1007	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  false))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    null))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	231	None	replace
1008	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  this))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  this))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  this))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    null))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	231	None	replace
1009	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1010	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1011	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1012	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
1013	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	154	5	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	154	5	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	138	4	replace
1016	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	138	4	replace
1017	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	138	None	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
1019	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
1020	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1021	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1022	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1023	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1024	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1025	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1026	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1027	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1028	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1029	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	210	5	add
1030	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1031	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1032	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1033	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	74	5	replace
1034	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	74	5	replace
1035	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	74	5	replace
1036	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	74	5	replace
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	242	2	replace
1038	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	242	2	replace
1039	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	242	5	replace
1040	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	242	5	replace
1041	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
1042	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1043	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1044	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1045	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1046	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  ';'  expected	319	None	add
1047	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1048	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1049	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1050	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1051	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    >=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1052	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	282	5	replace
1053	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	282	5	replace
1054	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	282	None	replace
1055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	244	2	replace
1056	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	244	2	replace
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	244	2	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	244	2	replace
1059	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild().isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild().isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	244	5	replace
1060	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild().isGetProp());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild().isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild().isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	244	5	replace
1061	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	318	5	replace
1062	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	318	5	replace
1063	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
1064	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
1066	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
1067	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1068	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1069	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1070	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1071	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1072	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1073	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1074	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1075	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1076	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1077	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	137	None	add
1078	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1079	[BUG]  [BUGGY]  if(replacement.isName())  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1081	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1082	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  &&  NodeUtil.isName(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1083	[BUG]  [BUGGY]  Node  replacement  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.getNext();  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getNext();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1084	[BUG]  [BUGGY]  Node  replacement  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.getParent();  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getParent();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1085	[BUG]  [BUGGY]  Node  replacement  =  node.getOwnerChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.getOwnerChild();  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getOwnerChild();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1086	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    >>    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	56	5	replace
1087	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType());  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    >>    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	56	5	replace
1088	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType()  >>  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    >>    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	56	5	replace
1089	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType()  >>  Token.REGEXP);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  node.getType()  >>  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    >>    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	56	5	replace
1090	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1091	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1092	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	57	None	add
1093	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1094	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1096	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1097	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	57	None	add
1098	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1099	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    >=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	57	5	add
1100	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1101	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1102	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1103	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
1104	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
1105	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	174	None	add
1106	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  >=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  >=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  >=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
1107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this.replacement);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this.replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  this.replacement);	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  replacement);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  this,  replacement);	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns(replacement));  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns(replacement));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns(replacement));	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	336	5	replace
1113	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	336	5	replace
1114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
1115	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
1116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	336	5	replace
1117	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	336	5	replace
1118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
1119	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
1120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1121	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1123	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1124	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1125	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1126	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	182	None	add
1127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1128	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1130	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1132	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1133	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	311	None	add
1134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1135	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1137	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1139	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	238	5	replace
1141	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	238	5	replace
1142	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	238	None	replace
1143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	238	5	replace
1144	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	238	5	replace
1145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	238	2	replace
1146	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	238	2	replace
1147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1148	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1149	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1150	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
1152	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
1153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	249	5	add
1154	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	249	5	add
1155	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	249	None	add
1156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
1157	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
1158	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  node  }  ))  {  [CE]  incompatible  types  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  node  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  node  }  ))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    new    String[]    {    replacement    }    ))    {    	non-compiled	[CE]  incompatible  types	321	None	replace
1159	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [CE]  incompatible  types  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    new    String[]    {    replacement    }    ))    {    	non-compiled	[CE]  incompatible  types	321	None	replace
1160	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  name  }  ))  {  [CE]  cannot  find  symbol  name  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  name  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  name  }  ))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    new    String[]    {    replacement    }    ))    {    	non-compiled	[CE]  cannot  find  symbol  name	321	None	replace
1161	[BUG]  [BUGGY]  &&  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  &&  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	&&  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    new    String[]    {    replacement    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	321	None	replace
1162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1163	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1165	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1167	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1169	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	195	5	add
1170	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	195	None	add
1171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1172	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1174	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1176	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1178	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
1179	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	214	None	add
1180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1181	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1182	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	12	None	add
1183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1184	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1185	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	12	None	add
1186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1187	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1188	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	12	None	add
1189	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	69	None	replace
1190	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	69	None	replace
1191	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	80	5	replace
1192	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	80	5	replace
1193	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	80	None	replace
1194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	80	2	replace
1195	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	80	2	replace
1196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	80	5	replace
1197	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	80	5	replace
1198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	80	2	replace
1199	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	80	2	replace
1200	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	non-compiled	[CE]  cannot  find  symbol  RESTURN	263	None	replace
1201	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	non-compiled	[CE]  cannot  find  symbol  RESTURN	263	None	replace
1202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	263	5	replace
1203	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	263	5	replace
1204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1205	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1207	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1209	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1211	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1213	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
1214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	5	add
1215	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	5	add
1216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1217	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1218	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	317	None	add
1219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1220	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1221	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	317	None	add
1222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	317	5	add
1223	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	317	5	add
1224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1225	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	317	1	add
1226	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
1227	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
1228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1229	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1231	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1232	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  ';'  expected	279	None	add
1233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1234	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1236	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
1237	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	279	None	add
1238	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    true))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	101	None	replace
1239	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    true))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	101	None	replace
1240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  AssertionFailedError  	190	1	add
1241	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  AssertionFailedError  	190	1	add
1242	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	190	None	add
1243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	190	5	add
1244	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	190	5	add
1245	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  [Delete]  Token.CALL);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  [Delete]  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  [Delete]  Token.CALL);	  	non-compiled	[CE]  ')'  expected	190	None	add
1246	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.CALL);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  [BUGGY]  Token.CALL);	  	non-compiled	[CE]  ')'  expected	190	None	add
1247	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
1248	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
1249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  >>  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
1250	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  >>  Token.RETURN);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  >>  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
1251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  node)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  node)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	291	5	replace
1252	[BUG]  [BUGGY]  if(isSafeReplacement(node,  node)||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  node)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  node)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	291	5	replace
1253	[BUG]  [BUGGY]  if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement,  false))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	291	None	replace
1254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	229	5	replace
1255	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SEMI);    	compilable	  [FE]  RuntimeException  	229	5	replace
1256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	68	5	replace
1257	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	68	5	replace
1258	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	186	None	add
1259	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	186	None	add
1260	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	186	None	add
1261	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  >=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  >=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  >=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	186	None	add
1262	[BUG]  [BUGGY]  Node  node  =  replacement.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	replace
1263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
1264	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
1265	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	296	None	replace
1266	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	296	None	replace
1267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1268	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1269	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	332	None	add
1270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1271	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1273	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1275	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1277	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	267	1	add
1279	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	267	1	add
1280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	267	1	add
1281	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	267	1	add
1282	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro	  	non-compiled	[CE]  ')'  expected	267	None	add
1283	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	267	None	add
1284	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1285	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1286	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	132	None	add
1287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1288	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1290	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  >=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1291	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(replacement.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1292	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(replacement.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(replacement.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
1293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	132	5	add
1294	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	132	5	add
1295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1296	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1297	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	104	None	add
1298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1299	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1300	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  [Delete]  Token.RETURN);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  [Delete]  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  [Delete]  Token.RETURN);	  	non-compiled	[CE]  ')'  expected	104	None	add
1301	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.RETURN);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  [BUGGY]  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  [BUGGY]  Token.RETURN);	  	non-compiled	[CE]  ')'  expected	104	None	add
1302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getType()  >>  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >>    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	11	5	replace
1303	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getType()  >>  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getType()  >>  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >>    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	11	5	replace
1304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1305	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1306	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  }  );  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  }  );  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  }  );	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >>    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
1307	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1308	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1309	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(node  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1310	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1311	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	175	3	replace
1312	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	175	3	replace
1313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	2	replace
1314	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	2	replace
1315	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	175	None	replace
1316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	4	replace
1317	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	4	replace
1318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
1319	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	29	1	add
1320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
1321	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
1322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
1323	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
1324	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	29	None	add
1325	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	29	None	add
1326	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	152	None	replace
1327	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	152	None	replace
1328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1329	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1331	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1333	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1334	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	287	None	replace
1335	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	287	None	replace
1336	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	287	None	replace
1337	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SYNTHETIC);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	287	None	replace
1338	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1339	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1340	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1341	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1342	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(replacement    ==    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	5	None	replace
1343	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  node))  {	  if(replacement    ==    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	5	None	replace
1344	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(replacement    ==    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	5	None	replace
1345	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	177	5	replace
1346	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	177	5	replace
1347	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1348	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1349	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	170	5	add
1350	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	170	5	add
1351	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	170	None	add
1352	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1353	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1355	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	170	5	add
1356	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	170	None	add
1357	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
1358	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	115	None	add
1359	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
1360	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	307	None	replace
1361	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	307	None	replace
1362	[BUG]  [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	172	None	add
1363	[BUG]  [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	172	None	add
1364	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	42	5	replace
1365	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	42	5	replace
1366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	42	5	replace
1367	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	42	5	replace
1368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	116	3	replace
1369	[BUG]  [BUGGY]  if(replacement!=  null  &&!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	116	3	replace
1370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {	  if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	116	4	replace
1371	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  node))  {	  if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	116	4	replace
1372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1373	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1375	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1377	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
1378	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	41	5	add
1379	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	41	5	add
1380	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
1381	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
1382	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	245	5	replace
1383	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	245	5	replace
1384	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
1385	[BUG]  [BUGGY]  if(node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	129	None	replace
1386	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	129	None	replace
1387	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	129	None	replace
1388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1389	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	75	5	add
1391	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	75	5	add
1392	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	75	None	add
1393	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1394	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1396	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
1397	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	75	None	add
1398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1399	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1400	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1401	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	179	5	add
1403	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	179	5	add
1404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	179	5	add
1405	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	179	5	add
1406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FOR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	179	5	add
1407	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FOR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	179	5	add
1408	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	179	5	add
1409	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	179	5	add
1410	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1411	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1413	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1414	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	63	None	add
1415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1416	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	63	5	add
1417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
1418	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
1419	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	82	None	add
1420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	82	5	add
1421	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	82	5	add
1422	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  [Delete]  Token.REGEXP);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  [Delete]  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  [Delete]  Token.REGEXP);	  	non-compiled	[CE]  ')'  expected	82	None	add
1423	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.RESGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.RESGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.RESGEXP);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	82	None	add
1424	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1425	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1426	[BUG]  [BUGGY]  if(replacement.isName()  ||  isAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1427	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
1428	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
1429	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
1430	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1431	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1432	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1433	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1434	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	306	None	replace
1435	[BUG]  [BUGGY]  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1436	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	replace
1437	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  }  );  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  }  );  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  }  );	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	non-compiled	[CE]  ')'  expected	20	None	replace
1438	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
1439	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
1440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
1441	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
1442	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	236	None	replace
1443	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
1444	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
1445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	236	2	replace
1446	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	236	2	replace
1447	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1448	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1449	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1450	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1452	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1454	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1456	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1458	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
1459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1460	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1462	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1463	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1464	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1465	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1466	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1467	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1468	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	200	5	add
1469	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.NAME,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.NAME,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	200	None	add
1470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	5	replace
1471	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	5	replace
1472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	4	replace
1473	[BUG]  [BUGGY]  if(node!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	4	replace
1474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1475	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1477	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1478	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	79	None	add
1479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1480	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1481	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacer);  [CE]  cannot  find  symbol  replacer  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacer);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacer);	  	non-compiled	[CE]  cannot  find  symbol  replacer	79	None	add
1482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	228	2	replace
1483	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	228	2	replace
1484	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
1485	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	333	None	replace
1486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1487	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1488	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1489	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1491	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
1492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	10	5	replace
1493	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	10	5	replace
1494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1495	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1497	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1499	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	272	1	add
1500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	272	5	add
1501	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	272	5	add
1502	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.VAR  ||  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	272	None	add
1503	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	272	None	add
1504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	284	2	replace
1505	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	284	2	replace
1506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	284	5	replace
1507	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	284	5	replace
1508	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1509	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1510	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	239	None	add
1511	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1512	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1513	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1515	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1516	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	18	None	add
1517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1518	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1519	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	18	None	add
1520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1521	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
1522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1523	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1525	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1526	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	227	5	add
1527	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	227	5	add
1528	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Node  node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Node  node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Node  node.getType()  ==  Token.REGEXP  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	227	None	add
1529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1530	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	227	1	add
1531	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  ||  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP  ||  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	227	None	add
1532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	325	2	replace
1533	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getString().equals( "prototype   "));  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	325	2	replace
1534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "Prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "Prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
1535	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "Prototype "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "Prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "Prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
1536	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node,  node.getString(),  replacement))  {	  if(replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	185	None	replace
1537	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {	  if(replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	185	None	replace
1538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1539	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1540	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1541	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1542	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1543	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
1544	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  RESTURN  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	67	None	add
1545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1546	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1547	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	237	None	add
1548	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1549	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1550	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1551	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1552	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	237	None	add
1553	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
1554	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
1555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	148	1	replace
1556	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	148	1	replace
1557	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	148	5	replace
1558	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	148	5	replace
1559	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1560	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1561	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1562	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN,  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1563	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1564	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  0);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1565	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	109	None	replace
1566	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  name);  [CE]  cannot  find  symbol  name  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	109	None	replace
1567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1568	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getString());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  RuntimeException  	109	5	replace
1569	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
1570	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
1571	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
1572	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
1573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	143	1	add
1574	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	143	1	add
1575	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	143	None	add
1576	[BUG]  [BUGGY]  Node  replacement  =  node.getfirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.getfirstChild();  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getfirstChild();	  Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	256	None	replace
1577	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	78	2	replace
1578	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	78	2	replace
1579	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	78	None	replace
1580	[BUG]  [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  node,  replacement))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	188	None	replace
1581	[BUG]  [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement,  false))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	188	None	replace
1582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  node))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	188	4	replace
1583	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  node))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	188	4	replace
1584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1585	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1587	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1589	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1590	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT  ||  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT  ||  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	275	None	add
1591	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	275	None	add
1592	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1593	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1594	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1595	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1596	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	70	None	add
1597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1598	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1600	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1601	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	70	None	add
1602	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1603	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1604	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	22	None	replace
1605	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1606	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1607	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getLastChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1608	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  replacement.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1609	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	88	5	replace
1610	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	88	5	replace
1611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.REGEXP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1612	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.REGEXP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.REGEXP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1614	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	88	5	replace
1616	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	88	5	replace
1617	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1618	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1619	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1620	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1622	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1624	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1625	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1626	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
1627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	191	5	replace
1628	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  RuntimeException  	191	5	replace
1629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	213	2	replace
1630	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	213	2	replace
1631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	213	2	replace
1632	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	213	2	replace
1633	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
1634	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
1635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1636	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1637	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	64	None	replace
1638	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	64	None	replace
1639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1640	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1642	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
1643	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node,  replacement))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    node))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	103	None	replace
1644	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  node))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    node))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	103	None	replace
1645	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	216	None	replace
1646	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	216	None	replace
1647	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1648	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1649	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	46	None	add
1650	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1651	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1652	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1653	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1654	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  >>  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	46	None	add
1655	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	46	None	add
1656	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1657	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	295	2	replace
1659	[BUG]  [BUGGY]  if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	295	2	replace
1660	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1661	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1662	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getString()));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1663	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1664	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1665	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
1666	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1667	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    >=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	169	None	replace
1668	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    >>    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	11	None	replace
1669	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	294	None	add
1670	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	294	None	add
1671	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacer);  [CE]  cannot  find  symbol  replacer  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacer);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacer);	  	non-compiled	[CE]  cannot  find  symbol  replacer	198	None	add
1672	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replaceable);  [CE]  cannot  find  symbol  replaceable  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replaceable);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replaceable);	  	non-compiled	[CE]  cannot  find  symbol  replaceable	198	None	add
1673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1674	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    >=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	23	5	add
1675	[BUG]  [BUGGY]  if(isSafeReplacement(node,  ref)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  ref  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  ref)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  ref)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  ref	188	None	replace
1676	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replace)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  replace  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replace)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replace)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  replace	188	None	replace
1677	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	160	None	replace
1678	[BUG]  [BUGGY]  if(replacement  ==  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	304	None	replace
1679	[BUG]  [BUGGY]  if(replacement!=  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	304	None	replace
1680	[BUG]  [BUGGY]  if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	304	None	replace
1681	[BUG]  [BUGGY]  if(replacement!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	304	None	replace
1682	[BUG]  [BUGGY]  if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	304	None	replace
1683	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
1684	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1685	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1686	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	45	None	replace
1687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
1688	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
1689	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBLOCK(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBLOCK(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBLOCK(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	329	None	replace
1690	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
1691	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
1692	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType());	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >>    Token.NAME);    	compilable	  [FE]  RuntimeException  	155	5	replace
1693	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType());  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType());	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    >>    Token.NAME);    	compilable	  [FE]  RuntimeException  	155	5	replace
1694	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
1695	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
1696	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
1697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	277	5	add
1698	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	277	5	add
1699	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  RESTURN  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	277	None	add
1700	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	138	3	replace
1701	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	138	3	replace
1702	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  name);  [CE]  cannot  find  symbol  name  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	199	None	replace
1703	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	168	None	add
1704	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
1705	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	168	5	add
1706	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.REGEXP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
1707	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.REGEXP);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	85	5	replace
1708	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  &&  node.isGetProp());  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	243	None	add
1709	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1710	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
1711	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	143	None	add
1712	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	143	None	add
1713	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN,  replacement);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	108	None	add
1714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    >>    Token.NAME);    	compilable	  [FE]  RuntimeException  	167	5	replace
1715	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType());  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    >>    Token.NAME);    	compilable	  [FE]  RuntimeException  	167	5	replace
1716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	242	2	replace
1717	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	242	2	replace
1718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	228	2	replace
1719	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	228	2	replace
1720	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetReplacement());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetReplacement());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetReplacement());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
1721	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getString().equals( "prototype   "));  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getString().equals( "prototype   "));	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	324	None	add
1722	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
1723	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	324	5	add
1724	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	128	4	replace
1725	[BUG]  [BUGGY]  if(!isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!isSafeReplacement(node,  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	128	4	replace
1726	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getFirstChild(),  replacement))  {  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getFirstChild(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getFirstChild(),  replacement))  {	  if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	128	None	replace
1727	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1728	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	186	None	add
1729	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    true))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	101	None	replace
1730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName())  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	2	replace
1731	[BUG]  [BUGGY]  if(replacement.isName())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName())  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	2	replace
1732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	5	replace
1733	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	5	replace
1734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!replacement.isName())  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	4	replace
1735	[BUG]  [BUGGY]  if(!replacement.isName())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName())  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	124	4	replace
1736	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
1737	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME)  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    new    String[]    {    }    ))    {    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
1738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
1739	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	215	5	replace
1740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	307	4	replace
1741	[BUG]  [BUGGY]  if(replacement!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	307	4	replace
1742	[BUG]  [BUGGY]  if(!node.isName()  ||  isNameAssignTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isNameAssignTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isNameAssignTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	307	None	replace
1743	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	208	None	add
1744	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());  [CE]  cannot  find  symbol  RESTURN  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	241	None	add
1745	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	241	5	add
1746	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	241	5	add
1747	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
1748	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1749	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1750	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	156	None	add
1751	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replace))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replace))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replace))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1752	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	152	5	replace
1754	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node    node    =    replacement.getFirstChild();    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	152	5	replace
1755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
1756	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
1757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1758	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    >=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
1759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  node  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
1760	[BUG]  [BUGGY]  if(replacement!=  node  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  node  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
1761	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	202	None	add
1762	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    &&    node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	257	None	replace
1763	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    null))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	231	None	replace
1764	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	272	None	add
1765	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	283	None	add
1766	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	283	None	add
1767	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
1768	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	283	5	add
1769	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	18	None	add
1770	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
1771	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
1772	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	176	None	add
1773	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	176	None	add
1774	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
1775	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
1776	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	222	5	replace
1777	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	222	5	replace
1778	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	210	None	add
1779	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	210	None	add
1780	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
1781	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  ref))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
1782	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1783	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	180	None	replace
1784	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  &&  node.isGetProp());  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	223	None	add
1785	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP)  &&  node.isGetProp());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP)  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP)  &&  node.isGetProp());	  	non-compiled	[CE]  not  a  statement	223	None	add
1786	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
1787	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
1788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
1789	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
1790	[BUG]  [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  [CE]  '('  expected  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    	non-compiled	[CE]  '('  expected	181	None	replace
1791	[BUG]  [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  is  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  is  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  is	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    	non-compiled	[CE]  ')'  expected	181	None	replace
1792	[BUG]  [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
1793	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	153	None	add
1794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	2	replace
1795	[BUG]  [BUGGY]  if(replacement  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	2	replace
1796	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  node  =  node.getFirstChild();	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  illegal  start  of  type	305	None	replace
1797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  node)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	4	replace
1798	[BUG]  [BUGGY]  if(replacement!=  node)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  node)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	4	replace
1799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  node)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	2	replace
1800	[BUG]  [BUGGY]  if(replacement  ==  node)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node)  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  node)  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	2	replace
1801	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	84	None	add
1802	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	197	5	replace
1803	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	197	5	replace
1804	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1805	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1806	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1807	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1808	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	182	5	add
1809	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	326	None	add
1810	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	220	None	add
1811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	2	replace
1812	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	273	2	replace
1813	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentTo(node.getString()));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
1814	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentOp());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentOp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignmentOp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
1815	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
1816	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
1817	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
1818	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType());  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType());	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  RuntimeException  	20	5	replace
1819	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	185	None	replace
1820	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {	  if(replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	185	None	replace
1821	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	217	None	replace
1822	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	217	None	replace
1823	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	217	None	replace
1824	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	31	None	add
1825	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	31	None	add
1826	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	34	None	add
1827	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    >=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	34	None	add
1828	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  node))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  node))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
1829	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
1830	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
1831	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
1832	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
1833	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1834	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1835	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1836	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	22	5	replace
1837	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  AssertionFailedError  	271	2	replace
1838	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  AssertionFailedError  	271	2	replace
1839	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.EXPR_RESULT  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  RuntimeException  	271	3	replace
1840	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.EXPR_RESULT  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  RuntimeException  	271	3	replace
1841	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1842	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1843	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  CDATA  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CDATA	311	None	add
1844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	311	5	add
1845	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	311	5	add
1846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1847	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
1848	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
1849	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	162	5	add
1850	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	non-compiled	[CE]  cannot  find  symbol  RESGEXP	259	None	replace
1851	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	non-compiled	[CE]  cannot  find  symbol  RESGEXP	259	None	replace
1852	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1853	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  node.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
1854	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  node.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  node.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	compilable	  [FE]  RuntimeException  	207	5	replace
1855	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
1856	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
1857	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1859	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    >=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	46	5	add
1860	[BUG]  [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	296	None	replace
1861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1862	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	320	5	replace
1863	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	79	None	add
1864	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1865	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM,  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1866	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1867	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	79	5	add
1868	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	183	None	replace
1869	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1870	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1871	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1872	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1873	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1874	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
1875	[BUG]  [BUGGY]  if(replacement!=  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
1876	[BUG]  [BUGGY]  if(node.isName())  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName())  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName())  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
1877	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	218	None	replace
1878	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  }  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  }	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	218	None	replace
1879	[BUG]  [BUGGY]  Node  replacement  =  node.replaceChild(node.getFirstChild(),  replacement);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.replaceChild(node.getFirstChild(),  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.replaceChild(node.getFirstChild(),  replacement);	  Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	256	None	replace
1880	[BUG]  [BUGGY]  Node  replacement  =  node.replaceChild(node.getFirstChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.replaceChild(node.getFirstChild());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.replaceChild(node.getFirstChild());	  Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	256	None	replace
1881	[BUG]  [BUGGY]  Node  replacement  =  node.replaceChild(node.getLastChild(),  replacement);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.replaceChild(node.getLastChild(),  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.replaceChild(node.getLastChild(),  replacement);	  Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	256	None	replace
1882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	335	5	add
1883	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	335	5	add
1884	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CL  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  CL  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.CL  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.CL  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  CL	335	None	add
1885	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
1886	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
1887	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
1888	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  null);	  	compilable	  [FE]  AssertionFailedError  	297	1	add
1889	[BUG]  [BUGGY]  if(replacement.getType()!=  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()!=  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()!=  Token.NAME  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	187	None	replace
1890	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	276	2	replace
1891	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	276	2	replace
1892	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignment());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignment());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignment());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
1893	[BUG]  [BUGGY]  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.gettype()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	334	None	replace
1894	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1895	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.hasChildren());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1896	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isNameAssignmentTo(node.getString()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isNameAssignmentTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isNameAssignmentTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
1897	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1898	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	224	5	replace
1899	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RESTURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RESTURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	104	None	add
1900	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
1901	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	312	5	replace
1902	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString()  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString()	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ')'  expected	97	None	replace
1903	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	299	5	replace
1904	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	299	5	replace
1905	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
1906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
1907	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    >=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	73	5	add
1908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1909	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1911	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1912	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	237	5	add
1913	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	237	5	add
1914	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1915	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	237	5	add
1916	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	192	5	replace
1917	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	192	5	replace
1918	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	244	5	replace
1919	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.hasChildren());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	244	5	replace
1920	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isNameAssignmentTo(node.getString()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isNameAssignmentTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isNameAssignmentTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
1921	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(replacement.getString(),  node))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
1922	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	27	5	add
1923	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	27	5	add
1924	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
1925	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
1926	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
1927	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	150	5	add
1928	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
1929	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
1930	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
1931	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	2	replace
1932	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignmentTo(node.getString()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignmentTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignmentTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1933	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	308	None	replace
1934	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CRALL  &&  node.isGetProp());  [CE]  cannot  find  symbol  CRALL  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CRALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CRALL  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  CRALL	212	None	add
1935	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CL  &&  node.isGetProp());  [CE]  cannot  find  symbol  CL  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CL  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  CL	212	None	add
1936	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
1937	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	322	5	add
1938	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	322	None	add
1939	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()!=    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1940	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()!=    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1941	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1942	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	211	5	replace
1943	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1944	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1945	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1946	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1947	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1948	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1949	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1950	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	235	5	add
1951	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
1952	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getString()!=  null);	  	compilable	  [FE]  RuntimeException  	300	5	add
1953	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Node  node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  Node  node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    Node  node.getType()  ==  Token.VAR  ||  node.getString()!=  null);	  	non-compiled	[CE]  ';'  expected	300	None	add
1954	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	replace
1955	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	replace
1956	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	replace
1957	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1958	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	319	5	add
1959	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
1960	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
1961	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1962	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1963	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1964	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
1965	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	179	5	add
1966	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	179	5	add
1967	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1968	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1970	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	214	5	add
1971	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()!=  null);  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()!=  null);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
1972	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
1973	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
1974	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp(),  node.getParent());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
1975	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getParent());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	269	2	replace
1976	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
1977	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
1978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1979	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
1980	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	195	None	add
1981	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1982	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1983	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	255	None	replace
1984	[BUG]  [BUGGY]  if(replacement!=  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	255	None	replace
1985	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	114	None	replace
1986	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	81	5	replace
1987	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	81	5	replace
1988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
1989	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	171	5	replace
1990	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
1991	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	62	2	replace
1992	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	62	2	replace
1993	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1994	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	86	5	replace
1995	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	86	5	replace
1996	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	55	1	replace
1997	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	55	1	replace
1998	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
1999	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
2000	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node,  node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	5	None	replace
2001	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
2002	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
2003	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement,  this);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement,  this);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  replacement,  this);	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2004	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  ==  Token.NAME  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
2005	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	87	None	add
2006	[BUG]  [BUGGY]  If(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  If(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	If(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
2007	[BUG]  [BUGGY]  AssertionFailedError.checkState(replacement.isName());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  AssertionFailedError.checkState(replacement.isName());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	AssertionFailedError.checkState(replacement.isName());	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
2008	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	142	None	replace
2009	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isImmutable());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isImmutable());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isImmutable());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
2010	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	112	None	add
2011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	148	1	replace
2012	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	148	1	replace
2013	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2014	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2015	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2016	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2017	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
2018	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
2019	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	236	5	replace
2020	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node,  node.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
2021	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
2022	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
2023	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
2024	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
2025	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
2026	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
2027	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	279	None	add
2028	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  node.isName())  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
2029	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  ';'  expected	132	None	add
2030	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2031	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.STRING);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2032	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2033	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2034	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CDATA);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  CDATA  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.CDATA);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.CDATA);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  CDATA	328	None	add
2035	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
2036	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
2037	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
2038	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().equals( "prototype "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	325	5	replace
2039	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.getType()  ==  Token.NAME)  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	306	None	replace
2040	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	295	None	replace
2041	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	compilable	  [FE]  RuntimeException  	251	5	replace
2042	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	compilable	  [FE]  RuntimeException  	251	5	replace
2043	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	14	None	replace
2044	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	287	None	replace
2045	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    >>    Token.REGEXP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	56	None	replace
2046	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	154	2	replace
2047	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	154	2	replace
2048	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  node.isName())  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  illegal  start  of  expression	258	None	replace
2049	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  node.getType()!=  Token.NAME);	  	non-compiled	[CE]  ';'  expected	130	None	add
2050	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	130	None	add
2051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	2	replace
2052	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	2	replace
2053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
2054	[BUG]  [BUGGY]  if(replacement!=  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
2055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(replacement.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!node.isName()  &&  isNameAssignedTo(replacement.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
2056	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(replacement.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(replacement.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isNameAssignedTo(replacement.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	4	replace
2057	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
2058	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.isGetProp());  [CE]  cannot  find  symbol  RESGEXP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	227	None	add
2059	[BUG]  [BUGGY]  if(isSafeReplacement(node,  ref)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  ref  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  ref)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  ref)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  ref	291	None	replace
2060	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  AssertionFailedError  	109	2	replace
2061	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	compilable	  [FE]  AssertionFailedError  	109	2	replace
2062	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	70	None	add
2063	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  name);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  name);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	133	None	replace
2064	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
2065	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	133	5	replace
2066	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    if(isSafeReplacement(node,  replacement)||  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
2067	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  ISNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replacement)||  ISNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    if(isSafeReplacement(node,  replacement)||  ISNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
2068	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
2069	[BUG]  [BUGGY]  if(replacement.isName()  ||  isReplacementAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isReplacementAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isReplacementAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
2070	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replace  }  ))  {  [CE]  cannot  find  symbol  replace  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replace  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replace  }  ))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    new    String[]    {    replacement    }    ))    {    	non-compiled	[CE]  cannot  find  symbol  replace	321	None	replace
2071	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	234	None	replace
2072	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  AssertionFailedError  	234	2	replace
2073	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    	compilable	  [FE]  AssertionFailedError  	234	2	replace
2074	[BUG]  [BUGGY]  if(replaceable!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replaceable!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replaceable!=  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replaceable))    {    	non-compiled	[CE]  illegal  start  of  expression	262	None	replace
2075	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	77	5	add
2076	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	77	5	add
2077	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement!=  null)  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  if(replacement!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	110	4	add
2078	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  if(replacement!=  null)  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  if(replacement!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	110	4	add
2079	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
2080	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
2081	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESULT,  replacement);  [CE]  cannot  find  symbol  RESULT  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESULT,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESULT,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESULT	225	None	add
2082	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replaceable);  [CE]  cannot  find  symbol  replaceable  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replaceable);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replaceable);	  	non-compiled	[CE]  cannot  find  symbol  replaceable	225	None	add
2083	[BUG]  [BUGGY]  if(node!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	4	None	replace
2084	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2085	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2086	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getFirstChild(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
2087	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
2088	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
2089	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	229	None	replace
2090	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.SEMI);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	229	None	replace
2091	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(node!=  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
2092	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild(),  node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
2093	[BUG]  [BUGGY]  Préconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Pr  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Préconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Préconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Pr	268	None	replace
2094	[BUG]  [BUGGY]  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  preconditions	268	None	replace
2095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	65	5	add
2096	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	65	5	add
2097	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  scope))  {  [CE]  cannot  find  symbol  scope  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  scope))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  scope))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  scope	136	None	replace
2098	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	136	None	replace
2099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	107	5	replace
2100	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	107	5	replace
2101	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	252	None	add
2102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2103	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	5	add
2105	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	288	5	add
2106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2107	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.DEC);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.DEC);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2109	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.DEC);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.DEC);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.DEC);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2110	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	61	None	add
2111	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
2112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
2113	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
2114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	189	5	replace
2115	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	189	5	replace
2116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2117	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2118	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	15	None	add
2119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2120	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2121	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
2122	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	replace
2123	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	replace
2124	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	replace
2125	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  replacement.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	replace
2126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2127	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.hasChildren());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.hasChildren());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2128	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isNameAssignmentTo(node.getString()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isNameAssignmentTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isNameAssignmentTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
2129	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()!=    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
2130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	191	2	replace
2131	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()!=    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	191	2	replace
2132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2133	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2134	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  CDATA  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.CDATA);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  CDATA	309	None	add
2135	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  SEMI  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	309	None	add
2136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
2137	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
2138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	29	5	add
2139	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	29	5	add
2140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
2141	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	29	5	add
2142	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	52	None	add
2143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2144	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2146	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2148	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2149	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2150	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FOR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2152	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	330	5	add
2153	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement.getString());  [CE]  cannot  find  symbol  SYNTHETIC  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement.getString());	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	206	None	add
2154	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.SIGNATURE,  replacement.getString());  [CE]  cannot  find  symbol  SIGNATURE  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.SIGNATURE,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.SIGNATURE,  replacement.getString());	  	non-compiled	[CE]  cannot  find  symbol  SIGNATURE	206	None	add
2155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	233	5	add
2156	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	233	5	add
2157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	233	5	add
2158	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	233	5	add
2159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
2160	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	233	5	add
2161	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  preconditions	8	None	replace
2162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	106	5	replace
2163	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	106	5	replace
2164	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	249	None	add
2165	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());	  	non-compiled	[CE]  not  a  statement	249	None	add
2166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	147	4	add
2167	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	147	4	add
2168	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	147	None	add
2169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
2170	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
2171	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	267	None	add
2172	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	267	None	add
2173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
2174	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
2175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
2176	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	21	5	add
2177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
2178	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	5	add
2179	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	54	None	add
2180	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CRALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CRALL);	  	non-compiled	[CE]  cannot  find  symbol  CRALL	190	None	add
2181	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
2182	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node,  replacement.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
2183	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
2184	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
2185	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  RESTURN  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  RESTURN	302	None	replace
2186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	302	5	replace
2187	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	302	5	replace
2188	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getType()  ==  Token.SAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	non-compiled	[CE]  cannot  find  symbol  SAME	290	None	replace
2189	[BUG]  [BUGGY]  if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
2190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getChildCount()!=  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getChildCount()!=  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  AssertionFailedError  	301	2	replace
2191	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getChildCount()!=  0);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getChildCount()!=  0);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getChildCount()!=  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getString()!=    null);    	compilable	  [FE]  AssertionFailedError  	301	2	replace
2192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	194	5	replace
2193	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	194	5	replace
2194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	30	5	replace
2195	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	30	5	replace
2196	[BUG]  [BUGGY]  Node  node  =  node.getParent();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getParent();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getParent();	  Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	replace
2197	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	37	None	replace
2198	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {	  if(node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	129	None	replace
2199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
2200	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getLastChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
2201	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    node))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	103	None	replace
2202	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString()  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString()	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	184	None	replace
2203	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    false))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	100	None	replace
2204	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  false))  {  [CE]  cannot  find  symbol  ref  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  false))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  false))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    false))    {    	non-compiled	[CE]  cannot  find  symbol  ref	100	None	replace
2205	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isStringAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isStringAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isStringAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    >=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
2206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
2207	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
2208	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  ISNameAssignedTo(node.getString(),  node))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  if(replacement.isName()  ||  ISNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    node))    {    if(replacement.isName()  ||  ISNameAssignedTo(node.getString(),  node))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
2209	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	195	None	add
2210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	183	5	replace
2211	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	183	5	replace
2212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	130	5	add
2213	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	130	5	add
2214	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	130	None	add
2215	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.gettype()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.gettype()  ==  Token.FUNCTION);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.gettype()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
2216	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Node  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Node  node  =  node.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	replace
2217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
2218	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	281	5	add
2219	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  Node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    Node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	  	non-compiled	[CE]  not  a  statement	297	None	add
2220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
2221	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	75	5	add
2222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
2223	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
2224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
2225	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getFirstChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    	compilable	  [FE]  RuntimeException  	199	5	replace
2226	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
2227	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement,  null))  {	  if(!node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	102	None	replace
2228	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
2229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2230	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2231	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2232	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	309	5	add
2233	[BUG]  [BUGGY]  if(!node.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  hasNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    hasNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
2234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	162	5	add
2235	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	162	5	add
2236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	162	5	add
2237	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	162	5	add
2238	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	162	None	add
2239	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CREATOR);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  CREATOR  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CREATOR);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.CREATOR);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  CREATOR	235	None	add
2240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
2241	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	318	2	replace
2242	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
2243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
2244	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
2245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
2246	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
2247	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	202	None	add
2248	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  RESGEXP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	87	None	add
2249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
2250	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	32	5	replace
2251	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	32	None	replace
2252	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
2253	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
2254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement)&&  isSafeReplacement(node.getFirstChild(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement)&&  isSafeReplacement(node.getFirstChild(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  RuntimeException  	230	4	replace
2255	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement)&&  isSafeReplacement(node.getFirstChild(),  replacement))  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement)&&  isSafeReplacement(node.getFirstChild(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement)&&  isSafeReplacement(node.getFirstChild(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  RuntimeException  	230	4	replace
2256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.RETURN  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.RETURN  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  RuntimeException  	271	3	replace
2257	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.RETURN  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.RETURN  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.RETURN  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	compilable	  [FE]  RuntimeException  	271	3	replace
2258	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);  [CE]  cannot  find  symbol  SAME  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SAME	200	None	add
2259	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.LAME,  replacement);  [CE]  cannot  find  symbol  LAME  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.LAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.LAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  LAME	200	None	add
2260	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  node))  {	  if(!replacement.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	248	None	replace
2261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	177	5	replace
2262	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	177	5	replace
2263	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	30	None	replace
2264	[BUG]  [BUGGY]  if(replacement  ==  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null)  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
2265	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
2266	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
2267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
2268	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	146	5	replace
2269	[BUG]  [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	172	None	add
2270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
2271	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	314	2	replace
2272	[BUG]  [BUGGY]  if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replaceable))    {    	non-compiled	[CE]  illegal  start  of  expression	262	None	replace
2273	[BUG]  [BUGGY]  if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replaceable  ==  node)  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()    ||    isNameAssignedTo(node.getString(),    replaceable))    {    	non-compiled	[CE]  illegal  start  of  expression	262	None	replace
2274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	187	3	replace
2275	[BUG]  [BUGGY]  if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()!=  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	187	3	replace
2276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
2277	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	212	5	add
2278	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
2279	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	53	5	replace
2280	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
2281	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	329	5	replace
2282	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBlock(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBlock(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkBlock(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	329	None	replace
2283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  node  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	2	3	replace
2284	[BUG]  [BUGGY]  if(replacement!=  node  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  node  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  node  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	2	3	replace
2285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2286	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	15	5	add
2287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	263	5	replace
2288	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	263	5	replace
2289	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
2290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	2	replace
2291	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	173	2	replace
2292	[BUG]  [BUGGY]  if(NodeUtil.isName(node)&&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(NodeUtil.isName(node)&&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(NodeUtil.isName(node)&&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2293	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  cannot  find  symbol  ref  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  cannot  find  symbol  ref	303	None	replace
2294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  node  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  RuntimeException  	303	3	replace
2295	[BUG]  [BUGGY]  if(replacement  ==  node  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  node  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  RuntimeException  	303	3	replace
2296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
2297	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	310	5	replace
2298	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	237	None	add
2299	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
2300	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	226	None	replace
2301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
2302	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
2303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.getFirstChild()!=  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.getFirstChild()!=  node);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
2304	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.getFirstChild()!=  node);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.getFirstChild()!=  node);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  replacement.getFirstChild()!=  node);	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    	compilable	  [FE]  RuntimeException  	226	5	replace
2305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.RETURN  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  node.getType()  ==  Token.RETURN  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	240	2	replace
2306	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.RETURN  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.getType()  ==  Token.RETURN  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.getType()  ==  Token.RETURN  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	240	2	replace
2307	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	80	None	replace
2308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2309	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2311	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK,  replacement.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2313	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL,  replacement.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL,  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL,  replacement.getString());	  	compilable	  [FE]  RuntimeException  	206	5	add
2314	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	147	None	add
2315	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getFirstChild());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getFirstChild());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	147	None	add
2316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
2317	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	41	5	add
2318	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  CR  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CR);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  CR	41	None	add
2319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!node.isName())  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	90	3	replace
2320	[BUG]  [BUGGY]  if(!node.isName())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName())  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	90	3	replace
2321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||!node.isName())  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	3	replace
2322	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||!node.isName())  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||!node.isName())  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	3	replace
2323	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	305	None	replace
2324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	5	replace
2325	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node,  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	compilable	  [FE]  AssertionFailedError  	305	5	replace
2326	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	236	None	replace
2327	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
2328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2329	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  replacement.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  replacement.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2331	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	213	5	replace
2332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	296	5	replace
2333	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	296	5	replace
2334	[BUG]  [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	37	None	replace
2335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GET);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	37	5	replace
2336	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET);  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GET);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	37	5	replace
2337	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
2338	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	179	5	add
2339	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    ==    Token.CRALL);    	non-compiled	[CE]  cannot  find  symbol  CRALL	251	None	replace
2340	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
2341	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  replacement);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN,    replacement);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	109	None	replace
2342	[BUG]  [BUGGY]  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	219	None	replace
2343	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	replace
2344	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
2345	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	332	5	add
2346	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  LONG  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.CALL);    Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  LONG	332	None	add
2347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
2348	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	275	1	add
2349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	45	2	replace
2350	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getType()!=  Token.CALL);  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getType()!=  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()    >>    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	45	2	replace
2351	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
2352	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
2353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
2354	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	214	5	add
2355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
2356	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	28	5	replace
2357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	1	replace
2358	[BUG]  [BUGGY]  if(node  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	142	1	replace
2359	[BUG]  [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	216	None	replace
2360	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  cannot  find  symbol  replace  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  cannot  find  symbol  replace	261	None	replace
2361	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2362	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2363	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	49	None	add
2364	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.DEFAULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.DEFAULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
2365	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.DEFAULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.DEFAULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.DEFAULT);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	49	5	add
2366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	49	5	add
2367	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	49	5	add
2368	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.getName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
2369	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  name))  {  [CE]  cannot  find  symbol  name  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  name))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  name))  {	  if(replacement!=    null    &&    node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  name	136	None	replace
2370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	170	5	add
2371	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	170	5	add
2372	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  true))  {  [CE]  cannot  find  symbol  ref  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  true))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  ref,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    true))    {    	non-compiled	[CE]  cannot  find  symbol  ref	101	None	replace
2373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
2374	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	336	2	replace
2375	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isProp());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isProp());	  	non-compiled	[CE]  cannot  find  symbol	227	None	add
2376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	83	2	replace
2377	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getString()  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	83	2	replace
2378	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
2379	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
2380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
2381	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	9	5	add
2382	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
2383	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());  this.replacement  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    this.replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  replacement	149	None	replace
2384	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	165	5	add
2385	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	165	5	add
2386	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	165	None	add
2387	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI,  replacement);  [CE]  cannot  find  symbol  SEMI  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI,  replacement);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.SEMI);    	non-compiled	[CE]  cannot  find  symbol  SEMI	229	None	replace
2388	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  ref);  [CE]  cannot  find  symbol  ref  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  ref);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	65	None	add
2389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	10	5	replace
2390	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	10	5	replace
2391	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetQualifiedName());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetQualifiedName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
2392	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetName());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetName());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetName());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
2393	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetElement());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetElement());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetElement());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
2394	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetReference());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetReference());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetReference());	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
2395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
2396	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	66	2	replace
2397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
2398	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	278	2	replace
2399	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  name))  {  [CE]  cannot  find  symbol  name  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  name))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  name))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replace))    {    	non-compiled	[CE]  cannot  find  symbol  name	258	None	replace
2400	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  ref.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  ref  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  ref.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  ref.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  ref	210	None	add
2401	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  SAME  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    ||    replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.SAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  SAME	210	None	add
2402	[BUG]  [BUGGY]  if(isSafeReplacement(replacement)&&  isNameAssignedTo(node.getString(),  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(replacement)&&  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(replacement)&&  isNameAssignedTo(node.getString(),  node))  {	  if(isSafeReplacement(node)&&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	188	None	replace
2403	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
2404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2405	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2406	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  SEMI  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	288	None	add
2407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2408	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	288	5	add
2409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignmentEvent(this));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignmentEvent(this));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssignmentEvent(this));	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());	  NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
2412	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.CALL);        Preconditions.checkArgument(node.getType()!=    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	43	5	add
2413	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getFirstChild(),  replacement))  {  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getFirstChild(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  isNameAssignedTo(node.getFirstChild(),  replacement))  {	  if(replacement!=    null    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	4	None	replace
2414	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
2415	[BUG]  [BUGGY]  Node  node  =  replacement.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.getNext();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getNext();	  Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	replace
2416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
2417	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	76	5	replace
2418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isAssignmentOp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isAssignmentOp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	274	5	replace
2419	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isAssignmentOp(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isAssignmentOp(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isAssignmentOp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	274	5	replace
2420	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild(),  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isName(node.getString()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
2421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2422	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2423	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
2424	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  node  =  node.getFirstChild();  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	55	5	replace
2425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	78	5	replace
2426	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	78	5	replace
2427	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESERVED);  [CE]  cannot  find  symbol  RESERVED  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESERVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESERVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	non-compiled	[CE]  cannot  find  symbol  RESERVED	259	None	replace
2428	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
2429	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RESGEXP);    	compilable	  [FE]  RuntimeException  	259	5	replace
2430	[BUG]  [BUGGY]  Node  replacement  =  node.replaceChild(node,  replacement);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Node  replacement  =  node.replaceChild(node,  replacement);  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.replaceChild(node,  replacement);	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
2431	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  replace  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  replace	291	None	replace
2432	[BUG]  [BUGGY]  if(isSafeReplacement(node,  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  isNameAssignedTo(node.getString(),  replacement))  {	  if(isSafeReplacement(node)||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ')'  expected	291	None	replace
2433	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getFirstChild());	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
2434	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getFirstChild());  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getFirstChild());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getFirstChild());	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    >>    Token.RETURN);    	compilable	  [FE]  RuntimeException  	72	5	replace
2435	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkMutator(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2436	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.SEMI);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    >=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	168	None	add
2437	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
2438	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
2439	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
2440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  &&  replacement.getString().equals( "name "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME  &&  replacement.getString().equals( "name "));	  Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	209	5	replace
2441	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  &&  replacement.getString().equals( "name "));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME  &&  replacement.getString().equals( "name "));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME  &&  replacement.getString().equals( "name "));	  Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	209	5	replace
2442	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  not  a  statement	313	None	add
2443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
2444	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
2445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.BLOCK  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
2446	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.BLOCK  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	313	1	add
2447	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	238	None	replace
2448	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	290	5	replace
2449	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.ASSIGN);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.ASSIGN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.SAME);    	compilable	  [FE]  RuntimeException  	290	5	replace
2450	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
2451	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  true);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  true);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  true);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	64	5	replace
2452	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	133	None	replace
2453	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  preconditions	48	None	replace
2454	[BUG]  [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	preconditions.checkArgument(node.getType()  ==  Token.CALL);	          Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  preconditions	48	None	replace
2455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	233	5	add
2456	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETELEM);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	233	5	add
2457	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	311	None	add
2458	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
2459	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.DEC);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	311	5	add
2460	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	31	5	add
2461	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	31	5	add
2462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  node))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	92	4	replace
2463	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  node))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	92	4	replace
2464	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
2465	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	331	5	replace
2466	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkVar(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkVar(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkVar(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	331	None	replace
2467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  AssertionFailedError  	221	2	replace
2468	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME,  replacement);	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  AssertionFailedError  	221	2	replace
2469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	27	5	add
2470	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	27	5	add
2471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  node  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
2472	[BUG]  [BUGGY]  if(replacement  ==  node  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement  ==  node  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  node  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    ||    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
2473	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
2474	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	196	5	replace
2475	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
2476	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	176	5	add
2477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2478	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2479	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2480	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	7	5	add
2481	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	  Preconditions.checkState(node.getType()!=    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
2482	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP,  replacement);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	225	None	add
2483	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  ref);  [CE]  cannot  find  symbol  ref  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  ref);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	225	None	add
2484	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString());	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	207	None	replace
2485	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()    ==    Token.RECEIVED);    	non-compiled	[CE]  cannot  find  symbol  RECEIVED	260	None	replace
2486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2487	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	333	5	replace
2488	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkCall(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkCall(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkCall(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	333	None	replace
2489	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.CALL);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.CALL);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	333	None	replace
2490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
2491	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.REGEXP);        Preconditions.checkArgument(node.getType()!=    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	52	5	add
2492	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isName(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.CALL    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
2493	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()  ==  replacement);  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp()  ||  node.getProp()  ==  replacement);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
2494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
2495	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
2496	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
2497	[BUG]  [BUGGY]  if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  [CE]  '('  expected  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    	non-compiled	[CE]  '('  expected	181	None	replace
2498	[BUG]  [BUGGY]  if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    node    =    node.getFirstChild();    if    (node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
2499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
2500	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	289	5	replace
2501	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
2502	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
2503	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	59	None	add
2504	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replaceable))  {  [CE]  cannot  find  symbol  replaceable  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replaceable))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replaceable))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement,    node))    {    	non-compiled	[CE]  cannot  find  symbol  replaceable	103	None	replace
2505	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	29	5	add
2506	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	29	5	add
2507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
2508	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getString()  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
2509	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString().equals( "name "));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString().equals( "name "));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  replacement.getString().equals( "name "));	  Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
2510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	4	replace
2511	[BUG]  [BUGGY]  if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()!=  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	175	4	replace
2512	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2513	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2515	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.DEC);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	328	5	add
2516	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  LONG  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.BLOCK);    Preconditions.checkState(node.getType()  ==  Token.LONG);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  LONG	328	None	add
2517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
2518	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getFirstChild()!=    null);    	compilable	  [FE]  RuntimeException  	298	5	replace
2519	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	220	None	add
2520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
2521	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	220	5	add
2522	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME,  replacement);  [CE]  cannot  find  symbol  SAME  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.SAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SAME	220	None	add
2523	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,    replacement)||    isNameAssignedTo(node.getString(),    replacement))    {    if(isSafeReplacement(node,  replace)||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
2524	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	330	None	add
2525	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkParameter(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkParameter(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkParameter(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
2526	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkType(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkType(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkType(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
2527	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  ref);  [CE]  cannot  find  symbol  ref  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  ref);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	198	None	add
2528	[BUG]  [BUGGY]  if(replacement.isName()  ||  replacement.isNameAssignedTo(node.getString(),  replacement))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.isName()  ||  replacement.isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  replacement.isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    ref))    {    	non-compiled	[CE]  cannot  find  symbol	292	None	replace
2529	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	326	None	add
2530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	60	2	replace
2531	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()  ==  null);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getString()  ==  null);	  Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	60	2	replace
2532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
2533	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	67	5	add
2534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
2535	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	285	5	add
2536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	compilable	  [FE]  RuntimeException  	36	5	replace
2537	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	compilable	  [FE]  RuntimeException  	36	5	replace
2538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	compilable	  [FE]  RuntimeException  	36	5	replace
2539	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	compilable	  [FE]  RuntimeException  	36	5	replace
2540	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
2541	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	243	5	add
2542	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()  ==  replacement);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	319	None	add
2543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.BLOCK,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
2544	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.BLOCK,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.BLOCK,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
2545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
2546	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	132	5	add
2547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
2548	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()    >=    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	156	5	add
2549	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
2550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	255	4	replace
2551	[BUG]  [BUGGY]  if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	255	4	replace
2552	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.VAR  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.getType()  ==  Token.VAR  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()    ==    Token.NAME    &&!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.getType()  ==  Token.VAR  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
2553	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
2554	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
2555	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
2556	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
2557	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	201	5	replace
2558	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	201	None	replace
2559	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
2560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	143	5	add
2561	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	143	5	add
2562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	143	5	add
2563	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	143	5	add
2564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	143	5	add
2565	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	143	5	add
2566	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
2567	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	18	5	add
2568	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
2569	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
2570	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  RESGEXP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	317	None	add
2571	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  ref);  [CE]  cannot  find  symbol  ref  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  ref);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.REGEXP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	317	None	add
2572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
2573	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.VAR);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    >>    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
2574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
2575	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()        ==        Token.NAME);        Preconditions.checkArgument(replacement.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	153	5	add
2576	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(node));  [BUGGY]      node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
2577	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();      [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]      &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	129	None	replace
