bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
2	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	5	replace
4	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	5	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  RuntimeException  	25	3	replace
6	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  RuntimeException  	25	3	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	4	replace
8	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	4	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	  	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
11	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	24	5	add
13	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	24	5	add
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkState(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
15	[BUG]  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkState(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
16	[BUG]  [BUGGY]    Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Node  node  =  node.getFirstChild();  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Node  node  =  node.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	24	None	add
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
18	[BUG]  [BUGGY]    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	24	5	add
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	24	5	add
20	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	24	5	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	1	replace
22	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  AssertionFailedError  	25	1	replace
23	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	25	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  AssertionFailedError  	24	1	add
25	[BUG]  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  AssertionFailedError  	24	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  AssertionFailedError  	24	1	add
27	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  AssertionFailedError  	24	1	add
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);		compilable	  [FE]  RuntimeException  	24	5	add
29	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);		compilable	  [FE]  RuntimeException  	24	5	add
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  RuntimeException  	25	3	replace
31	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  	compilable	  [FE]  RuntimeException  	25	3	replace
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	24	5	add
33	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	24	5	add
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.CALL);		compilable	  [FE]  RuntimeException  	24	5	add
35	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.CALL);		compilable	  [FE]  RuntimeException  	24	5	add
