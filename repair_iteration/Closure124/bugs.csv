bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (next.isQualifiedName()) { [FE] AssertionFailedError [CONTEXT] case Token.VAR: if (next.getFirstChild().hasChildren()) { parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: [BUGGY] if (next.isQualifiedName()) { [BUGGY] String nextName = next.getQualifiedName(); if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	136	136	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.VAR: if (next.getFirstChild().hasChildren()) { parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: [BUGGY] [BUGGY] if (next.isQualifiedName()) { String nextName = next.getQualifiedName(); if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	136	136	1	add	
3	[BUG] [BUGGY] String nextName = next.getQualifiedName(); [FE] AssertionFailedError [CONTEXT] if (next.getFirstChild().hasChildren()) { parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: if (next.isQualifiedName()) { [BUGGY] String nextName = next.getQualifiedName(); [BUGGY] if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	137	137	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (next.getFirstChild().hasChildren()) { parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: if (next.isQualifiedName()) { [BUGGY] [BUGGY] String nextName = next.getQualifiedName(); if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	137	137	1	add	
5	[BUG] [BUGGY] if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) { [FE] AssertionFailedError [CONTEXT] parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: if (next.isQualifiedName()) { String nextName = next.getQualifiedName(); [BUGGY] if (value.isQualifiedName() &&    nextName.equals(value.getQualifiedName())) { [BUGGY] nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; }  [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	138	139	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] parent = next.getFirstChild(); next = parent.getFirstChild(); break; } return false; case Token.GETPROP: case Token.NAME: if (next.isQualifiedName()) { String nextName = next.getQualifiedName(); [BUGGY] [BUGGY] if (value.isQualifiedName() &&    nextName.equals(value.getQualifiedName())) { nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; }  [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	138	139	1	add	
7	[BUG] [BUGGY] if (!isSafeReplacement(next, assign)) { [FE] AssertionFailedError [CONTEXT] if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     [BUGGY] if (!isSafeReplacement(next, assign)) { [BUGGY] return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	145	145	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {     [BUGGY] [BUGGY] if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	145	145	1	add	
9	[BUG] [BUGGY] exprParent.removeChild(expr); [FE] AssertionFailedError [CONTEXT] nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; } [BUGGY] exprParent.removeChild(expr); [BUGGY] expr.removeChild(assign); parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	149	149	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] nextName.equals(value.getQualifiedName())) {     if (!isSafeReplacement(next, assign)) { return false; } [BUGGY] [BUGGY] exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	149	149	1	add	
11	[BUG] [BUGGY] expr.removeChild(assign); [FE] AssertionFailedError [CONTEXT]     if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); [BUGGY] expr.removeChild(assign); [BUGGY] parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	150	150	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]     if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); [BUGGY] [BUGGY] expr.removeChild(assign); parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	150	150	1	add	
13	[BUG] [BUGGY] parent.replaceChild(next, assign); [FE] AssertionFailedError [CONTEXT]    if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); [BUGGY] parent.replaceChild(next, assign); [BUGGY] return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	151	151	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); [BUGGY] [BUGGY] parent.replaceChild(next, assign); return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	151	151	1	add	
15	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT]   if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); [BUGGY] return true; [BUGGY] } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	152	152	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); [BUGGY] [BUGGY] return true; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	152	152	1	add	
17	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; } } [BUGGY] return false; [BUGGY]  case Token.ASSIGN:         [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	155	155	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!isSafeReplacement(next, assign)) { return false; } exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; } } [BUGGY] [BUGGY] return false; case Token.ASSIGN:         [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	155	155	1	add	
19	[BUG] [BUGGY] if (node.isName()) { [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  [BUGGY] if (node.isName()) { [BUGGY] return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; }  [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	208	208	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  [BUGGY] [BUGGY] if (node.isName()) { return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; }  [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	208	208	1	add	
21	[BUG] [BUGGY] Preconditions.checkArgument(node.isGetProp()); [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } [BUGGY] Preconditions.checkArgument(node.isGetProp()); [BUGGY]  node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } [BUGGY] [BUGGY] Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	
23	[BUG] [BUGGY] node = node.getFirstChild(); [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } Preconditions.checkArgument(node.isGetProp()); [BUGGY] node = node.getFirstChild(); [BUGGY] if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } Preconditions.checkArgument(node.isGetProp()); [BUGGY] [BUGGY] node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	
25	[BUG] [BUGGY] if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); [BUGGY] if (node.isName()  && isNameAssignedTo(node.getString(), replacement)) { [BUGGY] && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isSafeReplacement(Node node, Node replacement) {  if (node.isName()) { return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); [BUGGY] [BUGGY] if (node.isName()  && isNameAssignedTo(node.getString(), replacement)) { && isNameAssignedTo(node.getString(), replacement)) { return false; } return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	
27	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } [BUGGY] return true; [BUGGY] } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return true; } Preconditions.checkArgument(node.isGetProp()); node = node.getFirstChild(); if (node.isName() && isNameAssignedTo(node.getString(), replacement)) { return false; } [BUGGY] [BUGGY] return true; } [CLASS] ExploitAssigns [METHOD] isSafeReplacement [RETURN_TYPE] boolean  Node node Node replacement [VARIABLES] boolean Node node replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	add	
29	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] private static boolean isCollapsibleValue(Node value, boolean isLValue) { switch (value.getType()) { case Token.GETPROP:     return !isLValue || value.getFirstChild().isThis(); case Token.NAME: [BUGGY] return true; [BUGGY]  default: return NodeUtil.isImmutableValue(value); } } [CLASS] ExploitAssigns [METHOD] isCollapsibleValue [RETURN_TYPE] boolean  Node value boolean isLValue [VARIABLES] boolean isLValue Node value  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4082482904638631	86	86	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean isCollapsibleValue(Node value, boolean isLValue) { switch (value.getType()) { case Token.GETPROP:     return !isLValue || value.getFirstChild().isThis(); case Token.NAME: [BUGGY] [BUGGY] return true; default: return NodeUtil.isImmutableValue(value); } } [CLASS] ExploitAssigns [METHOD] isCollapsibleValue [RETURN_TYPE] boolean  Node value boolean isLValue [VARIABLES] boolean isLValue Node value  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4082482904638631	86	86	1	add	
31	[BUG] [BUGGY] reportCodeChange(); [FE] AssertionFailedError [CONTEXT] private void collapseAssign(Node assign, Node expr, Node exprParent) { Node leftValue = assign.getFirstChild(); Node rightValue = leftValue.getNext(); if (isCollapsibleValue(leftValue, true) && collapseAssignEqualTo(expr, exprParent, leftValue)) { reportCodeChange(); } else if (isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue)) { [BUGGY] reportCodeChange(); [BUGGY] } else if (rightValue.isAssign()) {  collapseAssign(rightValue, expr, exprParent); } } [CLASS] ExploitAssigns [METHOD] collapseAssign [RETURN_TYPE] void  Node assign Node expr Node exprParent [VARIABLES] boolean Node assign expr exprParent leftValue rightValue  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	55	55	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void collapseAssign(Node assign, Node expr, Node exprParent) { Node leftValue = assign.getFirstChild(); Node rightValue = leftValue.getNext(); if (isCollapsibleValue(leftValue, true) && collapseAssignEqualTo(expr, exprParent, leftValue)) { reportCodeChange(); } else if (isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue)) { [BUGGY] [BUGGY] reportCodeChange(); } else if (rightValue.isAssign()) {  collapseAssign(rightValue, expr, exprParent); } } [CLASS] ExploitAssigns [METHOD] collapseAssign [RETURN_TYPE] void  Node assign Node expr Node exprParent [VARIABLES] boolean Node assign expr exprParent leftValue rightValue  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	55	55	1	add	
33	[BUG] [BUGGY] collapseAssign(rightValue, expr, exprParent); [FE] AssertionFailedError [CONTEXT] Node leftValue = assign.getFirstChild(); Node rightValue = leftValue.getNext(); if (isCollapsibleValue(leftValue, true) && collapseAssignEqualTo(expr, exprParent, leftValue)) { reportCodeChange(); } else if (isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue)) { reportCodeChange(); } else if (rightValue.isAssign()) {  [BUGGY] collapseAssign(rightValue, expr, exprParent); [BUGGY] } } [CLASS] ExploitAssigns [METHOD] collapseAssign [RETURN_TYPE] void  Node assign Node expr Node exprParent [VARIABLES] boolean Node assign expr exprParent leftValue rightValue  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	58	58	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node leftValue = assign.getFirstChild(); Node rightValue = leftValue.getNext(); if (isCollapsibleValue(leftValue, true) && collapseAssignEqualTo(expr, exprParent, leftValue)) { reportCodeChange(); } else if (isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue)) { reportCodeChange(); } else if (rightValue.isAssign()) {  [BUGGY] [BUGGY] collapseAssign(rightValue, expr, exprParent); } } [CLASS] ExploitAssigns [METHOD] collapseAssign [RETURN_TYPE] void  Node assign Node expr Node exprParent [VARIABLES] boolean Node assign expr exprParent leftValue rightValue  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	58	58	1	add	
35	[BUG] [BUGGY] return !isLValue || value.getFirstChild().isThis(); [FE] AssertionFailedError [CONTEXT] private static boolean isCollapsibleValue(Node value, boolean isLValue) { switch (value.getType()) { case Token.GETPROP:     [BUGGY] return !isLValue || value.getFirstChild().isThis(); [BUGGY]  case Token.NAME: return true; default: return NodeUtil.isImmutableValue(value); } } [CLASS] ExploitAssigns [METHOD] isCollapsibleValue [RETURN_TYPE] boolean  Node value boolean isLValue [VARIABLES] boolean isLValue Node value  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	83	83	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean isCollapsibleValue(Node value, boolean isLValue) { switch (value.getType()) { case Token.GETPROP:     [BUGGY] [BUGGY] return !isLValue || value.getFirstChild().isThis(); case Token.NAME: return true; default: return NodeUtil.isImmutableValue(value); } } [CLASS] ExploitAssigns [METHOD] isCollapsibleValue [RETURN_TYPE] boolean  Node value boolean isLValue [VARIABLES] boolean isLValue Node value  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	83	83	1	add	
37	[BUG] [BUGGY] Node leftSide = next.getFirstChild(); [FE] AssertionFailedError [CONTEXT]           [BUGGY] Node leftSide = next.getFirstChild(); [BUGGY] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	170	170	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]           [BUGGY] [BUGGY] Node leftSide = next.getFirstChild(); if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	170	170	1	add	
39	[BUG] [BUGGY] if (leftSide.isName() || leftSide.isGetProp() &&  leftSide.getFirstChild().isThis()) { [FE] AssertionFailedError [CONTEXT]          Node leftSide = next.getFirstChild(); [BUGGY] if (leftSide.isName() ||    leftSide.isGetProp() &&       leftSide.getFirstChild().isThis()) { [BUGGY] leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); break; } else { return false; }  [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	171	173	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]          Node leftSide = next.getFirstChild(); [BUGGY] [BUGGY] if (leftSide.isName() ||    leftSide.isGetProp() &&       leftSide.getFirstChild().isThis()) { leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); break; } else { return false; }  [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	171	173	1	add	
41	[BUG] [BUGGY] parent = next; [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  [BUGGY] parent = next; [BUGGY] next = leftSide.getNext(); break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	175	175	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  [BUGGY] [BUGGY] parent = next; next = leftSide.getNext(); break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	175	175	1	add	
43	[BUG] [BUGGY] next = leftSide.getNext(); [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; [BUGGY] next = leftSide.getNext(); [BUGGY] break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	176	176	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; [BUGGY] [BUGGY] next = leftSide.getNext(); break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	176	176	1	add	
45	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); [BUGGY] break; [BUGGY] } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	177	177	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {  parent = next; next = leftSide.getNext(); [BUGGY] [BUGGY] break; } else { return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	177	177	1	add	
47	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; }  return false; } } [BUGGY] return false; [BUGGY] } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	198	198	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true; }  return false; } } [BUGGY] [BUGGY] return false; } [CLASS] ExploitAssigns [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean  Node expr Node exprParent Node value [VARIABLES] boolean Node assign expr exprParent leftSide next parent value String nextName  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.3779644730092272	198	198	1	add	
