bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	22	5	add
2	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	22	5	add
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	22	5	add
4	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	22	5	add
5	[BUG]  [BUGGY]    Preconditions.checkState(NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkState(NodeUtil.isGetProp(node));  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkState(NodeUtil.isGetProp(node));		non-compiled	[CE]  cannot  find  symbol	22	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  AssertionFailedError  	22	1	add
7	[BUG]  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  AssertionFailedError  	22	1	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkState(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	22	5	add
9	[BUG]  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkState(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	22	5	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  AssertionFailedError  	22	1	add
11	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  AssertionFailedError  	22	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getLastChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getLastChild();	node  =  node.getFirstChild();  	compilable	  [FE]  AssertionFailedError  	23	2	replace
13	[BUG]  [BUGGY]  node  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getLastChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getLastChild();	node  =  node.getFirstChild();  	compilable	  [FE]  AssertionFailedError  	23	2	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getNext();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getNext();	node  =  node.getFirstChild();  	compilable	  [FE]  RuntimeException  	23	4	replace
15	[BUG]  [BUGGY]  node  =  node.getNext();  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.getNext();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();	node  =  node.getFirstChild();  	compilable	  [FE]  RuntimeException  	23	4	replace
16	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getLastChild();	node  =  node.getFirstChild();  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	23	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	  	node  =  node.getFirstChild();  	compilable	  [FE]  AssertionFailedError  	23	2	replace
18	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	  	node  =  node.getFirstChild();  	compilable	  [FE]  AssertionFailedError  	23	2	replace
19	[BUG]  [BUGGY]    Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Node  node  =  node.getFirstChild();  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Node  node  =  node.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	22	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkNotNull(replacement);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkNotNull(replacement);		compilable	  [FE]  AssertionFailedError  	22	1	add
21	[BUG]  [BUGGY]    Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkNotNull(replacement);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkNotNull(replacement);		compilable	  [FE]  AssertionFailedError  	22	1	add
22	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement);  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.replaceChild(node,  replacement);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement);	node  =  node.getFirstChild();  	non-compiled	[CE]  incompatible  types	23	None	replace
23	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.removeFirstChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.removeFirstChild();	node  =  node.getFirstChild();  	compilable	  [FE]  IllegalStateException  	23	2	replace
24	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  [FE]  IllegalStateException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  [BUGGY]  node  =  node.removeFirstChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.removeFirstChild();	node  =  node.getFirstChild();  	compilable	  [FE]  IllegalStateException  	23	2	replace
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	22	5	add
26	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	22	5	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	22	5	add
28	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	22	5	add
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	    Preconditions.checkState(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	22	5	add
30	[BUG]  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  [BUGGY]    Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	    Preconditions.checkState(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	22	5	add
