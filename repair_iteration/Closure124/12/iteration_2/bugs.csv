bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
2	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
3	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Node  node  =  replacement.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Node  node  =  replacement.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Node  node  =  replacement.getFirstChild();  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	add
4	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	add
5	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	20	None	add
6	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,  node,  replacement);	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	20	None	add
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
8	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	9	5	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	9	5	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
16	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getLastChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	replace
17	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Node  node  =  replacement.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  replacement.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	replace
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	17	5	add
19	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	17	5	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
21	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
23	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	17	5	add
25	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	17	5	add
26	[BUG]  [BUGGY]      Preconditions.checkArgument(NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(NodeUtil.isGetProp(replacement));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(NodeUtil.isGetProp(replacement));	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	17	5	add
28	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	17	5	add
29	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  node);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  replacement.replaceChild(node,  node);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  node);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  incompatible  types	22	None	replace
30	[BUG]  [BUGGY]  Node  node  =  replacement.replaceChild(node,  node);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  replacement.replaceChild(node,  node);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.replaceChild(node,  node);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	22	None	replace
31	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement,  false);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.replaceChild(node,  replacement,  false);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement,  false);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
32	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement,  true);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.replaceChild(node,  replacement,  true);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement,  true);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.removeFirstChild();    node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	23	5	add
34	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	23	5	add
35	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  Node  node  =  node.removeFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    Node  node  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	23	None	add
36	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	23	None	add
37	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	23	5	add
39	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	23	5	add
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  	compilable	  [FE]  RuntimeException  	23	5	add
41	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [FE]  RuntimeException  [FE]              IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  	compilable	  [FE]  RuntimeException  	23	5	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(replacement!=  null);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=  null);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(replacement!=  null);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=  null);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	21	5	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	21	5	replace
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
47	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
48	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	1	None	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
50	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
52	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	1	5	add
53	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	1	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
55	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	4	5	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	4	5	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
61	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
62	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	8	None	add
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
64	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
65	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	8	None	add
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
67	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
69	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
71	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
72	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	27	None	add
73	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  ';'  expected	27	None	add
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
75	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
76	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
78	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	27	5	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  node  =  node.getNext();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getNext();    node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	14	5	add
88	[BUG]  [BUGGY]  node  =  node.getNext();  node  =  node.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  node  =  node.getNext();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	14	5	add
89	[BUG]  [BUGGY]  node  =  node.getNext();  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  Node  node  =  node.getNext();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
90	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	14	5	add
92	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	14	5	add
93	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  Node  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  Node  node  =  node.getNext();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.FUNCTION)  {  Node  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
94	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  Node  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  Node  node  =  node.getNext();  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.STRING)  {  Node  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	2	5	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	2	5	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
100	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
102	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
103	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	6	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
105	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
106	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	6	None	add
107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	6	4	add
108	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	6	4	add
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
110	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
111	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	3	None	add
112	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	3	None	add
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
114	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
116	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	3	5	add
117	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	3	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
119	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
123	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
124	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	add
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
126	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
127	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	25	None	add
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
129	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	25	5	add
130	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	25	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.isName());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	7	5	replace
134	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.isName());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	7	5	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getLastChild();    node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
136	[BUG]  [BUGGY]  node  =  node.getLastChild();  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
137	[BUG]  [BUGGY]  node  =  node.getLastChild();  Node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  Node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    Node  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	12	None	add
138	[BUG]  [BUGGY]  node  =  node.getLastChild();  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  Node  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    Node  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	12	None	add
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getLastChild();    node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
140	[BUG]  [BUGGY]  node  =  node.getLastChild();  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	11	5	replace
142	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	11	5	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
145	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
148	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
149	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	10	None	add
150	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	10	None	add
151	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	10	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
153	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	10	5	add
155	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	10	5	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
157	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
158	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	29	None	add
159	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	29	None	add
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
161	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	29	5	add
163	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	29	5	add
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
165	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
166	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  replacement));	      Preconditions.checkState(NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  replacement);	      Preconditions.checkState(NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(replacement));	      Preconditions.checkState(NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node));	      Preconditions.checkState(NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
170	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(node);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isGetProp(node);	  node    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
171	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node.getString());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node.getString());  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isName(node.getString());	  node    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
173	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	26	5	replace
175	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	26	5	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
178	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
180	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
182	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
184	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	13	5	replace
185	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	2	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	2	replace
188	[BUG]  [BUGGY]  Node  node  =  replacement.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  replacement.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()  ==  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()  ==  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getParent();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getParent();	  node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	15	2	replace
192	[BUG]  [BUGGY]  node  =  node.getParent();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getParent();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getParent();	  node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	15	2	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkNotNull(node);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(node);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
194	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkNotNull(node);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);	      Preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	29	5	add
196	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	29	5	add
197	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	29	None	add
198	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	27	None	add
199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
200	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
201	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	      	compilable	  [FE]  RuntimeException  	18	5	replace
202	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	      	compilable	  [FE]  RuntimeException  	18	5	replace
203	[BUG]  [BUGGY]  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  replacement  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  replacement  =  node.getFirstChild();	      	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	18	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
206	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
207	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	26	5	replace
209	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	26	5	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
213	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
215	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement);	      Preconditions.checkState(NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
217	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(replacement));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(replacement));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  new  Node(replacement));	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	22	None	replace
218	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  ref);  [CE]  cannot  find  symbol  ref  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  replacement.replaceChild(node,  ref);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  ref);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  cannot  find  symbol  ref	22	None	replace
219	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  null);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  replacement.replaceChild(node,  null);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  null);	  node    =    node.replaceChild(node,    replacement);    	non-compiled	[CE]  incompatible  types	22	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	replace
226	[BUG]  [BUGGY]  node  =  node.removeLastChild();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.removeLastChild();	  node    =    node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
227	[BUG]  [BUGGY]  node  =  node.getLastChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  Node  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	12	None	add
228	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	10	None	add
229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	10	5	add
230	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	10	5	add
231	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	10	5	add
232	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	10	5	add
233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
234	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
235	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.PROP);	  	non-compiled	[CE]  cannot  find  symbol  PROP	10	None	add
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
237	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	4	5	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	4	5	replace
240	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	8	None	add
241	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
242	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
243	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	25	5	add
245	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	25	5	add
246	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	6	None	add
247	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
252	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
253	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
255	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
256	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
258	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
259	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	add
260	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  preconditions.checkNotNull(replacement);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  preconditions.checkNotNull(replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	20	None	add
261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	20	5	add
262	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	20	5	add
263	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Node  replacement  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Node  replacement  =  node.getFirstChild();	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	add
264	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	3	5	add
265	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	3	5	add
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	3	5	add
267	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	3	5	add
268	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
270	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
272	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
273	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
274	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  ';'  expected	25	None	add
275	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	3	None	add
276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	3	5	add
277	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	3	5	add
278	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  Node  replacement  =  node.removeFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    IllegalStateException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.removeFirstChild();  Node  replacement  =  node.removeFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.removeFirstChild();    Node  replacement  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	23	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
280	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	28	1	replace
281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	28	5	replace
282	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	28	5	replace
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
284	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	8	5	add
285	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
287	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
288	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  node.removeFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
289	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  replacement.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getLastChild();    Node  n  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
291	[BUG]  [BUGGY]  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getLastChild();    Node  n  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	12	5	add
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	20	5	add
293	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	20	5	add
294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	5	add
295	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	5	add
296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	20	5	add
297	[BUG]  [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	20	5	add
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	11	5	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	11	5	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
301	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	11	1	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	5	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
307	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	      	compilable	  [FE]  RuntimeException  	18	5	replace
309	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	      	compilable	  [FE]  RuntimeException  	18	5	replace
310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
311	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
313	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	5	add
314	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	29	None	add
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	10	5	add
318	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	10	5	add
319	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	17	5	add
320	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	17	5	add
321	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  ';'  expected	27	None	add
