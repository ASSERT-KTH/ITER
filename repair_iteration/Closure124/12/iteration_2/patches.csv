bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	99	1	add
2	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	99	1	add
3	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	99	None	add
4	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	99	None	add
5	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Node  node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  ';'  expected	99	None	add
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	99	5	add
7	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	99	5	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	99	5	add
9	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	99	5	add
10	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	39	None	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  RuntimeException  	39	3	replace
12	[BUG]  [BUGGY]  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  RuntimeException  	39	3	replace
13	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	39	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	280	5	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	280	1	replace
17	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	280	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	280	1	replace
19	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	280	1	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	4	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	4	replace
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	19	2	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	19	2	replace
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	19	5	replace
32	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	19	5	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	19	2	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	19	2	replace
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	310	5	add
36	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	310	5	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	310	5	add
38	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	310	5	add
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	310	5	add
40	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	310	5	add
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	310	5	add
42	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	310	5	add
43	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	310	None	add
44	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	310	None	add
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	311	5	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	311	5	replace
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	311	5	replace
48	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	311	5	replace
49	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  ')'  expected	255	None	replace
50	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
51	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  preconditions	112	None	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	112	5	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	112	5	replace
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	112	5	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	112	5	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	265	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	265	None	replace
59	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild(),  replacement);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.removeFirstChild(),  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild(),  replacement);	  Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  ';'  expected	288	None	replace
60	[BUG]  [BUGGY]  Node  node  =  replacement.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.removeFirstChild();	  Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	288	None	replace
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
62	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
64	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	294	5	add
66	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	294	5	add
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
68	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
69	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	294	5	add
70	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	294	5	add
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	294	5	add
72	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	294	5	add
73	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
74	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
75	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	27	None	add
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
77	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
78	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
79	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  >>  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	27	None	add
80	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  >=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
81	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  >=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(replacement.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	27	5	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
83	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
84	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	118	None	add
85	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	118	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
87	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
88	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	118	5	add
89	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	118	5	add
90	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	118	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	239	1	replace
92	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	239	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	239	1	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	239	1	replace
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	239	5	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  replacement.isGetProp());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	239	5	replace
97	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	149	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	149	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
100	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
101	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	249	None	add
102	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	249	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
104	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	249	5	add
106	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	249	5	add
107	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	249	None	add
108	[BUG]  [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isName(node.getString());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isName(node.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext()  &&  NodeUtil.isName(node.getString());	  node    =    node.getNext()    &&    NodeUtil.isName(node.getString());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	171	None	replace
109	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node,  replacement.getString());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node,  replacement.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isName(node,  replacement.getString());	  node    =    node.getNext()    &&    NodeUtil.isName(node.getString());    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
110	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(replacement.getString());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(replacement.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isName(replacement.getString());	  node    =    node.getNext()    &&    NodeUtil.isName(node.getString());    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
111	[BUG]  [BUGGY]  node  =  node.getParent()  &&  NodeUtil.isName(node.getString());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent()  &&  NodeUtil.isName(node.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getParent()  &&  NodeUtil.isName(node.getString());	  node    =    node.getNext()    &&    NodeUtil.isName(node.getString());    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
112	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
113	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
114	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
115	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
116	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME);  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME);  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
117	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
119	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
120	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	300	None	add
121	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	300	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
123	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
125	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
126	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  SETPROP  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	300	None	add
127	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	124	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	124	None	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  >=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	52	5	replace
130	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	52	5	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >>  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	52	None	replace
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	114	5	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	114	5	replace
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	114	5	replace
135	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	114	5	replace
136	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	114	None	replace
137	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	185	None	replace
138	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild(),  replacement);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild(),  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild(),  replacement);	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  ';'  expected	185	None	replace
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);	  Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	185	5	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);	  Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	185	5	replace
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
142	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
144	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  node);	  	compilable	  [FE]  RuntimeException  	189	5	add
146	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  node);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  node);	  	compilable	  [FE]  RuntimeException  	189	5	add
147	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  >=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	189	None	add
148	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  selection);  [CE]  cannot  find  symbol  selection  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  selection);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  selection);	  	non-compiled	[CE]  cannot  find  symbol  selection	189	None	add
149	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	243	None	replace
150	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	243	None	replace
151	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	243	None	replace
152	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	243	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
154	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
155	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	236	None	add
156	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	236	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
158	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
160	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
162	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
164	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
166	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	1	5	add
167	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement);  Preconditions.checkNotNull(replacement);  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement);  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	1	None	add
168	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	1	None	add
169	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	1	5	add
170	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	1	5	add
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	199	5	add
172	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	199	5	add
173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	199	5	add
174	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	199	5	add
175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	199	5	add
176	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	199	5	add
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	199	5	add
178	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	199	5	add
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	199	5	add
180	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	199	5	add
181	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	199	None	add
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	93	5	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	93	5	replace
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	93	5	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	93	5	replace
186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
187	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
189	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
191	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
193	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	195	5	add
195	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	195	5	add
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
197	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
199	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
201	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
203	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
204	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	281	None	add
205	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	281	None	add
206	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  ';'  expected	281	None	add
207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
208	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
212	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
216	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  replacement.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
217	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  node,  true);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  node,  true);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  node,  true);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	32	None	replace
218	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(node,  replacement,  false);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(node,  replacement,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(node,  replacement,  false);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	32	None	replace
219	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  ref,  true);  [CE]  cannot  find  symbol  ref  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  ref,  true);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  ref,  true);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  cannot  find  symbol  ref	32	None	replace
220	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement,  true,  false);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  replacement,  true,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement,  true,  false);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	32	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
222	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	215	5	replace
224	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	215	5	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
227	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	221	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	221	None	replace
230	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
231	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
232	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
233	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
234	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
235	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
237	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
241	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	126	5	replace
242	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    node  =  node.getLastChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
243	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  =  node.getLastChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	290	None	add
244	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  node  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  node  =  node.getLastChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
245	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
246	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    node  =  node.getFirstChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
247	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	197	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	197	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	197	None	replace
250	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  null);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  null);	  node    =    replacement.replaceChild(node,    null);    	non-compiled	[CE]  incompatible  types	219	None	replace
251	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  null);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  null);	  node    =    replacement.replaceChild(node,    null);    	non-compiled	[CE]  incompatible  types	219	None	replace
252	[BUG]  [BUGGY]  node  =  null.replaceChild(node,  replacement);  [CE]  <null>  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  null.replaceChild(node,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  null.replaceChild(node,  replacement);	  node    =    replacement.replaceChild(node,    null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	219	None	replace
253	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  this);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  this);	  node    =    replacement.replaceChild(node,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	219	None	replace
254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
255	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
256	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	44	None	add
257	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	44	None	add
258	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	44	None	add
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
260	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	44	5	add
262	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	44	5	add
263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	115	5	add
264	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	115	5	add
265	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES	  	non-compiled	[CE]  ')'  expected	115	None	add
266	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL	  	non-compiled	[CE]  ')'  expected	115	None	add
267	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.E  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.E  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.E	  	non-compiled	[CE]  ')'  expected	115	None	add
268	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR	  	non-compiled	[CE]  ')'  expected	115	None	add
269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	115	5	add
270	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	115	5	add
271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
272	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
273	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	85	None	add
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
275	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
277	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
278	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	85	None	add
279	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node,  replacement);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  node,  replacement);	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.NAME);	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
282	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
283	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
284	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
287	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getLastChild()!=  node);	  Node    node    =    replacement.getLastChild();    	compilable	  [FE]  AssertionFailedError  	188	2	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getLastChild()!=  node);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getLastChild()!=  node);	  Node    node    =    replacement.getLastChild();    	compilable	  [FE]  AssertionFailedError  	188	2	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(NodeTraversal.traverse(compiler,  node,  replacement));  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeTraversal.traverse(compiler,  node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeTraversal.traverse(compiler,  node,  replacement));	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
295	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	135	5	add
296	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getLastChild();  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	135	5	add
297	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  =  node.getLastChild();  node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    Node  =  node.getLastChild();  node  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	135	None	add
298	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  node  =  node.getLastChild();  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  node  =  node.getLastChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    Node  node  =  node.getLastChild();  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	135	None	add
299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getFirstChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	135	5	add
300	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getFirstChild();  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  node  =  node.getFirstChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	135	5	add
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
302	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
304	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
305	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETUR  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETUR  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETUR	  	non-compiled	[CE]  ')'  expected	77	None	add
306	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	77	None	add
307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
308	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	78	1	replace
310	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	78	1	replace
311	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	78	None	replace
312	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	72	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	72	None	replace
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	143	1	add
315	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	143	1	add
316	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	143	None	add
317	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	143	None	add
318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	143	4	add
319	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	143	4	add
320	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	143	None	add
321	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	143	None	add
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
323	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
325	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
327	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
329	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
330	[BUG]  [BUGGY]  Node  node  =  replacement.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  replacement.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  replacement.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	1	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getLastChild()!=  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	1	replace
333	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getLastChild()  ==  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getLastChild()  ==  replacement);	  Node    node    =    node.getLastChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	116	5	replace
336	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	116	5	replace
337	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	116	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
342	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
343	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
344	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
345	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
346	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
347	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
348	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
349	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	63	None	add
350	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	187	2	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	187	2	replace
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=  node);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	187	2	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  node);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=  node);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	187	2	replace
355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()  ==  node);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	187	5	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  node);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()  ==  node);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	187	5	replace
357	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	187	5	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getLastChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	187	5	replace
359	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	235	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  SETPROP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	235	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
367	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	212	1	add
370	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	212	1	add
371	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	212	None	add
372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);	  	compilable	  [FE]  RuntimeException  	212	5	add
373	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);	  	compilable	  [FE]  RuntimeException  	212	5	add
374	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	212	None	add
375	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	212	None	add
376	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node.getType()  ==  Token.GETPROP,  replacement);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Node  node.getType()  ==  Token.GETPROP,  replacement);	  	non-compiled	[CE]  ';'  expected	212	None	add
377	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
378	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
379	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	317	5	add
380	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	317	5	add
381	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
382	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
383	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	317	None	add
384	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	317	None	add
385	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	317	None	add
386	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	175	1	replace
391	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	175	1	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	175	1	replace
393	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	175	1	replace
394	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  preconditions	76	None	replace
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	76	5	replace
396	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	76	5	replace
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	76	5	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	76	5	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
400	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
401	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	54	None	add
402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	54	5	add
403	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	54	5	add
404	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	54	None	add
405	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	54	None	add
406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);	          Preconditions.checkNotNull(replacement);    Node    node    =    replacement.getFirstChild();    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	3	5	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);	          Preconditions.checkNotNull(replacement);    Node    node    =    replacement.getFirstChild();    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	3	5	replace
408	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Node    node    =    replacement.getFirstChild();    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	3	5	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Node    node    =    replacement.getFirstChild();    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	3	5	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	21	2	replace
411	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	21	2	replace
412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
413	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
414	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetReplacement());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	237	3	replace
417	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	237	3	replace
418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	237	5	replace
419	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	237	5	replace
420	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	compilable	  [FE]  RuntimeException  	270	4	replace
422	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	compilable	  [FE]  RuntimeException  	270	4	replace
423	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
424	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	compilable	  [FE]  AssertionFailedError  	253	2	replace
426	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	compilable	  [FE]  AssertionFailedError  	253	2	replace
427	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	130	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	130	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESUL	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	111	None	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	119	5	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	119	5	replace
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
435	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
436	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
437	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
438	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
439	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
440	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	154	None	add
441	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	154	None	add
442	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
443	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
444	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	154	None	add
445	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(NodeUtil.isGetProp(node)||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)&&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)&&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)&&  NodeUtil.isGetProp(node));	  Preconditions.checkState(NodeUtil.isGetProp(node)||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkState(NodeUtil.isGetProp(node)||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(node));	  Preconditions.checkState(NodeUtil.isGetProp(node)||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
449	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
450	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
452	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
454	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
456	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
457	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	109	None	add
458	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
459	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
460	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
463	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
464	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
465	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	91	None	add
466	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
467	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
468	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
469	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
470	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
471	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
472	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	296	5	add
473	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	296	5	add
474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
475	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
477	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
478	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	296	5	add
479	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	296	5	add
480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	296	5	add
481	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	296	5	add
482	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(replacement);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isGetProp(replacement);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
483	[BUG]  [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isGetProp(node);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isGetProp(node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext()  &&  NodeUtil.isGetProp(node);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	170	None	replace
484	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(node,  replacement);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isGetProp(node,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isGetProp(node,  replacement);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
485	[BUG]  [BUGGY]  node  =  node.getNext()  ||  NodeUtil.isGetProp(node);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  ||  NodeUtil.isGetProp(node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  ||  NodeUtil.isGetProp(node);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	144	5	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	144	5	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
492	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
494	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
496	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  node  =  node.getNext();  }	  node    =    node.getNext();    node    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	88	2	replace
497	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getLastChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getLastChild()  ==  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getLastChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getLastChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	262	5	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	262	5	replace
501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	262	5	replace
502	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	262	5	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	262	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement,  node));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(replacement,  node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(replacement,  node));	  Preconditions.checkState(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	220	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	220	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	220	None	replace
509	[BUG]  [BUGGY]  Node  node  =  node.removeLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.removeLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeLastChild();	  node    =    node.removeLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	226	None	replace
510	[BUG]  [BUGGY]  node  =  node.replaceFirst(node,  replacement);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceFirst(node,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceFirst(node,  replacement);	  node    =    node.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(node));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(node));	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(replacement)||  NodeUtil.isGetProp(replacement));	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement,  node));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement,  node));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(replacement,  node));	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(node,  replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(node,  replacement));	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
516	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
518	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	5	add
519	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	20	None	add
520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	20	5	add
521	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	20	5	add
522	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	20	None	add
523	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	20	None	add
524	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Node    node    =    node.getFirstChild();    Preconditions.checkNotNull(replacement);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	4	None	replace
525	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	8	5	replace
526	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	8	5	replace
527	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	8	5	replace
528	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	8	5	replace
529	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
530	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
531	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
532	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
534	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
535	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	5	add
536	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	5	add
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
538	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
539	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	7	5	add
540	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	7	5	add
541	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
542	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
544	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
546	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
547	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	49	None	add
548	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
549	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	49	5	add
550	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SYNTHETIC);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	49	None	add
551	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	211	5	replace
552	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	211	5	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	211	1	replace
554	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	211	1	replace
555	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetReplacement());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
556	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	211	5	replace
557	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	211	5	replace
558	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	206	5	replace
559	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	206	5	replace
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	206	1	replace
561	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	206	1	replace
562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	206	5	replace
563	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	206	5	replace
564	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
565	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	86	1	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	86	1	replace
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	86	1	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	86	1	replace
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.VAR);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.VAR);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	287	5	replace
574	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	287	5	replace
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
576	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
577	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	287	5	replace
578	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	287	5	replace
579	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
580	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	225	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP,  node.getString());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP,  node.getString());  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP,  node.getString());  Node  node  =  node.getFirstChild();	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	225	None	replace
583	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.GETPROP);  Node  node  =  node.getFirstChild();	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	225	None	replace
584	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  node);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  node);	  node    =    replacement.replaceChild(node,    ref);    	non-compiled	[CE]  incompatible  types	218	None	replace
585	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  replacement);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  replacement);	  node    =    replacement.replaceChild(node,    ref);    	non-compiled	[CE]  incompatible  types	218	None	replace
586	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement);	  node    =    replacement.replaceChild(node,    ref);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	218	None	replace
587	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  ref);  [CE]  cannot  find  symbol  ref  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  ref);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  ref);	  node    =    replacement.replaceChild(node,    ref);    	non-compiled	[CE]  cannot  find  symbol  ref	218	None	replace
588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	200	5	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	200	5	replace
590	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	200	5	replace
591	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	200	5	replace
592	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
593	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
594	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
595	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
596	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  expression	183	None	add
597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
598	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
600	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
601	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
602	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  return  false;  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
603	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	244	5	add
604	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	244	5	add
605	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
606	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
607	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	244	None	add
608	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
609	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	244	5	add
611	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	244	5	add
612	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
613	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
614	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getLastChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getLastChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getLastChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement.getFirstChild()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
618	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	non-compiled	[CE]  cannot  find  symbol  RESTURN	198	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	non-compiled	[CE]  cannot  find  symbol  RESTURN	198	None	replace
620	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	198	5	replace
621	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	198	5	replace
622	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  node,  false);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  node,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  node,  false);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
623	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement,  false,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  replacement,  false,  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement,  false,  null);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
624	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(node,  replacement,  true);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(node,  replacement,  true);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(node,  replacement,  true);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	31	None	replace
625	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacement,  false,  true);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  replacement,  false,  true);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacement,  false,  true);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
626	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
627	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
628	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
629	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	271	None	add
630	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
631	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	271	None	add
632	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
633	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
634	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
635	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
636	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
637	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
638	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
639	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
640	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
641	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	104	1	add
643	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	104	1	add
644	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	104	None	add
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	104	1	add
646	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	104	1	add
647	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetPro	  	non-compiled	[CE]  ')'  expected	104	None	add
648	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isName());	  Preconditions.checkArgument(node.isName());    	compilable	  [FE]  RuntimeException  	134	5	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(node.isName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isName());	  Preconditions.checkArgument(node.isName());    	compilable	  [FE]  RuntimeException  	134	5	replace
650	[BUG]  [BUGGY]  node  =  node.getString();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getString();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getString();	  node    =    node.getParent();    	non-compiled	[CE]  incompatible  types	192	None	replace
651	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
652	[BUG]  [BUGGY]  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
653	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
654	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
655	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
657	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
658	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
659	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
660	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	297	5	replace
661	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
663	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	97	5	replace
664	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	97	5	replace
665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
666	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
667	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	301	5	replace
668	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	301	5	replace
669	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
670	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	301	1	replace
673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
674	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
675	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	174	None	add
676	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	174	None	add
677	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
678	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
679	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	174	None	add
680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
681	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
682	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
683	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
684	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
685	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
686	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
688	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	177	5	add
689	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	177	None	add
690	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
691	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
692	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	279	1	add
693	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	279	1	add
694	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	279	None	add
695	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	279	None	add
696	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	279	1	add
697	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	279	1	add
698	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
699	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	279	5	add
700	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	279	None	add
701	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
702	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
703	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
704	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
705	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
706	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
708	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
709	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
710	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CALL);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
711	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
712	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
713	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
715	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
716	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
717	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
718	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	15	5	replace
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	15	1	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	15	1	replace
721	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
722	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
723	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
724	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
725	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.	  	non-compiled	[CE]  ')'  expected	51	None	add
726	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	51	5	add
727	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	51	5	add
728	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	51	None	add
729	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	94	5	replace
730	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	94	5	replace
731	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.STRING);	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	94	5	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.STRING);	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  RuntimeException  	94	5	replace
733	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
734	[BUG]  [BUGGY]  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
735	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(replacement.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(replacement.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.getNext();  if(isNameAssignedTo(replacement.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
736	[BUG]  [BUGGY]  Node  replacement  =  node.getLastChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  replacement  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  replacement  =  node.getLastChild();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	203	None	replace
737	[BUG]  [BUGGY]  Node  replacement  =  node.getNext();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  replacement  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  replacement  =  node.getNext();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	203	None	replace
738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getFirstChild()!=  null);	  Node    replacement    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getFirstChild()!=  null);	  Node    replacement    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
740	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
741	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
743	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
744	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  >>  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	160	None	add
745	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
746	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
747	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
748	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
749	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
750	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
752	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
754	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
756	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
758	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
760	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
761	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	122	None	add
762	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
764	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	204	5	replace
765	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	204	5	replace
766	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
768	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  new  Node(replacement));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  new  Node(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  new  Node(replacement));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	217	None	replace
769	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  new  Node(replacement));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  new  Node(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  new  Node(replacement));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	217	None	replace
770	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(replacement,  new  Node(replacement));  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(replacement,  new  Node(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(replacement,  new  Node(replacement));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	217	None	replace
771	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Node.newString(Token.NAME)));  [CE]  no  suitable  method  found  for  newString(int)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Node.newString(Token.NAME)));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  new  Node(Node.newString(Token.NAME)));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	217	None	replace
772	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Node.newString( "SafeReplacement ")));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Node.newString( "SafeReplacement ")));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  new  Node(Node.newString( "SafeReplacement ")));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	217	None	replace
773	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
774	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
775	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  isSafeReplacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	248	None	replace
776	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
777	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getFirstChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
778	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.VAR,  node);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.VAR,  node);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
780	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
781	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  0);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
782	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
783	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
784	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	234	5	replace
785	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	234	5	replace
786	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	234	None	replace
787	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	234	5	replace
788	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	234	5	replace
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	234	1	replace
790	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	234	1	replace
791	[BUG]  [BUGGY]  Presconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Presconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Presconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Presconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Presconditions	105	None	replace
792	[BUG]  [BUGGY]  Conditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Conditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Conditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Conditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Conditions	105	None	replace
793	[BUG]  [BUGGY]  Condition.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Condition  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Condition.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Condition.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Condition	105	None	replace
794	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
795	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
796	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
797	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
798	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	264	5	add
799	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	264	5	add
800	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	264	None	add
801	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
802	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
803	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement)  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement)  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement)	  	non-compiled	[CE]  ')'  expected	264	None	add
804	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	103	None	replace
805	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	267	None	replace
806	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
807	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
808	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
809	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
810	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
811	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();	  node    =    node.getLastChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	227	None	replace
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()!=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()!=  Token.NAME);	  Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
815	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
816	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
817	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
818	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
819	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
820	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	172	1	add
822	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	172	1	add
823	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	172	None	add
824	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	172	5	add
825	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	172	5	add
826	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	172	None	add
827	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	127	None	replace
828	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	127	5	replace
829	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	127	5	replace
830	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	127	None	replace
831	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	53	None	replace
832	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	53	5	replace
833	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	53	5	replace
834	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
835	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
836	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
837	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
838	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
839	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
840	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	4	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	4	replace
842	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	5	replace
843	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	5	replace
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	4	replace
845	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	4	replace
846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	5	replace
847	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	108	5	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	117	None	replace
849	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	117	None	replace
850	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	117	None	replace
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	302	1	add
852	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	302	1	add
853	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	302	None	add
854	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	302	None	add
855	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	302	1	add
856	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	302	1	add
857	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	302	None	add
858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	302	5	add
859	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	302	5	add
860	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	246	None	replace
861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isGetProp(),  node.getString());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  RuntimeException  	246	5	replace
862	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getString());  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getString());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  RuntimeException  	246	5	replace
863	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  RuntimeException  	246	5	replace
864	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  RuntimeException  	246	5	replace
865	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
866	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
867	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	210	None	add
868	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Node  node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	210	None	add
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
870	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
871	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());  [CE]  cannot  find  symbol  RESTURN  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	210	None	add
872	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	210	None	add
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	102	1	replace
874	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	102	1	replace
875	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	258	1	replace
876	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	258	1	replace
877	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	258	5	replace
878	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isName());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	258	5	replace
879	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
880	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	101	1	add
881	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	101	1	add
882	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	101	None	add
883	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	101	None	add
884	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	141	5	add
885	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	141	5	add
886	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	141	None	add
887	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	141	None	add
888	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	141	5	add
889	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	141	5	add
890	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	141	None	add
891	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
895	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
896	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	306	None	add
897	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	306	None	add
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
899	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
900	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	306	None	add
901	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	306	5	add
902	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	306	5	add
903	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isSafeReplacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	12	None	replace
904	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
905	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
907	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
909	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
911	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  true);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  true);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	152	1	add
913	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	152	1	add
914	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	152	1	add
915	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	152	1	add
916	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPRO  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPRO  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPRO	  	non-compiled	[CE]  ')'  expected	152	None	add
917	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	152	5	add
918	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	152	5	add
919	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	152	5	add
920	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	152	5	add
921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
922	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
923	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
924	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=  null);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
926	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
927	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	33	5	add
928	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	33	5	add
929	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	33	None	add
930	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeLastChild();  node  =  node.removeLastChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.removeLastChild();  node  =  node.removeLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    node  =  node.removeLastChild();  node  =  node.removeLastChild();	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
931	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [CE]  cannot  find  symbol  Node  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    Node  =  node.removeFirstChild();  node  =  node.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	33	None	add
932	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	75	5	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	75	5	replace
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	75	1	replace
935	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	75	1	replace
936	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	224	None	replace
937	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	224	None	replace
938	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
939	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
940	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
941	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
942	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	84	5	replace
944	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
947	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
948	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	83	None	add
949	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	83	None	add
950	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	83	5	add
951	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	83	5	add
952	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
953	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
954	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	83	5	add
955	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	83	5	add
956	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
957	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
958	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	81	None	add
959	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	81	None	add
960	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
961	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
962	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	81	5	add
963	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	81	5	add
964	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
965	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
966	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
967	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
968	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	11	None	add
969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
970	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
971	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	11	None	add
972	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	11	None	add
973	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  node);	  	compilable	  [FE]  RuntimeException  	11	5	add
974	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  node);	  	compilable	  [FE]  RuntimeException  	11	5	add
975	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
976	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
977	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()!=  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()!=  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()!=  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
978	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
979	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	47	None	replace
980	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	285	5	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	285	5	replace
984	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(replacement.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(replacement.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	55	1	replace
986	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	55	1	replace
987	[BUG]  [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  ';'  expected	272	None	replace
988	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Node  node  =  node.getFirstChild();	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	263	None	replace
989	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Node  replacement  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=  null);  Node  replacement  =  node.getFirstChild();	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	263	None	replace
990	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	263	None	replace
991	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Node  replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Node  replacement  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node));  Node  replacement  =  node.getFirstChild();	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
992	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
993	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
994	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
995	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
996	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.	  	non-compiled	[CE]  ')'  expected	66	None	add
997	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
998	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
999	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
1000	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
1001	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1002	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1003	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	186	5	add
1004	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	186	5	add
1005	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  >=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	186	None	add
1006	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()!=  node);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1007	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  node);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()!=  node);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1008	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  >>  replacement);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()  >>  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()  >>  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	186	None	add
1009	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Node  n  =  node.getLastChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	2	replace
1010	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  n  =  node.getLastChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	2	replace
1011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.getFirstChild();  Node  n  =  node.getLastChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	1	replace
1012	[BUG]  [BUGGY]  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  Node  n  =  node.getLastChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	1	replace
1013	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Node  n  =  node.getFirstChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	2	replace
1014	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  n  =  node.getFirstChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	291	2	replace
1015	[BUG]  [BUGGY]  node  =  node.getFirstChild();  n  =  node.getLastChild();  [CE]  cannot  find  symbol  n  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  n  =  node.getLastChild();	  node    =    node.getLastChild();    Node    n    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  n	291	None	replace
1016	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  node  =  node.getNext();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        node    =    node.getNext();    node  =  node.getNext();  node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	87	5	add
1017	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  node  =  node.getNext();  node  =  node.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  node  =  node.getNext();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    node  =  node.getNext();  node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	87	5	add
1018	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  Node  node  =  node.getNext();  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  Node  node  =  node.getNext();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    Node  node  =  node.getNext();  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	87	None	add
1019	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  Node  =  node.getNext();  node  =  node.getNext();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  Node  =  node.getNext();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    Node  =  node.getNext();  node  =  node.getNext();	  	non-compiled	[CE]  cannot  find  symbol  Node	87	None	add
1020	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	87	5	add
1021	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	87	5	add
1022	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  preconditions	106	None	replace
1023	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
1024	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
1025	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  Node.newNumber(0));  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  Node.newNumber(0));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  Node.newNumber(0));	  node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  incompatible  types	29	None	replace
1026	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(node,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(node,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(node,  replacement);	  node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	29	None	replace
1027	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1028	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1029	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	131	None	add
1030	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	131	None	add
1031	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1032	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());Preconditions.checkState(node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());Preconditions.checkState(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1033	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	131	4	add
1034	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	131	4	add
1035	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    Preconditions.checkState(node.isGetProp());  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	131	None	add
1036	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1038	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1039	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
1040	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  >=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	129	5	replace
1041	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >=  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	129	5	replace
1042	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >>  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	129	None	replace
1043	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(node);    Preconditions.checkNotNull(node);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
1044	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Preconditions.checkNotNull(node);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
1045	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(node);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(node);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	193	None	add
1046	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	193	None	add
1047	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	193	None	add
1048	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(node);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  Preconditions.checkNotNull(node);	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	193	None	add
1049	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  replacement);  Preconditions.checkNotNull(replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    NodeTraversal.traverse(compiler,  node,  replacement);  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	193	None	add
1050	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1051	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1052	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1053	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1054	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Node  node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Node  node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	238	None	add
1055	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1056	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1057	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1058	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  node.isGetProp());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	238	5	add
1059	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1060	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1061	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1062	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1063	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1064	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1065	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	74	None	add
1066	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	74	None	add
1067	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1068	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1069	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	65	None	replace
1070	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(replacement.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(replacement.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	65	None	replace
1071	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	65	None	replace
1072	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1073	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1074	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	233	None	add
1075	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1076	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1077	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1078	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
1079	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	233	5	add
1080	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	233	5	add
1081	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
1082	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
1083	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
1084	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
1085	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
1086	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	277	None	replace
1087	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	277	None	replace
1088	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1089	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	71	5	replace
1090	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	318	5	replace
1091	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	318	5	replace
1092	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	318	None	replace
1093	[BUG]  [BUGGY]  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	256	None	replace
1094	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1095	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1096	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	79	None	add
1097	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  >>  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	79	None	add
1098	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkState(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	79	None	add
1099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	5	add
1100	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	79	5	add
1101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1102	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1104	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1106	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	292	5	add
1108	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	292	5	add
1109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1110	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
1111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	292	5	add
1112	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	292	5	add
1113	[BUG]  [BUGGY]  Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  replacement  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    Preconditions.checkNotNull(replacement);    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	259	None	replace
1114	[BUG]  [BUGGY]  Node  replacement  =  node.removeFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  replacement  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  replacement  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
1115	[BUG]  [BUGGY]  node  =  node.getFirstChild();  Node  replacement  =  node.removeFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  Node  replacement  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  Node  replacement  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
1118	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1119	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1120	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1121	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	254	None	add
1122	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	254	None	add
1123	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1124	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	207	5	replace
1127	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	207	5	replace
1128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	213	5	replace
1129	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	213	5	replace
1130	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	213	None	replace
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1132	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	213	5	replace
1134	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  RuntimeException  	213	5	replace
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1136	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1137	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	299	5	replace
1138	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	299	5	replace
1139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	299	1	replace
1140	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  replacement.getString().equals( "prototype   "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  AssertionFailedError  	299	1	replace
1141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	299	5	replace
1142	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    	compilable	  [FE]  RuntimeException  	299	5	replace
1143	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  ';'  expected	150	None	replace
1144	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  ';'  expected	150	None	replace
1145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	50	5	replace
1146	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	50	5	replace
1147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1148	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1149	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	95	None	add
1150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1151	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	95	5	add
1153	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME,  parent);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME,  parent);	  	compilable	  [FE]  RuntimeException  	95	5	add
1154	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	95	None	add
1155	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Node  node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  ';'  expected	95	None	add
1156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1157	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1158	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	209	None	replace
1159	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	209	None	replace
1160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1161	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1163	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
1164	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	222	None	replace
1165	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	222	None	replace
1166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
1167	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
1168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	1	replace
1169	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	1	replace
1170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
1171	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isName());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isName());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  RuntimeException  	250	5	replace
1172	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1173	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(replacement,  node);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(replacement,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(replacement,  node);	  Node    node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	30	None	replace
1174	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(replacement);	  Node    node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	30	None	replace
1175	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(replacement,  null);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(replacement,  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(replacement,  null);	  Node    node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	30	None	replace
1176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1177	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1178	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	147	None	add
1179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1180	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1182	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1183	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	147	None	add
1184	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	147	None	add
1185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	64	5	replace
1186	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	64	5	replace
1187	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	64	None	replace
1188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1189	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1191	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1192	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	18	None	add
1193	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	18	None	add
1194	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	18	None	add
1195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1196	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	18	5	add
1197	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
1198	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
1199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
1200	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
1201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	257	1	add
1202	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	257	1	add
1203	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	257	None	add
1204	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Node  node.getType()  ==  Token.NAME  ||  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Node  node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Node  node.getType()  ==  Token.NAME  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	257	None	add
1205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	257	1	add
1206	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	257	1	add
1207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	257	5	add
1208	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	257	5	add
1209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1210	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1211	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	231	None	add
1212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1213	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1215	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
1216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	231	5	add
1217	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	231	5	add
1218	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1219	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1220	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	230	None	replace
1221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1222	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1224	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1225	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1227	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1228	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	179	None	add
1229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1230	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
1231	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	179	None	add
1232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1233	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1235	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1236	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	113	None	add
1237	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	113	None	add
1238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1239	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1240	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	113	None	add
1241	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1242	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1244	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1246	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1247	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	283	5	add
1248	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	283	5	add
1249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	283	5	add
1250	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	283	5	add
1251	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkNotNull(replacement);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
1252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
1253	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
1254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
1255	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
1256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  }	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	240	1	replace
1257	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  }  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  }	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	240	1	replace
1258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	123	5	replace
1259	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	123	5	replace
1260	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	123	5	replace
1261	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	123	5	replace
1262	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1263	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1264	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1265	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1267	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(node);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	260	1	replace
1269	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    preconditions.checkNotNull(replacement);    	compilable	  [FE]  AssertionFailedError  	260	1	replace
1270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	260	5	replace
1271	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	260	5	replace
1272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1273	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getString());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1274	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);  [CE]  cannot  find  symbol  isSafeReplacement  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isSafeReplacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  isSafeReplacement	96	None	replace
1275	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1276	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getFirstChild());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1277	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  name);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
1278	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1279	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
1280	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.RETURN);  Node  node.getType()  ==  Token.RETURN;  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node.getType()    ==    Token.RETURN;    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  ';'  expected	321	None	replace
1281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1282	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1284	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1285	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node));  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	295	None	replace
1286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1287	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	295	5	replace
1288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
1289	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
1290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
1291	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
1292	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	319	None	add
1293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	319	5	add
1294	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	319	5	add
1295	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	319	None	add
1296	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	73	None	replace
1297	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1298	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1300	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1301	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	232	None	replace
1302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1303	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  AssertionFailedError  	232	1	replace
1305	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  AssertionFailedError  	232	1	replace
1306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1307	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1309	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1311	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1313	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1314	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1315	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1317	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1319	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1321	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1323	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FOR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FOR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1325	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FOR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FOR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FOR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  RuntimeException  	181	5	add
1326	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  preconditions.checkArgument(node.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	181	None	add
1327	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	316	5	replace
1329	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	316	5	replace
1330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	316	5	replace
1331	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	316	5	replace
1332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1333	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1335	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1336	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1337	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1339	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ".prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1340	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	298	None	add
1341	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Node  node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [CE]  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Node  node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Node  node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	non-compiled	[CE]  	298	None	add
1342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1343	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
1344	[BUG]  [BUGGY]  Node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  =  node.getLastChild();	  node    =    node.getLastChild();    Node    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Node	137	None	replace
1345	[BUG]  [BUGGY]  node  =  node.getFirstChild();  Node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getFirstChild();  Node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getFirstChild();  Node  =  node.getLastChild();	  node    =    node.getLastChild();    Node    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Node	137	None	replace
1346	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	36	None	replace
1347	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	36	None	replace
1348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1349	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1351	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1352	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	201	None	add
1353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1354	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	201	5	add
1355	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	201	None	add
1356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	201	5	add
1357	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	201	5	add
1358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	309	5	replace
1359	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	309	5	replace
1360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	309	2	replace
1361	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	309	2	replace
1362	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
1363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  replacement.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	309	5	replace
1364	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  replacement.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	309	5	replace
1365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1366	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1367	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1368	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1369	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	128	None	add
1370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1371	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1372	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	128	None	add
1373	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1374	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1375	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1376	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1377	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1378	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
1380	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
1381	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1382	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.NAME);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1384	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  ||  replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
1385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  >=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	67	5	replace
1386	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  >=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	67	5	replace
1387	[BUG]  [BUGGY]  Conditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Conditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Conditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Conditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Conditions	67	None	replace
1388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	303	5	replace
1389	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	303	5	replace
1390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
1391	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
1392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
1393	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
1394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
1395	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
1396	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	add
1397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
1398	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
1399	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	315	None	add
1400	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	315	None	add
1401	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	315	None	add
1402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1403	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1405	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1406	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	261	None	add
1407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1408	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1410	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
1411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	261	5	add
1412	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	261	5	add
1413	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isName());	  	compilable	  [FE]  RuntimeException  	133	5	add
1414	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isName());	  	compilable	  [FE]  RuntimeException  	133	5	add
1415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	133	5	add
1416	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	133	5	add
1417	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isName());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	133	None	add
1418	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	133	None	add
1419	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isType());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isType());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isType());	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
1420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	133	5	add
1421	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	133	5	add
1422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1423	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1424	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	82	5	replace
1426	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	82	5	replace
1427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1428	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1429	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	307	5	replace
1430	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	307	5	replace
1431	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	307	5	replace
1432	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	307	5	replace
1433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
1434	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
1435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
1436	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getLastChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
1437	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	158	None	replace
1438	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	158	None	replace
1439	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	158	None	replace
1440	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	153	None	replace
1441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1442	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1443	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  SETPROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	229	None	add
1444	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	229	5	add
1445	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	229	5	add
1446	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1447	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1448	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1449	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
1450	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RESULT);  [CE]  cannot  find  symbol  RESULT  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RESULT);	  	non-compiled	[CE]  cannot  find  symbol  RESULT	229	None	add
1451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	293	5	replace
1452	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	293	5	replace
1453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1454	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1455	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
1456	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
1457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	14	5	add
1458	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	14	5	add
1459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1460	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1461	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
1462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1463	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1464	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1465	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1466	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1467	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
1468	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  RESTURN  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	70	None	add
1469	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement,  replacement);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  isSafeReplacement,  replacement);	  Preconditions.checkState(NodeUtil.isGetProp(node),    isSafeReplacement);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
1470	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.isGetProp());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  node.isGetProp());	  Preconditions.checkState(NodeUtil.isGetProp(node),    isSafeReplacement);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
1471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
1472	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
1473	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	247	None	add
1474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
1475	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
1476	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	247	None	add
1477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	247	5	add
1478	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	247	5	add
1479	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.VAR,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	247	None	add
1480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
1482	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
1483	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
1484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1485	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1486	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	205	None	add
1487	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Node  node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	205	None	add
1488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1489	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	205	5	add
1491	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	205	5	add
1492	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1493	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1494	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1495	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1496	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1497	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1498	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1499	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1500	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	22	None	add
1501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1502	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	5	add
1503	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	22	None	add
1504	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
1505	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
1506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
1507	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
1508	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
1509	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
1510	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
1511	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
1512	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	162	None	add
1513	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	162	None	add
1514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1515	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1516	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1517	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1518	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1519	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1521	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
1523	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
1524	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	9	None	add
1525	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	9	None	add
1526	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	5	add
1527	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	9	5	add
1528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
1529	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
1530	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1531	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1532	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement  ==  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  RuntimeException  	43	5	replace
1534	[BUG]  [BUGGY]  Preconditions.checkState(replacement  ==  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement  ==  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  RuntimeException  	43	5	replace
1535	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1536	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1537	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1538	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.FUNCTION)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1539	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1540	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
1541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  node  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    node  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1542	[BUG]  [BUGGY]  node  =  node.getParent();  node  =  node.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  node  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    node  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1543	[BUG]  [BUGGY]  node  =  node.getParent();  Node  node  =  node.getParent();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  Node  node  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    Node  node  =  node.getParent();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	191	None	add
1544	[BUG]  [BUGGY]  node  =  node.getParent();  Node  =  node.getParent();  [CE]  cannot  find  symbol  Node  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  Node  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    Node  =  node.getParent();	  	non-compiled	[CE]  cannot  find  symbol  Node	191	None	add
1545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  Node  parent  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    Node  parent  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	191	1	add
1546	[BUG]  [BUGGY]  node  =  node.getParent();  Node  parent  =  node.getParent();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  Node  parent  =  node.getParent();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    Node  parent  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	191	1	add
1547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	191	5	add
1548	[BUG]  [BUGGY]  node  =  node.getParent();  node  =  node.getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    node  =  node.getNext();	  	compilable	  [FE]  RuntimeException  	191	5	add
1549	[BUG]  [BUGGY]  node  =  node.getParent();  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	191	None	add
1550	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Node  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	223	None	replace
1551	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	223	None	replace
1552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
1553	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
1554	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1555	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1556	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1557	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1558	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	308	None	add
1559	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	308	None	add
1560	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  >>  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	308	None	add
1561	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  >=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1562	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  >=  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	308	5	add
1563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	214	1	add
1564	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	214	1	add
1565	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	214	5	add
1566	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	214	5	add
1567	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Node  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Node  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Node  node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  	non-compiled	[CE]  ';'  expected	214	None	add
1568	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());  [CE]  cannot  find  symbol  SETPROP  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	214	None	add
1569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	214	1	add
1570	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP  &&  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	214	1	add
1571	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP  &&  node.isGetProp());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	214	None	add
1572	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();	  node    =    node.getNext();    Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	89	None	replace
1573	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getNext();	  node    =    node.getNext();    Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	89	None	replace
1574	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getNext();	  node    =    node.getNext();    Node    node    =    node.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	89	None	replace
1575	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1576	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1577	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1578	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1579	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	125	None	add
1580	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1581	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1582	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	125	None	add
1583	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1584	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
1585	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1586	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1587	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	208	None	add
1588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1589	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1590	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.VAR,  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	208	None	add
1591	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1592	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >=  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	208	5	add
1593	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);  [CE]  no  suitable  method  found  for  checkArgument(int,Node)  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  >>  Token.VAR,  replacement);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int,Node)	208	None	add
1594	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	23	5	replace
1595	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	23	5	replace
1596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
1597	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
1598	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
1599	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
1600	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
1601	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
1602	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
1603	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
1604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	286	1	add
1605	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	286	1	add
1606	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	286	None	add
1607	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	286	None	add
1608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	286	1	add
1609	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	286	1	add
1610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	286	5	add
1611	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	286	5	add
1612	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  >=  replacement);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	286	None	add
1613	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	24	5	add
1614	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	24	5	add
1615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	24	5	add
1616	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	24	5	add
1617	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Node  replacement  =  node.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	24	None	add
1618	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	24	5	add
1619	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	24	5	add
1620	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	24	None	add
1621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1622	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1624	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1625	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1626	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1628	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
1629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	60	5	add
1630	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	60	5	add
1631	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1632	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isSafeReplacement);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isSafeReplacement);	  Preconditions.checkState(NodeUtil.isGetProp(node,    replacement));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1633	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString(),  replacement));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkState(NodeUtil.isGetProp(node,    replacement));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1634	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  node));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  node));	  Preconditions.checkState(NodeUtil.isGetProp(node,    replacement));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1636	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1637	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1638	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1640	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	282	5	replace
1641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
1642	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
1643	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
1644	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
1645	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1646	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1647	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1648	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1650	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
1651	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1652	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1653	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1654	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1655	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	276	None	add
1656	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	276	5	add
1657	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	276	5	add
1658	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1659	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
1660	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement)  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement)  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement)	  	non-compiled	[CE]  ')'  expected	276	None	add
1661	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1662	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1663	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1664	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
1665	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
1666	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	284	None	replace
1667	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
1668	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
1669	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	151	None	replace
1670	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	151	5	replace
1671	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	151	5	replace
1672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1673	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1674	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	28	5	replace
1675	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  replacement.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	28	5	replace
1676	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	28	5	replace
1677	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(replacement));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	28	5	replace
1678	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	35	None	replace
1679	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	35	None	replace
1680	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	35	None	replace
1681	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
1682	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
1683	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	107	4	add
1684	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	107	4	add
1685	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	107	None	add
1686	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	107	None	add
1687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
1688	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getLastChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
1689	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1690	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1691	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1692	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1693	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	46	None	add
1694	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1695	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	46	5	add
1696	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	46	5	add
1697	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	46	5	add
1698	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	46	None	add
1699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1700	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1701	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1702	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1703	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	304	None	add
1704	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	304	None	add
1705	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1706	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
1707	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Node  node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  ';'  expected	304	None	add
1708	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	159	None	replace
1709	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(replacement.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(replacement.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	159	None	replace
1710	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    preconditions.checkState(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	159	None	replace
1711	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	314	None	replace
1712	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	314	None	replace
1713	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	110	5	replace
1714	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	110	5	replace
1715	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement.getType()!=  Token.VAR);	  Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	80	1	replace
1716	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement.getType()!=  Token.VAR);	  Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	80	1	replace
1717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1718	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1719	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  ==  null);	  	compilable	  [FE]  RuntimeException  	42	5	add
1720	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  ==  null);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  ==  null);	  	compilable	  [FE]  RuntimeException  	42	5	add
1721	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  >=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	42	None	add
1722	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  >>  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  >>  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	42	None	add
1723	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  [BUGGY]  null);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  [BUGGY]  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  [BUGGY]  null);	  	non-compiled	[CE]  ')'  expected	42	None	add
1724	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  [Delete]  null);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement  [Delete]  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement  [Delete]  null);	  	non-compiled	[CE]  ')'  expected	42	None	add
1725	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1726	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1727	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	58	None	add
1728	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1729	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1731	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
1732	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	58	None	add
1733	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getFirstChild();    node  =  node.getLastChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
1734	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getLastChild();  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    node  =  node.getLastChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
1735	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  =  node.getLastChild();  node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    Node  =  node.getLastChild();  node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	139	None	add
1736	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getFirstChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getFirstChild();    node  =  node.getFirstChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
1737	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getFirstChild();  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  node  =  node.getFirstChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    node  =  node.getFirstChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
1738	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  node  =  node.getLastChild();  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  node  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    Node  node  =  node.getLastChild();  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	139	None	add
1739	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	274	None	replace
1740	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR;  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	274	None	replace
1741	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	74	None	add
1742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1743	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	74	5	add
1744	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
1745	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
1746	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
1747	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR,  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	320	5	replace
1748	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  preconditions.checkArgument(node.getType()!=  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	118	None	add
1749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1750	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	61	5	replace
1752	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	61	5	replace
1753	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeLastChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	241	None	replace
1754	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	241	None	replace
1755	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(replacement.getString()  [CE]  ')'  expected  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(replacement.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  replacement  =  node.removeFirstChild();  if(isNameAssignedTo(replacement.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
1756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
1757	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
1758	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
1760	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
1761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	210	5	add
1762	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	  	compilable	  [FE]  RuntimeException  	210	5	add
1763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1764	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1765	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	277	None	replace
1766	[BUG]  [BUGGY]  Node  node  =  replacement.replaceChild(node,  node,  false);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.replaceChild(node,  node,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.replaceChild(node,  node,  false);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	31	None	replace
1767	[BUG]  [BUGGY]  node  =  replaceChild(node,  replacement,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replaceChild(node,  replacement,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replaceChild(node,  replacement,  false);	  node    =    node.replaceChild(node,    replacement,    false);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1768	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1769	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	79	4	add
1770	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	79	4	add
1771	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	79	None	add
1772	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_TYPE));  [CE]  cannot  find  symbol  REGEXP_TYPE  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_TYPE));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_TYPE));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  cannot  find  symbol  REGEXP_TYPE	217	None	replace
1773	[BUG]  [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_RESULT));  [CE]  cannot  find  symbol  REGEXP_RESULT  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_RESULT));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  replacement.replaceChild(node,  new  Node(Token.REGEXP_RESULT));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  cannot  find  symbol  REGEXP_RESULT	217	None	replace
1774	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1775	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	113	5	add
1776	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
1777	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
1778	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
1779	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	300	1	add
1780	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
1781	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	164	5	add
1782	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	164	5	add
1783	[BUG]  [BUGGY]  node  =  node.replaceChild(replacement,  Node.newString(Token.NAME));  [CE]  no  suitable  method  found  for  newString(int)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(replacement,  Node.newString(Token.NAME));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(replacement,  Node.newString(Token.NAME));	  node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	29	None	replace
1784	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	294	5	add
1785	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	294	5	add
1786	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
1787	[BUG]  [BUGGY]  Préconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  Pr  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Préconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Préconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  Pr	105	None	replace
1788	[BUG]  [BUGGY]  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  preconditions	105	None	replace
1789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
1790	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
1791	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgu  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgu  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgu	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
1792	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [CE]  cannot  find  symbol  preconditions  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  cannot  find  symbol  preconditions	36	None	replace
1793	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1794	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
1795	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  0);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  0);	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	12	5	replace
1796	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	199	None	add
1797	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	199	None	add
1798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	237	1	replace
1799	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	237	1	replace
1800	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1801	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	compilable	  [FE]  RuntimeException  	272	5	replace
1802	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	compilable	  [FE]  RuntimeException  	272	5	replace
1803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1804	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	316	1	replace
1805	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	318	None	replace
1806	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	318	None	replace
1807	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	143	None	add
1808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	143	1	add
1809	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	143	1	add
1810	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	143	None	add
1811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node!=  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
1812	[BUG]  [BUGGY]  Preconditions.checkState(node!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node!=  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
1813	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node  ==  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  RuntimeException  	43	5	replace
1814	[BUG]  [BUGGY]  Preconditions.checkState(node  ==  null);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node  ==  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node  ==  null);	  Preconditions.checkState(replacement!=    null);    	compilable	  [FE]  RuntimeException  	43	5	replace
1815	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetChild());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetChild());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
1816	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.VAR;	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	274	None	replace
1817	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	274	5	replace
1818	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	274	5	replace
1819	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	274	5	replace
1820	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node    node.getType()    ==    Token.VAR;    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	274	5	replace
1821	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	18	5	add
1822	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	18	5	add
1823	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	18	5	add
1824	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	18	5	add
1825	[BUG]  [BUGGY]  Node  node  =  replacement.replaceChild(node,  node,  true);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  replacement.replaceChild(node,  node,  true);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.replaceChild(node,  node,  true);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	32	None	replace
1826	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
1827	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
1828	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
1829	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
1830	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
1831	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	195	5	add
1832	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1833	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	313	5	replace
1834	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node));  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node));  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1835	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
1836	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  NodeTraversal.traverse(compiler,  node,  this);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
1837	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	174	None	add
1838	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
1839	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	174	5	add
1840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
1841	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
1842	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  =  node.getFirstChild();  node  =  node.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  =  node.getFirstChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    Node  =  node.getFirstChild();  node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	139	None	add
1843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	55	1	replace
1844	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	55	1	replace
1845	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	151	None	replace
1846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
1847	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT  &&  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
1848	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);  [CE]  cannot  find  symbol  replace  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);	  	non-compiled	[CE]  cannot  find  symbol  replace	286	None	add
1849	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
1850	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	69	5	replace
1851	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	254	None	add
1852	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1853	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
1854	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	247	None	add
1855	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node.getType()  ==  Token.VAR,  replacement);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Node  node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Node  node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  ';'  expected	247	None	add
1856	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement),  node);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetProp(replacement),  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isGetProp(replacement),  node);	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1857	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  nde  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [CE]  cannot  find  symbol  nde  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  nde  =  node.removeFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    nde  =  node.removeFirstChild();  node  =  node.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  nde	33	None	add
1858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	98	5	replace
1859	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	98	5	replace
1860	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1861	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1862	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isGetProp());	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	252	2	replace
1863	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isGetProp());	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	252	2	replace
1864	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	156	None	add
1865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
1866	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
1867	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	104	None	add
1868	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	104	None	add
1869	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	281	None	add
1870	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
1871	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	281	5	add
1872	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	56	5	replace
1873	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	56	5	replace
1874	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1875	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1876	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1877	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	147	5	add
1878	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	147	5	add
1879	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	147	5	add
1880	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1881	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	266	5	add
1882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1883	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
1884	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	212	None	add
1885	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	212	1	add
1886	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	  	compilable	  [FE]  AssertionFailedError  	212	1	add
1887	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	212	5	add
1888	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	212	5	add
1889	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	296	5	add
1890	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	296	5	add
1891	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	296	5	add
1892	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	296	5	add
1893	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1894	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1895	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
1896	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1897	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
1899	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	215	1	replace
1900	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameProp());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
1901	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
1902	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  isNameAssignedTo(replacement.getString()));	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1903	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  NodeUtil.isGetProp(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  NodeUtil.isGetProp(replacement));	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	230	1	replace
1905	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.RETURN);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	230	1	replace
1906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1907	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
1908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	120	5	replace
1909	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	120	5	replace
1910	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetFirstChild());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetFirstChild());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1911	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
1912	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
1913	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  Node  node  =  node.getLastChild();	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	225	None	replace
1914	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement)  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement)  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement)  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  ';'  expected	306	None	add
1915	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
1916	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
1917	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
1918	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
1919	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1920	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1921	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
1922	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	27	None	add
1923	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	176	5	replace
1924	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	176	5	replace
1925	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1926	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
1927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1928	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EMPTY);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1929	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Node  node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	54	None	add
1930	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	85	None	add
1931	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	85	None	add
1932	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	85	None	add
1933	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	83	None	add
1934	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Node  node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	83	None	add
1935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
1936	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
1937	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	83	None	add
1938	[BUG]  [BUGGY]  node  =  node.replaceLastChild();  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceLastChild();	  node    =    node.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	226	None	replace
1939	[BUG]  [BUGGY]  Preconditions.checkType(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkType(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkType(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1940	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1941	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
1942	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	20	None	add
1943	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SIG);  [CE]  cannot  find  symbol  SIG  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SIG);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SIG);	  	non-compiled	[CE]  cannot  find  symbol  SIG	20	None	add
1944	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1945	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  RuntimeException  	232	5	replace
1946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  AssertionFailedError  	232	1	replace
1947	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.STRING);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	compilable	  [FE]  AssertionFailedError  	232	1	replace
1948	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GET  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GET  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GET	  	non-compiled	[CE]  ')'  expected	152	None	add
1949	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	152	None	add
1950	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1951	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.FUNCTION);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1952	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1953	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1954	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	145	5	replace
1955	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	145	5	replace
1956	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    AssertionFailedError  <  Node>  node  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1957	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  replacement.getFirstChild();  Preconditions.checkState(replacement!=  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  replacement.getFirstChild();  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    AssertionFailedError  <  Node>  node  =  replacement.getFirstChild();  Preconditions.checkState(replacement!=  null);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1958	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Node  replacement  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Node  replacement  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Node  replacement  =  node.getFirstChild();  Preconditions.checkState(replacement!=  null);	  	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	42	None	add
1959	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  replacement.getNode();  Preconditions.checkState(replacement!=  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError  <  Node>  node  =  replacement.getNode();  Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    AssertionFailedError  <  Node>  node  =  replacement.getNode();  Preconditions.checkState(replacement!=  null);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1960	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
1961	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
1962	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
1963	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	163	5	replace
1964	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	251	5	replace
1965	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	251	5	replace
1966	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
1967	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	40	None	add
1968	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
1969	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	101	None	add
1970	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getParent());  Preconditions.checkArgument(node.getParent());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getParent());  Preconditions.checkArgument(node.getParent());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getParent());  Preconditions.checkArgument(node.getParent());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	101	None	add
1971	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.getProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	101	None	add
1972	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());  [CE]  no  suitable  method  found  for  checkArgument(Node)  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getFirstChild());  Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Node)	101	None	add
1973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1974	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1975	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	99	None	add
1976	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	49	None	add
1977	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	95	None	add
1978	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1979	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
1980	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	57	5	replace
1981	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	57	5	replace
1982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
1983	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
1984	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [CE]  cannot  find  symbol  CAR  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  CAR	244	None	add
1985	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	271	None	add
1986	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
1987	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1988	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  Node  node  =  node.getParent();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1989	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1990	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	283	5	add
1991	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
1992	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
1993	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
1994	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
1995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1996	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	165	5	replace
1997	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	243	None	replace
1998	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
1999	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getFirstChild());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
2000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isGetProp(),  replacement);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
2001	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp(),  replacement);	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
2002	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isGetProp(),  node.getParent());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
2003	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isGetProp(),  node.getParent());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isGetProp(),  node.getParent());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());    	compilable	  [FE]  AssertionFailedError  	246	1	replace
2004	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
2005	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
2006	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2007	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2008	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2009	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2010	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2011	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2012	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  AssertionFailedError  	146	1	replace
2013	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  AssertionFailedError  	146	1	replace
2014	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  ||  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
2015	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(replacement));	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
2016	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2017	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2018	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2019	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2020	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2021	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	233	5	add
2022	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	276	None	add
2023	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2024	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2025	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FOR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2026	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.FOR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.FOR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2027	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node,  node.getFirstChild()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
2028	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2029	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2030	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2031	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2032	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
2033	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	44	5	add
2034	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	44	5	add
2035	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	44	5	add
2036	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
2037	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.isGetProp());  Preconditions.checkArgument(node.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
2038	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	121	5	replace
2039	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	121	5	replace
2040	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	172	1	add
2041	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	172	1	add
2042	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
2043	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  node  =  node.getFirstChild();  Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
2044	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  n  =  node.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
2045	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  nde  =  node.getNext();  node  =  node.getNext();  [CE]  cannot  find  symbol  nde  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  nde  =  node.getNext();  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    nde  =  node.getNext();  node  =  node.getNext();	  	non-compiled	[CE]  cannot  find  symbol  nde	87	None	add
2046	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP)  &&  node.isGetProp());	  	non-compiled	[CE]  not  a  statement	214	None	add
2047	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
2048	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  node);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	209	5	replace
2049	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2050	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  &&  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2051	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2052	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2053	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);  [CE]  cannot  find  symbol  replace  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replace);	  	non-compiled	[CE]  cannot  find  symbol  replace	302	None	add
2054	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetProp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetProp(node));	  Preconditions.checkArgument(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
2055	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()!=  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	50	None	replace
2056	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
2057	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
2058	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	125	None	add
2059	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	293	5	replace
2060	[BUG]  [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	293	5	replace
2061	[BUG]  [BUGGY]  Preconditions.checkState(node.isGet());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGet());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGet());	  Preconditions.checkState(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
2062	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetQualifiedName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetQualifiedName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetQualifiedName());	  Preconditions.checkState(node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
2063	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
2064	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
2065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
2066	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
2067	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
2068	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	111	None	replace
2069	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	66	None	add
2070	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	15	1	replace
2071	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	15	1	replace
2072	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;	  if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  unreachable  statement	184	None	replace
2073	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
2074	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  isNameAssignedTo(node.getString(),  replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
2075	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
2076	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	25	5	replace
2077	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
2078	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	269	5	add
2079	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	269	5	add
2080	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
2081	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	269	5	add
2082	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	269	5	add
2083	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	269	5	add
2084	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	269	5	add
2085	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
2086	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	51	5	add
2087	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkState(replacement!=  null);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkState(replacement!=  null);  Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
2088	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkState(replacement!=  null);  Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkState(replacement!=  null);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkState(replacement!=  null);  Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
2089	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
2090	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
2091	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	261	5	add
2092	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	261	5	add
2093	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	261	5	add
2094	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	261	5	add
2095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	261	5	add
2096	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	261	5	add
2097	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString()	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	196	None	replace
2098	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	7	5	add
2099	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	7	5	add
2100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	7	5	add
2101	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(replacement.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	7	5	add
2102	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	91	None	add
2103	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
2104	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	22	None	add
2105	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Node  node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	81	None	add
2106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
2107	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	81	5	add
2108	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	81	None	add
2109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
2110	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	317	5	add
2111	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  isSafeReplacement);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  isSafeReplacement);	  Preconditions.checkState(NodeUtil.isGetProp(node),    isSafeReplacement);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
2112	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  SETPROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	301	None	replace
2113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
2114	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getLastChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
2115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	4	replace
2116	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	4	replace
2117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
2118	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	77	5	add
2119	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	if(node.getType()  ==  Token.NAME)  {  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node    node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	240	None	replace
2120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	13	5	replace
2121	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.mayHaveSideEffects(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	compilable	  [FE]  RuntimeException  	13	5	replace
2122	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	200	None	replace
2123	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	193	None	add
2124	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Node  node  =  node.getFirstChild();  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	193	None	add
2125	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	193	None	add
2126	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(node);  preconditions.checkNotNull(node);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkNotNull(node);  preconditions.checkNotNull(node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Preconditions.checkNotNull(node);  preconditions.checkNotNull(node);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	193	None	add
2127	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  >>  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  >>  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	67	None	replace
2128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
2129	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
2130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
2131	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
2132	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
2133	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Node  node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Node  node.getType()  ==  Token.NAME,  replacement);	  	non-compiled	[CE]  ';'  expected	11	None	add
2134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	11	5	add
2135	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	11	5	add
2136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
2137	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
2138	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	312	None	add
2139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
2140	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	312	5	add
2141	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getProp());  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	107	None	add
2142	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getName());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
2143	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkState(NodeUtil.isGetProp(node)||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
2144	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.GETPROP;	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  ';'  expected	150	None	replace
2145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	150	1	replace
2146	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	150	1	replace
2147	[BUG]  [BUGGY]  node  =  node.getProp(Node.SOURCENAME_PROP);  [CE]  cannot  find  symbol  SOURCENAME_PROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getProp(Node.SOURCENAME_PROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getProp(Node.SOURCENAME_PROP);	  node    =    node.getParent();    	non-compiled	[CE]  cannot  find  symbol  SOURCENAME_PROP	192	None	replace
2148	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  RESTURN  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	279	None	add
2149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	202	2	replace
2150	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	202	2	replace
2151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
2152	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
2153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2154	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2156	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2158	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2160	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	231	5	add
2161	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  Node  replacement  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.removeFirstChild();  Node  replacement  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild();  Node  replacement  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
2162	[BUG]  [BUGGY]  node  =  node.removeFirstChild();  Node  replacement  =  node.removeLastChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.removeFirstChild();  Node  replacement  =  node.removeLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.removeFirstChild();  Node  replacement  =  node.removeLastChild();	  node    =    node.removeFirstChild();    Node    replacement    =    node.removeFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	278	None	replace
2163	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  isNameAssignedTo(node.getString()));	  Preconditions.checkState(NodeUtil.isGetProp(node,    replacement));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
2164	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  false);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node,  replacement),  false);	  Preconditions.checkState(NodeUtil.isGetProp(node,    replacement));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
2165	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESTURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RESTURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	308	None	add
2166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	53	5	replace
2167	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	53	5	replace
2168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2169	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2171	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	19	5	replace
2173	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	19	5	replace
2174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	292	5	add
2175	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkNotNull(replacement);	  	compilable	  [FE]  RuntimeException  	292	5	add
2176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
2177	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	154	5	add
2178	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement))  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement))  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement))  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  ';'  expected	208	None	add
2179	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	208	None	add
2180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	208	5	add
2181	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	208	5	add
2182	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	64	None	replace
2183	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  =  node.getFirstChild();  node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  =  node.getFirstChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    Node  =  node.getFirstChild();  node  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  Node	135	None	add
2184	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  node  =  node.getFirstChild();  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  Node  node  =  node.getFirstChild();  node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    Node  node  =  node.getFirstChild();  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	135	None	add
2185	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Node  node  =  node.getFirstChild();	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	197	None	replace
2186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	315	5	add
2187	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  RuntimeException  	315	5	add
2188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
2189	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT,  replacement);	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
2190	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.mayHaveSideEffects(node);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.mayHaveSideEffects(node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.mayHaveSideEffects(node);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	170	None	replace
2191	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isSafeReplacement(node);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isSafeReplacement(node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isSafeReplacement(node);	  node    =    node.getNext()    &&    NodeUtil.isGetProp(node);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
2192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	148	5	replace
2193	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	148	5	replace
2194	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.STRING)  {  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2195	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESULT);  [CE]  cannot  find  symbol  RESULT  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.RESULT);	  	non-compiled	[CE]  cannot  find  symbol  RESULT	24	None	add
2196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	24	5	add
2197	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	24	5	add
2198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	24	5	add
2199	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	24	5	add
2200	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REMOVE);  [CE]  cannot  find  symbol  REMOVE  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.REMOVE);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.REMOVE);	  	non-compiled	[CE]  cannot  find  symbol  REMOVE	24	None	add
2201	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node.getType()    ==    Token.RETURN;    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	321	5	replace
2202	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node    node.getType()    ==    Token.RETURN;    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	321	5	replace
2203	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isName());  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isName());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isName());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	133	None	add
2204	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	133	None	add
2205	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	310	None	add
2206	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	310	None	add
2207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
2208	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getFirstChild()  ==  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	189	5	add
2209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
2210	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getLastChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	305	5	replace
2211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2212	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2214	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2216	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	229	5	add
2217	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString()	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	311	None	replace
2218	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
2219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	68	5	add
2220	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	68	5	add
2221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getFirstChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(replacement.getFirstChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
2222	[BUG]  [BUGGY]  Preconditions.checkState(replacement.getFirstChild()  ==  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(replacement.getFirstChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(replacement.getFirstChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
2223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	239	5	replace
2224	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	239	5	replace
2225	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	141	None	add
2226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	141	5	add
2227	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	141	5	add
2228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.STRING);	  	compilable	  [FE]  RuntimeException  	141	5	add
2229	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.STRING);	  	compilable	  [FE]  RuntimeException  	141	5	add
2230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	141	5	add
2231	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	141	5	add
2232	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	14	None	add
2233	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Node  node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Node  node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	14	None	add
2234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
2235	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
2236	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	14	None	add
2237	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  ';'  expected	9	None	add
2238	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	9	None	add
2239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
2240	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
2241	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node),  replacement);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node),  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node),  replacement);	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
2242	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	203	None	replace
2243	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  replacement  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node  replacement  =  node.getFirstChild();	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	203	None	replace
2244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
2245	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkNotNull(replacement);	          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);    	compilable	  [FE]  RuntimeException  	2	5	replace
2246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	319	5	add
2247	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	319	5	add
2248	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  >>  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	319	None	add
2249	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  >=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
2250	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  >=  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	319	5	add
2251	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	38	None	add
2252	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	38	None	add
2253	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	38	None	add
2254	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
2255	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
2256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.VAR,  node);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
2257	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR,  node);	  Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    	compilable	  [FE]  RuntimeException  	248	5	replace
2258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
2259	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
2260	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  CAR  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.CAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	160	None	add
2261	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	160	None	add
2262	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	264	None	add
2263	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement.getString()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
2264	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  &&  replacement.getString().equals( "prototype   "));	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	298	None	add
2265	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2266	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2268	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2269	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	205	None	add
2270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
2271	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	162	5	add
2272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
2273	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    	compilable	  [FE]  RuntimeException  	267	5	replace
2274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
2275	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  node);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
2276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
2277	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	21	5	replace
2278	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));	          Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
2279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	46	5	add
2280	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	46	5	add
2281	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	234	None	replace
2282	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
2283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
2284	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	119	1	replace
2285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  RuntimeException  	178	5	replace
2286	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	compilable	  [FE]  RuntimeException  	178	5	replace
2287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
2288	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	303	1	replace
2289	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  SHOW  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  SHOW	229	None	add
2290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
2291	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	306	1	add
2292	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  SEMI  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	306	None	add
2293	[BUG]  [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  preconditions	116	None	replace
2294	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
2295	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	68	None	add
2296	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	68	None	add
2297	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	101	5	add
2298	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	101	5	add
2299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	101	5	add
2300	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	101	5	add
2301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	150	1	replace
2302	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node.getFirstChild());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	150	1	replace
2303	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
2304	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node,  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
2305	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
2306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	64	5	replace
2307	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	64	5	replace
2308	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);Preconditions.checkArgument(node.getType()  ==  Token.GETPROP	  	non-compiled	[CE]  ')'  expected	152	None	add
2309	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
2310	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	128	5	add
2311	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignmentOp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignmentOp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignmentOp(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2312	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2313	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	198	5	replace
2314	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RESTURN);    	compilable	  [FE]  RuntimeException  	198	5	replace
2315	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  preconditions.checkState(replacement!=  null);  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);  preconditions.checkState(replacement!=  null);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	42	None	add
2316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);Preconditions.checkState(replacement!=  null);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
2317	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);Preconditions.checkState(replacement!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);Preconditions.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);Preconditions.checkState(replacement!=  null);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
2318	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError.checkState(replacement!=  null);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  AssertionFailedError.checkState(replacement!=  null);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    AssertionFailedError.checkState(replacement!=  null);	  	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	42	None	add
2319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  if(node.isGetProp())  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);  if(node.isGetProp())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	4	add
2320	[BUG]  [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  if(node.isGetProp())  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(replacement!=  null);  Preconditions.checkState(replacement!=  null);  if(node.isGetProp())  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(replacement!=    null);    Preconditions.checkState(replacement!=  null);  if(node.isGetProp())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	4	add
2321	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  replacer,  false);  [CE]  cannot  find  symbol  replacer  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  replacer,  false);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  replacer,  false);	  node    =    node.replaceChild(node,    replacement,    true);    	non-compiled	[CE]  cannot  find  symbol  replacer	32	None	replace
2322	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isName(replacement));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isName(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(NodeUtil.isName(replacement));	          Preconditions.checkArgument(NodeUtil.isGetProp(replacement));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
2323	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
2324	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  ')'  expected	272	None	replace
2325	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  ')'  expected	272	None	replace
2326	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
2327	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
2328	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	85	5	add
2329	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  node,  replacement);	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    replacement);    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	6	None	replace
2330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
2331	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	59	5	replace
2332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getFirstChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
2333	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  node);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getFirstChild()  ==  node);	  Preconditions.checkState(node.getLastChild()    ==    replacement);    	compilable	  [FE]  RuntimeException  	190	5	replace
2334	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
2335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2336	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2337	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2338	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkState(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2340	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkState(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkState(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2342	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	294	5	add
2343	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Node  node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Node  node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	54	None	add
2344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
2345	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  AssertionFailedError  	54	1	add
2346	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	54	5	add
2347	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	54	5	add
2348	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
2349	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
2350	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
2351	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
2352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	149	1	replace
2353	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  node);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	149	1	replace
2354	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  Preconditions.checkState(node.isGetProp());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  Preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	131	None	add
2355	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignments());  Preconditions.checkState(node.isGetProp());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.isGetProp());  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignments());  Preconditions.checkState(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.isGetProp());    NodeTraversal.traverse(compiler,  node,  new  ExploitAssignments());  Preconditions.checkState(node.isGetProp());	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	131	None	add
2356	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESGEXP);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.RESGEXP);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	24	None	add
2357	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESOLVED);  [CE]  cannot  find  symbol  RESOLVED  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESOLVED);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.RESOLVED);	  	non-compiled	[CE]  cannot  find  symbol  RESOLVED	24	None	add
2358	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESERVED);  [CE]  cannot  find  symbol  RESERVED  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(replacement.getType()  ==  Token.RESERVED);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(replacement.getType()  ==  Token.RESERVED);	  	non-compiled	[CE]  cannot  find  symbol  RESERVED	24	None	add
2359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2360	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2361	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2362	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals(   "prototype   "));  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    replacement.getString().equals(   "prototype   "));    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( ",prototype   "));	  	compilable	  [FE]  RuntimeException  	298	5	add
2363	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  ref);  [CE]  cannot  find  symbol  ref  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  replacement);  Preconditions.checkState(node.getLastChild()  ==  ref);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()    ==    replacement);    Preconditions.checkState(node.getLastChild()  ==  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	189	None	add
2364	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  Node  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2365	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  true;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2366	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getString()  ==  Token.GETPROP);  [CE]  incomparable  types:  String  and  int  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getString()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getString()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  incomparable  types:  String  and  int	15	None	replace
2367	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);Preconditions.checkArgument(node.getType()  ==  Token.EXPR_	  	non-compiled	[CE]  ')'  expected	115	None	add
2368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
2369	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=    Token.VAR);    	compilable	  [FE]  RuntimeException  	161	5	replace
2370	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
2371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	94	2	replace
2372	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]                    RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	94	2	replace
2373	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  SHOW  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  SHOW	233	None	add
2374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getFirstChild();    Node  n  =  node.getLastChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
2375	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getFirstChild();  Node  n  =  node.getLastChild();  node  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getFirstChild();    Node  n  =  node.getLastChild();  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	139	5	add
2376	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.NAME  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    Preconditions.checkType(node.getType()  ==  Token.NAME  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol	257	None	add
2377	[BUG]  [BUGGY]  Node  node  =  node.cloneTree();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.cloneTree();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.cloneTree();	  Node    node    =    node.removeFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	288	None	replace
2378	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
2379	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
2380	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	86	5	replace
2381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
2382	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  AssertionFailedError  	79	1	add
2383	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  preconditions.checkArgument(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	79	None	add
2384	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
2385	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  Node  node  =  replacement.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    Node  node  =  replacement.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	269	None	add
2386	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(replacement!=  null)  {  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
2387	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(replacement!=  null)  {  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(replacement!=  null)  {  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
2388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	49	5	add
2389	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.TRY);	  	compilable	  [FE]  RuntimeException  	49	5	add
2390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	49	5	add
2391	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	49	5	add
2392	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  =  node.getLastChild();	  node    =    node.getLastChild();    Node    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Node	137	None	replace
2393	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getLastChild();  [CE]  cannot  find  symbol  Node  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getLastChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  =  node.getLastChild();	  node    =    node.getLastChild();    Node    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Node	137	None	replace
2394	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
2395	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	63	5	add
2396	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
2397	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
2398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	1	replace
2399	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=  Token.VAR  ||  node.isGetProp());	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	250	1	replace
2400	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	77	None	add
2401	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	162	None	add
2402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
2403	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	162	5	add
2404	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkEquals(replacement);  Preconditions.checkNotNull(replacement);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkEquals(replacement);  Preconditions.checkNotNull(replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkEquals(replacement);  Preconditions.checkNotNull(replacement);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
2405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	1	5	add
2406	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkNotNull(replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	1	5	add
2407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
2408	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	247	5	add
2409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	310	5	add
2410	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	310	5	add
2411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2412	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2413	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2414	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2416	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(replacement.getType()  ==  Token.CALL);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	261	5	add
2417	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	117	None	replace
2418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	compilable	  [FE]  RuntimeException  	255	5	replace
2419	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	compilable	  [FE]  RuntimeException  	255	5	replace
2420	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.VAR)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.VAR)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
2421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	50	5	replace
2422	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=    Token.NAME);    	compilable	  [FE]  RuntimeException  	50	5	replace
2423	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
2424	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.REGEXP  &&  NodeUtil.isName(node.getFirstChild()));	          Preconditions.checkArgument(replacement.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
2425	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	308	None	add
2426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	93	2	replace
2427	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  }  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.FUNCTION)    {    Node    node    =    node.getNext();    }    	compilable	  [FE]  AssertionFailedError  	93	2	replace
2428	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.LAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  LAME  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.LAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.LAME);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  LAME	66	None	add
2429	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
2430	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	66	5	add
2431	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.LAME);  [CE]  cannot  find  symbol  LAME  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.LAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);Preconditions.checkState(node.getType()  ==  Token.LAME);	  	non-compiled	[CE]  cannot  find  symbol  LAME	66	None	add
2432	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  preconditions	76	None	replace
2433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.cloneTree();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node  =  node.cloneTree();	  node    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
2434	[BUG]  [BUGGY]  node  =  node.cloneTree();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.cloneTree();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.cloneTree();	  node    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
2435	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	          Preconditions.checkNotNull(replacement);    NodeTraversal.traverse(compiler,    node,    new    ExploitAssigns());    	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	5	None	replace
2436	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  isSafeReplacement);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  isSafeReplacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node),  isSafeReplacement);	  Preconditions.checkState(NodeUtil.isGetProp(node),    isSafeReplacement);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
2437	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.ASSIGN);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.SETPROP);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	228	None	replace
2438	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
2439	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(replacement.getType()  ==  Token.PROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.PROP);    	non-compiled	[CE]  cannot  find  symbol  PROP	235	None	replace
2440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
2441	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString(),  replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	compilable	  [FE]  RuntimeException  	96	5	replace
2442	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	96	None	replace
2443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
2444	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()!=  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	28	2	replace
2445	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(replacement));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(replacement));	          Preconditions.checkArgument(replacement.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
2446	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	91	None	add
2447	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  replacement.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
2448	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
2449	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    Node  node  =  replacement.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
2450	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
2451	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	230	5	replace
2452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
2453	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  AssertionFailedError  	287	1	replace
2454	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.GETPROP)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
2455	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
2456	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
2457	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    Node  node  =  node.getFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.STRING)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
2458	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [CE]  cannot  find  symbol  SHOW  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.STRING);    Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	  	non-compiled	[CE]  cannot  find  symbol  SHOW	231	None	add
2459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
2460	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
2461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	296	5	add
2462	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	296	5	add
2463	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	296	5	add
2464	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	296	5	add
2465	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
2466	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	296	5	add
2467	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	215	5	replace
2468	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	compilable	  [FE]  RuntimeException  	215	5	replace
2469	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.isGetProp());  [CE]  cannot  find  symbol  SETPROP  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP  ||  node.isGetProp());	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol  SETPROP	215	None	replace
2470	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
2471	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
2472	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
2473	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2474	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeLastChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2475	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
2476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
2477	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  node  =  node.getFirstChild();	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	245	5	replace
2478	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkType(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol	205	None	add
2479	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	172	5	add
2480	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	172	5	add
2481	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()!=    replacement);    Node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  not  a  statement	302	None	add
2482	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2483	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	270	None	replace
2484	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.	  node    =    node.getNext();    if(node.getType()    ==    Token.EXPR_RESULT)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	270	None	replace
2485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
2486	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	14	1	add
2487	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [CE]  cannot  find  symbol  SETPROP  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.STRING);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	232	None	replace
2488	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkType(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
2489	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Node    parent    =    node.getParent();    Preconditions.checkState(parent.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  parent  =  node.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  isSafeReplacement(Node,Node)	164	None	add
2490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
2491	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	107	5	add
2492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	107	4	add
2493	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());    node    =    node.getFirstChild();    Preconditions.checkState(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	107	4	add
2494	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2495	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkState(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2496	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2497	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.RETURN);        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	70	5	add
2498	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	104	5	add
2499	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	104	5	add
2500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	104	5	add
2501	[BUG]  [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.isGetProp());        Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  RuntimeException  	104	5	add
2502	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.VAR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.VAR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2503	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.VAR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.VAR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.NAME)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.VAR)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }	  	compilable	  [FE]  RuntimeException  	179	5	add
2504	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
2505	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RES	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
2506	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
2507	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.EXPR	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
2508	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	160	None	add
2509	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
2510	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkState(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	160	5	add
2511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2512	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2514	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	195	5	add
2516	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	195	5	add
2517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2518	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	195	5	add
2519	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkType(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkType(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol	210	None	add
2520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
2521	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	210	1	add
2522	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  PROP  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  PROP	147	None	add
2523	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  [CE]  cannot  find  symbol  SHOW  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SHOW);  Preconditions.checkArgument(node.getType()  ==  Token.SHOW);	  	non-compiled	[CE]  cannot  find  symbol  SHOW	147	None	add
2524	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false	  	non-compiled	[CE]  ';'  expected	317	None	add
2525	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2526	[BUG]  [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement!=  null)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2527	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.STRING)  {  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.STRING)    {    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	142	5	replace
2529	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	142	5	replace
2530	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	142	5	replace
2531	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP  &&  node.getString().equals( "prototype "));	  Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	142	5	replace
2532	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	201	None	add
2533	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_REULT);  [CE]  cannot  find  symbol  EXPR_REULT  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_REULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_REULT);	  	non-compiled	[CE]  cannot  find  symbol  EXPR_REULT	201	None	add
2534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2535	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2537	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2539	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	292	5	add
2540	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	292	5	add
2541	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(replacement.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	292	5	add
2542	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
2543	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	264	5	add
2544	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	264	None	add
2545	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
2546	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
2547	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	109	5	add
2548	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SHOW);  [CE]  cannot  find  symbol  SHOW  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.SHOW);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.SHOW);	  	non-compiled	[CE]  cannot  find  symbol  SHOW	141	None	add
2549	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(NodeUtil.isGetProp(node),  node.getType());	  Preconditions.checkState(NodeUtil.isGetProp(node),    replacement);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
2550	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
2551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	206	1	replace
2552	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	206	1	replace
2553	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
2554	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  true;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
2555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
2556	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	83	1	add
2557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
2558	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
2559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	41	2	replace
2560	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    node    =    node.removeFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	41	2	replace
2561	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]        IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	241	None	replace
2562	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
2563	[BUG]  [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(replacement  ==  null)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getFirstChild();  if(isNameAssignedTo(node.getString()	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    Node    node    =    node.removeFirstChild();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	241	None	replace
2564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	275	5	replace
2565	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	275	5	replace
2566	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  isNameAssignedTo(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    	non-compiled	[CE]  method  isNameAssignedTo  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	12	None	replace
2567	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT;  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT;  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT;  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	44	None	add
2568	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	44	5	add
2569	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	44	5	add
2570	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	44	None	add
2571	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
2572	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
2573	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString()  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString()	  	non-compiled	[CE]  ')'  expected	271	None	add
2574	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getString()  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getString()  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getString()	  	non-compiled	[CE]  ')'  expected	271	None	add
2575	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  true;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    true;    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	271	None	add
2576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
2577	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	249	1	add
2578	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  }  else  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  }  else  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());  }  else  {  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.isGetProp());	  	non-compiled	[CE]  illegal  start  of  type	249	None	add
2579	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  preconditions	112	None	replace
2580	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isName(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
2581	[BUG]  [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node,  replaceable.getString());  [CE]  cannot  find  symbol  replaceable  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getNext()  &&  NodeUtil.isName(node,  replaceable.getString());  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.getNext()  &&  NodeUtil.isName(node,  replaceable.getString());	  node    =    node.getNext()    &&    NodeUtil.isName(node.getString());    	non-compiled	[CE]  cannot  find  symbol  replaceable	171	None	replace
2582	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
2583	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
2584	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
2585	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    node    =    node.getFirstChild();    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	244	5	add
2586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	211	1	replace
2587	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	211	1	replace
2588	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
2589	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
2590	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	177	5	add
2591	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2592	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	122	5	add
2593	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2594	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2595	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2596	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2598	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  return  false;  }  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  return  false;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2600	[BUG]  [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.getParent();  if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node    =    node.getParent();    if(node.getType()  ==  Token.EXPR_RESULT)  {  node  =  node.getParent();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	191	5	add
2601	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  for(Node  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    for(Node    node    =    node.removeFirstChild();    node    =    node.removeFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
2602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    for(Node    node    =    node.removeFirstChild();    node    =    node.removeFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	37	2	replace
2603	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [FE]  AssertionFailedError  [FE]                IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  node  =  node.removeFirstChild();  }	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    for(Node    node    =    node.removeFirstChild();    node    =    node.removeFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	37	2	replace
2604	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.removeFirstChild();  if(node.getType()  ==  Token.NAME)  {  for(Node  node  =  node.removeFirstChild();  node  =	  node    =    node.removeFirstChild();    if(node.getType()    ==    Token.NAME)    {    for(Node    node    =    node.removeFirstChild();    node    =    node.removeFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
2605	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(node,  new  Node(replacement));  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(node,  new  Node(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(node,  new  Node(replacement));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	217	None	replace
2606	[BUG]  [BUGGY]  node  =  node.replaceChild(node,  new  Node(replacement),  replacement);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  node.replaceChild(node,  new  Node(replacement),  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  node.replaceChild(node,  new  Node(replacement),  replacement);	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	217	None	replace
2607	[BUG]  [BUGGY]  node  =  ref.replaceChild(node,  new  Node(replacement));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node  =  ref.replaceChild(node,  new  Node(replacement));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node  =  ref.replaceChild(node,  new  Node(replacement));	  node    =    replacement.replaceChild(node,    new    Node(replacement));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	217	None	replace
2608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	309	2	replace
2609	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(replacement.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	309	2	replace
2610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.getFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    node  =  node.getFirstChild();  node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	33	5	add
2611	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.getFirstChild();  node  =  node.removeFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  node  =  node.getFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    node  =  node.getFirstChild();  node  =  node.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	33	5	add
2612	[BUG]  [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  node  =  node.getFirstChild();  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.removeFirstChild();    node  =  node.removeFirstChild();  Node  node  =  node.getFirstChild();  node  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.removeFirstChild();        node    =    node.removeFirstChild();    Node  node  =  node.getFirstChild();  node  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	33	None	add
2613	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	75	5	replace
2614	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	          Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=    Token.RETURN);    	compilable	  [FE]  RuntimeException  	75	5	replace
2615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
2616	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.isGetProp());	          Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());    preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	106	5	replace
2617	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	223	4	replace
2618	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  node  =  node.getFirstChild();	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	223	4	replace
2619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
2620	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
2621	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Preconditions.checkType(node.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Preconditions.checkType(node.getType()!=  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
2622	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()!=    Token.NAME);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	9	None	add
2623	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
2624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	258	1	replace
2625	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.hasChildren());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.hasChildren());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.hasChildren());	  Preconditions.checkArgument(node.getType()    ==    Token.NAME    ||    node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	258	1	replace
2626	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME  ||  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()!=    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
2627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	133	5	add
2628	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	133	5	add
2629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	133	5	add
2630	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	133	5	add
2631	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	133	5	add
2632	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	133	5	add
2633	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	133	5	add
2634	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.isName());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.isName());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	133	5	add
2635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
2636	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.STRING);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	155	5	replace
2637	[BUG]  [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    Node  n  =  node.getLastChild();  Node  n  =  node.getFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        Node    n    =    node.getLastChild();    Node  n  =  node.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isSafeReplacement(Node,Node)	290	None	add
2638	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	212	5	add
2639	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	  	compilable	  [FE]  RuntimeException  	212	5	add
2640	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
2641	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  node    =    node.getNext();    if(node.getType()    ==    Token.NAME)    {    Node    replacement    =    node.getNext();    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
2642	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
2643	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    	compilable	  [FE]  RuntimeException  	196	5	replace
2644	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);	          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  preconditions	127	None	replace
2645	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  replacement.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  replacement.getFirstChild();	  Node    node    =    replacement.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	replace
2646	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	20	None	add
2647	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	20	5	add
2648	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	20	5	add
2649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	5	add
2650	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	5	add
2651	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  ref);  [CE]  cannot  find  symbol  ref  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkState(node.getLastChild()!=  replacement);  Preconditions.checkState(node.getLastChild()!=  ref);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getLastChild()!=    replacement);    Preconditions.checkState(node.getLastChild()!=  ref);	  	non-compiled	[CE]  cannot  find  symbol  ref	186	None	add
2652	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
2653	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	23	5	replace
2654	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  node.getString().equals( "name "));	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	23	5	replace
2655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	2	replace
2656	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	2	replace
2657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	2	replace
2658	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	2	replace
2659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  else  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  else  {  return  false;  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	4	replace
2660	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  else  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  else  {  return  false;  }	  node    =    node.getLastChild();    node    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	136	4	replace
2661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GET  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	301	5	replace
2662	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET  &&  node.getFirstChild()!=  replacement);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GET  &&  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GET  &&  node.getFirstChild()!=  replacement);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    ||    node.getFirstChild()!=    replacement);    	compilable	  [FE]  RuntimeException  	301	5	replace
2663	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  replacement  =  node.getFirstChild();	          Preconditions.checkNotNull(replacement);    Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	263	None	replace
2664	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	22	None	add
2665	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	22	5	add
2666	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	22	5	add
2667	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	22	5	add
2668	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	22	5	add
2669	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.N  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.N  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.N	  	non-compiled	[CE]  ')'  expected	51	None	add
2670	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	51	None	add
2671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
2672	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	236	1	add
2673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
2674	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	157	5	replace
2675	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(node);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	193	5	add
2676	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	193	5	add
2677	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    NodeTraversal.traverse(compiler,  node,  new  ExploitAssignment());	  	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	193	None	add
2678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkNotNull(node);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
2679	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkNotNull(node);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkNotNull(node);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	193	1	add
2680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
2681	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
2682	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
2683	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.STRING);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	284	5	replace
2684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	154	5	add
2685	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	154	5	add
2686	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()!=  Token.PROP);  [CE]  cannot  find  symbol  PROP  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()!=  Token.PROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.GETPROP);        Preconditions.checkArgument(node.getType()!=    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.PROP);  Preconditions.checkArgument(node.getType()!=  Token.PROP);	  	non-compiled	[CE]  cannot  find  symbol  PROP	154	None	add
2687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2688	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  true;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2689	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2690	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	181	5	add
2691	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
2692	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isNameAssignedTo(replacement));	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.isGetProp());    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
2693	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ARRAY);  [CE]  cannot  find  symbol  ARRAY  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ARRAY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.ARRAY);	  	non-compiled	[CE]  cannot  find  symbol  ARRAY	283	None	add
2694	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);	  	non-compiled	[CE]  cannot  find  symbol  MOVED	283	None	add
2695	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.VAR    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
2696	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignmentOp(node));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignmentOp(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignmentOp(node));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
2697	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.VAR  ||  NodeUtil.isNameAssignedTo(node.getString()));	  Preconditions.checkState(node.getType()    ==    Token.VAR    ||    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
2698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
2699	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(node.getType()    ==    Token.GETPROP,    replacement);    	compilable	  [FE]  AssertionFailedError  	213	1	replace
2700	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
2701	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.VAR);        Preconditions.checkArgument(node.getType()!=    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	125	5	add
2702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
2703	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	          Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	320	2	replace
2704	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2705	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	compilable	  [FE]  RuntimeException  	304	5	add
2706	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  Node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.VAR    ||    node.getFirstChild()    ==    replacement);    Node.getType()  ==  Token.VAR  ||  node.getFirstChild()  ==  replacement);	  	non-compiled	[CE]  not  a  statement	304	None	add
2707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	82	5	replace
2708	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	82	5	replace
2709	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkType(node.getType()  ==  Token.NAME);	          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkType(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
2710	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
2711	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	  	compilable	  [FE]  RuntimeException  	11	5	add
2712	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
2713	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
2714	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkType(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2715	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.check(node.getType()  ==  Token.VAR);  Preconditions.checkState(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2716	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
2717	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkState(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.VAR);        Preconditions.checkState(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	156	5	add
2718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
2719	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP  ||  node.getFirstChild()  ==  replacement);	  Preconditions.checkState(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	144	1	replace
2720	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  return  false;  }  [CE]  cannot  find  symbol  MOVED  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.MOVED);  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  MOVED	183	None	add
2721	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(!isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(!isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2722	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(!isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  return  false;  }  if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(!isNameAssignedTo(node.getString(),  replacement));  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()    ==    Token.FUNCTION)    {    node    =    node.getLastChild();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    return    false;    }    if(node.getType()  ==  Token.FUNCTION)  {  node  =  node.getLastChild();  }  else  {  Preconditions.checkArgument(!isNameAssignedTo(node.getString(),  replacement));  return  false;  }	  	compilable	  [FE]  RuntimeException  	183	5	add
2723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
2724	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	  	compilable	  [FE]  AssertionFailedError  	315	1	add
2725	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  not  a  statement	315	None	add
2726	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.LONG  ||  node.getFirstChild()!=  replacement);  [CE]  cannot  find  symbol  LONG  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  Preconditions.checkState(node.getType()  ==  Token.LONG  ||  node.getFirstChild()!=  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME    ||    node.getFirstChild()!=    replacement);    Preconditions.checkState(node.getType()  ==  Token.LONG  ||  node.getFirstChild()!=  replacement);	  	non-compiled	[CE]  cannot  find  symbol  LONG	315	None	add
2727	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
2728	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node.getFirstChild()));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR  ||  NodeUtil.isGetProp(node.getFirstChild()));	  Preconditions.checkArgument(node.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
2729	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	208	5	add
2730	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.VAR,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	208	5	add
2731	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);  [CE]  cannot  find  symbol  SAME  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.SAME,  replacement);	  	non-compiled	[CE]  cannot  find  symbol  SAME	95	None	add
2732	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
2733	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.NAME,    replacement);    Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	  	compilable	  [FE]  RuntimeException  	95	5	add
2734	[BUG]  [BUGGY]  Node  node  =  node.replaceChild(replacement,  replacement);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  node  =  node.replaceChild(replacement,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.replaceChild(replacement,  replacement);	  Node    node    =    replacement.replaceChild(node,    node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	30	None	replace
2735	[BUG]  [BUGGY]  Node  replacement  =  node.replaceChild(node,  replacement);  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Node  replacement  =  node.replaceChild(node,  replacement);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  replacement  =  node.replaceChild(node,  replacement);	  Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	203	None	replace
2736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
2737	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
2738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
2739	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.STRING)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
2740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  else  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  else  {  return  false;  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	4	replace
2741	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  else  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getFirstChild();  }  else  {  return  false;  }	  node    =    node.getLastChild();    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	140	4	replace
2742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getLastChild();        node    =    node.getLastChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  	compilable	  [FE]  RuntimeException  	135	5	add
2743	[BUG]  [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getLastChild();    node  =  node.getLastChild();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getLastChild();        node    =    node.getLastChild();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getLastChild();  node  =  node.getLastChild();  }	  	compilable	  [FE]  RuntimeException  	135	5	add
2744	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	81	None	add
2745	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	199	5	add
2746	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.NAME);        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    if(isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	199	5	add
2747	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
2748	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	60	5	add
2749	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	60	5	add
2750	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	60	5	add
2751	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.check(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
2752	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	60	5	add
2753	[BUG]  [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkState(node.getType()        ==        Token.NAME);        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.TRY);	  	compilable	  [FE]  RuntimeException  	60	5	add
2754	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
2755	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
2756	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
2757	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkState(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	7	5	add
2758	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	7	5	add
2759	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	7	5	add
2760	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	5	add
2761	[BUG]  [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkNotNull(replacement);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkNotNull(replacement);        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	5	add
2762	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isName(node));	  Preconditions.checkArgument(node.getType()    ==    Token.RETURN    &&    NodeUtil.isGetProp(node));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
2763	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.EXPR_RESULT);    preconditions.checkArgument(replacement.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	18	None	add
2764	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(replacement!=  null)  {  if(node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2765	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2766	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2767	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2768	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.SEMI)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.SEMI)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  if(node.getType()  ==  Token.SEMI)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2769	[BUG]  [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    if(node.getType()  ==  Token.NAME)  {  node  =  node.getNext();  }  else  {  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  return  false;  }  if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        if(node.getType()    ==    Token.NAME)    {    node    =    node.getNext();    }    else    {    Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    return    false;    }    if(node.getType()  ==  Token.STRING)  {  node  =  node.getNext();  if(node.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2770	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                RuntimeException      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);	          Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  preconditions	53	None	replace
2771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	99	5	add
2772	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	99	5	add
2773	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	99	5	add
2774	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()!=    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);  if(isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	99	5	add
2775	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(replacement!=  null)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	node        =        node.getNext();        node    =    node.getNext();    if(replacement!=  null)  {  node  =  node.getNext();  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	87	5	add
2776	[BUG]  [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(replacement!=  null)  {  node  =  node.getNext();  node  =  node.getNext();  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  node    =    node.getNext();    node  =  node.getNext();  if(replacement!=  null)  {  node  =  node.getNext();  node  =  node.getNext();  }  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	node        =        node.getNext();        node    =    node.getNext();    if(replacement!=  null)  {  node  =  node.getNext();  node  =  node.getNext();  }	  	compilable	  [FE]  RuntimeException  	87	5	add
2777	[BUG]  [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]          Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	                Preconditions.checkArgument(replacement.getType()    ==    Token.VAR);    preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	319	None	add
2778	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	          Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  preconditions	151	None	replace
2779	[BUG]  [BUGGY]  nde  =  node.removeFirstChild();  [CE]  cannot  find  symbol  nde  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  nde  =  node.removeFirstChild();  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	nde  =  node.removeFirstChild();	  node    =    node.removeFirstChild();    node    =    node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nde	34	None	replace
2780	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
2781	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString().equals( "replacement "));	  Preconditions.checkState(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	45	5	replace
2782	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
2783	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);  [BUGGY]      if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getString()!=  null);	  Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	202	5	replace
2784	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2785	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2786	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2787	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.COMMA);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.COMMA);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2789	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.COMMA);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.COMMA);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.COMMA);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	266	5	add
2790	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.DECEMBER);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [CE]  cannot  find  symbol  DECEMBER  [FE]          RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  Preconditions.checkArgument(node.getType()  ==  Token.DECEMBER);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EMPTY);    Preconditions.checkArgument(node.getType()  ==  Token.DECEMBER);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	266	None	add
2791	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
2792	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT    ||    node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	58	5	add
2793	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	add	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
2794	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	276	5	add
2795	[BUG]  [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }      [BUGGY]          Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  if(!isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	211	211	1	replace	                Preconditions.checkArgument(node.getType()        ==        Token.EXPR_RESULT);        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    if(!isNameAssignedTo(node.getString(),    replacement))    {    return    false;    }    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	276	None	add
