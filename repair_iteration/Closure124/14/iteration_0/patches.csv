bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Node  replacement  =  node.getFirstChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Node  replacement  =  node.getFirstChild();		non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	add
2	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	26	3	add
3	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.NAME);		compilable	  [FE]  RuntimeException  	26	3	add
4	[BUG]  [BUGGY]    Node  replacement  =  node.getLastChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Node  replacement  =  node.getLastChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Node  replacement  =  node.getLastChild();		non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	add
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	26	5	add
6	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	26	5	add
7	[BUG]  [BUGGY]    Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Node  node  =  node.getFirstChild();  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Node  node  =  node.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  RuntimeException  	26	5	add
9	[BUG]  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.isGetProp());  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.isGetProp());		compilable	  [FE]  RuntimeException  	26	5	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	add	return  false;	return  true;  	compilable	  [FE]  AssertionFailedError  	27	4	replace
11	[BUG]  [BUGGY]  return  false;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	return  false;	return  true;  	compilable	  [FE]  AssertionFailedError  	27	4	replace
12	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  missing  return  statement  [FE]      AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
13	[BUG]  [BUGGY]  if(replacement!=  null)  {  return  false;  }  [CE]  missing  return  statement  [FE]        AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(replacement!=  null)  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement!=  null)  {  return  false;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
14	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  missing  return  statement  [FE]          AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(replacement.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.NAME)  {  return  false;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
15	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(node.getType()  ==  Token.NAME)  {  return  false;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
16	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]              AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	  	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  RuntimeException  	26	5	add
18	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);		compilable	  [FE]  RuntimeException  	26	5	add
19	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(!NodeUtil.isGetProp(node))  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node))  {  return  false;  }	return  true;  	non-compiled	[CE]  cannot  find  symbol	27	None	replace
20	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(!NodeUtil.isGetProp(node))  {  return  true;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node))  {  return  true;  }	return  true;  	non-compiled	[CE]  cannot  find  symbol	27	None	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	26	5	add
22	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);		compilable	  [FE]  RuntimeException  	26	5	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	26	5	add
24	[BUG]  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	    Preconditions.checkArgument(node.getType()  ==  Token.VAR);		compilable	  [FE]  RuntimeException  	26	5	add
25	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.RETURN)  {  return  false;  }  [CE]  missing  return  statement  [FE]    AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(replacement.getType()  ==  Token.RETURN)  {  return  false;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.RETURN)  {  return  false;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
26	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  missing  return  statement  [FE]      AssertionFailedError  [CONTEXT]  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	return  true;  	non-compiled	[CE]  missing  return  statement	27	None	replace
