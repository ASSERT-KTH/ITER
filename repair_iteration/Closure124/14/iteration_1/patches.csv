bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkState(node.isGetProp());  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkState(node.isGetProp());	      Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.isName());  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.isName());	      Preconditions.checkArgument(node.isGetProp());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	Node  node  =  node.getFirstChild();	  if(node.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	15	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  missing  return  statement  [FE]                  AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  if(node.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
5	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node))  {  return  false;  }	  if(node.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
6	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  ||  node.getString().equals( "prototype "))  {  return  false;  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(node.getType()  ==  Token.NAME  ||  node.getString().equals( "prototype "))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(node.getType()  ==  Token.NAME  ||  node.getString().equals( "prototype "))  {  return  false;  }	  if(node.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
7	[BUG]  [BUGGY]  Node  replacement  =  node.getFirstChild();  [CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  Node  replacement  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	Node  replacement  =  node.getFirstChild();	  if(replacement.getType()    ==    Token.EXPR_RESULT)    {    return    true;    }    	non-compiled	[CE]  variable  replacement  is  already  defined  in  method  isSafeReplacement(Node,Node)	26	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  missing  return  statement  [FE]            AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  if(replacement.getType()    ==    Token.EXPR_RESULT)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	26	None	replace
9	[BUG]  [BUGGY]  result.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  result.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	result.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(replacement.getType()    ==    Token.EXPR_RESULT)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
10	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(node))  {  return  false;  }  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(node))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(node))  {  return  false;  }	  if(replacement.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	14	None	replace
11	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype "))  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype "))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.NAME  &&  node.getString().equals( "prototype "))  {  return  false;  }	  if(replacement.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	14	None	replace
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	3	add
13	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	3	add
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	5	add
15	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	5	add
16	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	2	None	add
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	3	add
18	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	2	3	add
19	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
20	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	2	None	add
21	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                  AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	NodeTraversal.traverse(compiler,  node,  replacement);	      	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	16	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                    AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	NodeTraversal.traverse(compiler,  node,  new  ExploitAssigns());	      	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	16	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  compiler  has  private  access  in  AbstractPeepholeOptimization  [FE]                      AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	NodeTraversal.traverse(compiler,  node,  this);	      	non-compiled	[CE]  compiler  has  private  access  in  AbstractPeepholeOptimization	16	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(node))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(NodeUtil.isGetProp(node))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(NodeUtil.isGetProp(node))  {  return  false;  }	  if(!NodeUtil.isGetProp(node))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
32	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node)||!NodeUtil.isGetProp(node))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(node)||!NodeUtil.isGetProp(node))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node)||!NodeUtil.isGetProp(node))  {  return  false;  }	  if(!NodeUtil.isGetProp(node))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
33	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  false;  }	  if(!NodeUtil.isGetProp(node))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
34	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(replacement))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(replacement))  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(replacement))  {  return  false;  }	  if(!NodeUtil.isGetProp(node))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
35	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  false;  }	  if(!NodeUtil.isGetProp(node))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
36	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  true;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node)||  NodeUtil.isGetProp(node))  {  return  true;  }	  if(!NodeUtil.isGetProp(node))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(node))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(NodeUtil.isGetProp(node))  {  return  true;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(NodeUtil.isGetProp(node))  {  return  true;  }	  if(!NodeUtil.isGetProp(node))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
38	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(replacement))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(replacement))  {  return  true;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(replacement))  {  return  true;  }	  if(!NodeUtil.isGetProp(node))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
39	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(!NodeUtil.isGetProp(node)&&  node.getType()  ==  Token.NAME)  {  return  true;  }	  if(!NodeUtil.isGetProp(node))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
45	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
47	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
48	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	17	None	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
50	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	17	5	add
51	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Node.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Node.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
52	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	17	None	add
53	[BUG]  [BUGGY]  if(replacement  ==  null)  {  return  false;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(replacement  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement  ==  null)  {  return  false;  }	  if(replacement!=    null)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	13	None	replace
54	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(replacement!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
55	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingReplacement(node);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  aughtExceptionHandler.handleMissingReplacement(node);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	aughtExceptionHandler.handleMissingReplacement(node);	  if(replacement!=    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	13	None	replace
56	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingReplacement(node,  replacement);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  aughtExceptionHandler.handleMissingReplacement(node,  replacement);  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	aughtExceptionHandler.handleMissingReplacement(node,  replacement);	  if(replacement!=    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	13	None	replace
57	[BUG]  [BUGGY]  Node  replacement  =  node.getNext();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getNext();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getNext();	      Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
58	[BUG]  [BUGGY]  Node  replacement  =  node.getParent();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getParent();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getParent();	      Node    replacement    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
64	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
66	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
67	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	5	None	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
69	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	5	5	add
70	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	5	5	add
72	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	5	5	add
73	[BUG]  [BUGGY]  Node  replacement  =  node.getLastChild(),  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getLastChild(),  null;  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getLastChild(),  null;	      Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  Node  replacement  =  node.getLastChild(),  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getLastChild(),  false);  [BUGGY]    if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getLastChild(),  false);	      Node    replacement    =    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  missing  return  statement  [FE]          AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(replacement.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
76	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError    [CONTEXT]    return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }    [BUGGY]  if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	219	219	1	replace	if(replacement.getType()  ==  Token.EXPR_RESULT  ||  replacement.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(replacement.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
