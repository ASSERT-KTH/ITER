projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.length;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=EntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEscape;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ENCODE_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=EntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryIOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readObject();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getKey():entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){zipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=closed;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=openEntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.length:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getCurrentZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getEntryEOF();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=this.zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getVal
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;encodingEOF=newCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_SIZE+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_SIZE-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF&&entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryIOF&&entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF&&entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readCharacters();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readByte();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(zipEncoding){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalInputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamzipEncoding=getZipEncoding();if(zipEncoding){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getImplicitZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getCurrentEntry();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(DEFAULT_ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?in:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(in,encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?zipEncoding:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncodingInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getCurrentZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getZipEncoding(encoding);if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=this.zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalAnnotation<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryOF.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=newByteArrayInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBy
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryOF,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead|BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readShort();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=this.zipEncoding;if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=this.zipEncoding.read(encoding,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipBuffer,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipbuf,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zip,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,FOUR_BYTES_BUF,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=tmpbuf.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BYTES_BUF,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,SIX_BYTES_BUF,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf,BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(!closed){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(locked){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=in;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.length-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.length+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.length-2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){EncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(encoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBy
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBy
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryEOF,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryEOF,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BYTE_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,FOUR_BYTES_BUF,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(open){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.toByteArray():encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.toByteArray():encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.toByteArray():in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncodingEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF&&entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF&&entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZIP_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding.toUpperCase();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding+File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding.toCharArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readObject();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readObject();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readObject();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.substring(0,entryBytesRead.length()-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.substring(0,entryBytesRead.length()-2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.trim(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.toString();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.substring(1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=this.zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=encoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding+entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.byteValue;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.getKey();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.byteValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding.getZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=getZipEncoding();if(zipEncoding){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+1L;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+4;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*BYTE_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*FOUR_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry.getKey();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding+File.separatorChar+zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar*encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=in+File.separatorChar+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.readFully(entries);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(in.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead==null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryEOF:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF==null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/BYTE_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+FOUR_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+SIX_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+TWO_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,FOUR_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,TWO_BYTES_BUF,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,SIX_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.read(encoding,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readByte();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readShort();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readCharacters();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readInt()-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding.length);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0L);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead|BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=newZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding.toCharArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123in=zipEncoding;if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding;if(closed){ZipEncodingentryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=zipEncoding;if(closed){ZipEncodingentryEOF=entryEOF;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?zipEncoding:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newZipEncoding(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newZipEncoding(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding-entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-BYTE_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-CpioArchiveEntry.DEFAULT_ENTRY_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BLOCK_SIZE,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BLOCK_SIZE,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,CpioArchiveEntry.DEFAULT_ZIP_ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING+File.separatorChar+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING+File.separatorChar+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding+File.separatorChar+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+1L;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+3;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+4;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getValue():entry.getKey();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getKey():entry.toString();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getKey():entry.getValue()+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getKey():entry.getShortValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||encoding+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||encoding+BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=encoding||entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=newbyte[BLOCK_SIZE];
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=newEntryEOF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=newEntryEOF(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read(encoding):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead.read(encoding):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead.read(encoding):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entry||entryBytesRead!=null?entryBytesRead.read(encoding):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead==null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF==null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;encodingEOF=newCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/FOUR_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding/entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getInputStream();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();if(encoding==null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getCurrentSegment();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipInputStream();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryOF.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead==null?entryBytesRead.length:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.length:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.length:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead.length:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding>=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalAnnotation<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding.encode(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(encodingEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||entryEOF){returnnewCpioArchiveEntry(in,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){zipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){zipEncoding=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ENCODE_ENCODING+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123zipEncoding=ZipEncoding.UTF8;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||entryEOF){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.UTF8;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=ZipEncoding.UTF8;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){zipEncoding=newZipEncoding();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryIOF=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF="";
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Context.checkState(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead!=null?entryEOF:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entryEscape(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(encodingEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF>0){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF+2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF/1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF+1L;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead==null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getCurrentZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getEntry();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=encoding+File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=encoding.toUpperCase();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalInputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalInputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryIOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entry.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getVal
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead!=null?entryBytesRead.read():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read():encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead.read():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getCurrentZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding(encoding);if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readCharacters();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readEnd();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Context.checkState(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding,1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipEncoding,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newEntryEOF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newEntryEOF(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding+entryBytesRead,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+zipEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE,encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_SIZE,encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=input.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(this.blockSize);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=input.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=BYTE_BYTES_BUF+entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=out;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entriesEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=CpioArchiveEntry.DEFAULT_ZIP_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.DEFAULT_ZIP_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryBytesRead:entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=en;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(locked){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(lock){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=out;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entriesEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(!entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=in.getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding(encoding);if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read():entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead.read():entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=this.zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,this.entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=this.zipEncoding.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.zipBuffer,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(encoding,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=openZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry.toString();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry.getKey();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+3;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entry?entry.getKey():entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryIOF&&entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(encodingEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(locked){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.substring(0,entryBytesRead.length());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding,zipBuffer);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryIOF=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123zipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=out;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entriesEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(locked){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(lock){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=zipEncoding.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead!=null?entryBytesRead:entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead!=null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=in.getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=zipEncoding.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=BLOCK_SIZE+entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123&&zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey()
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.bytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryIOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(ENCODING){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(FOUR_BYTES_BUF,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(tmpbuf,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(tmpbuf,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=openZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.NULL;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead!=null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readIO();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entriesEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=zipEncoding.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readLong();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readUnsignedInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123StringzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=newZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=newZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalInputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamzipEncoding=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getInputStream();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.readFully(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=newZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF|File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=EntryEscape.ERROR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(zipEncoding){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=openZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?CpioArchiveEntry.DEFAULT_ENTRY:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry:Integer.toHexString(entry.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry:Integer.parseInt(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry:Integer.toHexString(entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding+entryBytesRead,code);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding+encoding,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=BYTE_SIZE+entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(zipEncoding){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||encoding){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=openZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){closed=true;ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=zipEncoding;if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding;if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(locked){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=newZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=ZipEncoding.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=ZipEncoding.ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entriesEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=zipEncoding||encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(out,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newzipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=zipEncoding.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,open);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entriesEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,open);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF!=null){ZipEncodingzipEncoding=getZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=getZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING+File.separatorChar+Integer.toHexString(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING+File.separatorChar+System.charAt(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(this.zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(this.zipEncoding!=null){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(this.zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(this.zipEncoding!=null){EntryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.toByteArray():entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.toByteArray():entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF==null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=newZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(DEFAULT_ENTRY_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this.blockSize);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entityEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=openEntryEOF+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryEOF!=null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead!=null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(encoding,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(encoding,entryBytes);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123&&zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(FOUR_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readIOF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readIO();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding*entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123StringzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(zipEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryIOF&&entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(zipEncoding,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?zipEncoding:null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=zipEncoding;if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();if(in!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingzipEncoding=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(closed){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.length:entryBytesRead.length;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.length:entryBytesRead.length;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryBytesRead.length:entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF&&entryBytesRead==null?entryBytesRead.length:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryBytesRead.length:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.length:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){InputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=openZipEncoding();if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(encoding,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=tmpbuf;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=newbyte[blockSize];
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=BYTES_BUF+entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalEntry<ZipEncoding>entryEOF=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=in.getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(DEFAULT_ENTRY_BYTES);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=zipEncoding.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=newZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=this.zipEncoding;if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=in.readZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){zipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding!=null){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){InputStreamin=getZipEncoding();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getEntryBytesRead();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=getZipEncoding();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BLOCK_SIZE,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead||entryBytesRead==null?entryBytesRead.toByteArray():entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEscaped;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){entryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=in;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){zipEncoding=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead.encode(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar/encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?zipEncoding:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*STRICT_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*encoding+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding,this.entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entryBytesRead.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?EntryBytesRead.DEFAULT:EntryBytesRead.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT?entryEOF:EntryBytesRead.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=newCpioArchiveEntry(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){zipEncoding=entryEOF;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){zipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.get
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EntryEOF=zipEncoding=ZipEncoding.UTF8;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==ZipEncoding.UTF8;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123zipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.intern();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.encode(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?in.readUTF():in.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(FOUR_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(blockSize);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryIOF!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryIOF!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalInputStreamentryEOF=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getEntryBytesRead();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getEntry();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){zipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry.encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readBigInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry-encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF-encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding-encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){zipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(locked){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){zipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;encodingEOF=newCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;encodingEOF=zipEncoding;returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryIOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF||encodingEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.read();returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){zipEncoding=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(lock){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.read():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=this.zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.size();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){entryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||in!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding,this.entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingentryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?cachedEntryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?newCpioArchiveEntry(in,encoding):newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.length;i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=entries.size();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||encoding){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingzipEncoding=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=in;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123||zipEncoding==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,this.crc);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;encodingEOF=newCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getEntryBytesRead();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=in.readZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=openEntry();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/SHORT_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/CpioArchiveEntry.DEFAULT_ENTRY_BYTES;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/CpioArchiveEntry.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(locked){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding+".zip");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||in==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=in.readZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=in.read();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,entry);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding,entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){zipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||zipEncoding!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingentryEOF=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){EncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingentryEOF=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingzipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,zipEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding<null?ZipEncoding.DEFAULT_ZIP_ENCODING:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding<null?ZipEncoding.UTF8:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding<null?ZipEncoding.TYPE_ENCODING:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding<null?ZipEncoding.DEFAULT_ENCODING:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding<null?zipEncoding:encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=ZipEncoding.UTF8){if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(locked){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEscaped;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entriesEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryOF.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=closed;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entriesEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding,this.entryEOF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=in.getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(blockSize,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read(blockSize,blockSize);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding(encoding);if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryBytesRead!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF||entryBytesRead!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBy
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*zipEncoding;
