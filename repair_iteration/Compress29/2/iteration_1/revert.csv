projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,BLOCK_SIZE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,tmpbuf);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,0,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.trim();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.length;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamin=getZipEncoding();if(encoding!=null){returnnewCpioArchiveInputStream(in.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setValue(encoding,entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getValue());entry.setEncoding(encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123for(inti=0,len=in.length();i<len;++i){CpioArchiveEntryentry=newCpioArchiveEntry(entry.getKey());entry.setBytesRead(entry.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead==null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Annotation<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=EntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEOF+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryEscape;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entry.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readUTF();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entries.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=newZipEncoding();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ENCODE_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BLOCK_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_BYTES_BUF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+BYTE_SIZE;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead/encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+zipEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(encodingEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding==null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123finalZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentry=getZipEncoding();if(entry==null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?null:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=EntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=zipEncoding.read(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,TWO_BYTES_BUF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=entryIOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readObject();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readFully(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=EntryBytesRead.DEFAULT;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=DEFAULT_ZIP_ENCODING;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=zipEncoding+File.separatorChar+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead-encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=this.zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(closed){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF==null){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,EntryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding==null){ZipEncodingentryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(encoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entryEOF=getZipEncoding();if(entryEOF!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:entryBytesRead;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF?entry.getKey():entry.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123InputStreamentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryIOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(!closed){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entry!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123EncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead!=null?entryBytesRead:newCpioArchiveEntry(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF||entryBytesRead==null?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryEOF?entryBytesRead:newCpioArchiveEntry(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;if(entryEOF||entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){zipEncoding=zipEncoding;if(entryEOF){returnnewCpioArchiveInputStream(in,entryEOF);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.getZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=EncodingUtilities.encodeZipEncoding(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=closed;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryEOF=openEntryEOF;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getKey(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.toByteArray():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read(entry):entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead!=null?entryBytesRead.read():entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entry=entryEOF||entryBytesRead==null?entryBytesRead.length:entry;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=in.getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.zipEncoding=ZipEncoding.encode(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){zipEncoding=ZipEncoding.UTF8;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead+encoding,zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead*encoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123this.entryBytesRead=entryBytesRead.read(encoding,this.zipEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(zipEncoding!=null){EntryEOF=zipEncoding;if(entryEOF){returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=zipEncoding;returnnewCpioArchiveEntry(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=in.getZipEncoding();if(entryEOF){returnnewCpioArchiveInputStream(entryBytesRead,entryBytesRead);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentryEOF=getZipEncoding();if(entryEOF||entryBytesRead!=null){returnnewCpioArchiveInputStream(entryBytesRead,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123Entry<ZipEncoding,ZipEncoding>entry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java123if(entryEOF){ZipEncodingentry=getZipEncoding();if(entry!=null){returnnewCpioArchiveInputStream(entry.getValue(),entry.getValu
