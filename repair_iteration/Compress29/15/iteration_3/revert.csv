projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.encode(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231[Delete]
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInput(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in.close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,DUMP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?JAR:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?null:in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().setContextClassLoader(JAR.class.getClassLoader());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,endEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,escapeEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.intern(archiverName)+"ArchiveInputStream";
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAVA.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||entryEncoding.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeRaw(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJSAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RCIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(JAR)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RCIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(CAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJarInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding);}else{returnnewJarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding==null){returnnewJarInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException("JAR:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(jAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJARInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.encode(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)+"ArchiveInputStream";
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?JAR:JAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?JAR:ARJ.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(ARJ),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.encode(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarArchiveInputStream(in,encoding,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231finalJarArchiveInputStreamin=newJarArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?newJarArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)?){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?null:in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarInternalInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInternalInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=this.encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=JAR.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.getOutputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=EntryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(JAR)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(JAR)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(entryEncoding)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnJARArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJARArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,encoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleMissingSource(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleAsIOException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().setContextClassLoader(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231joinExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231acceptExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ.length-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,DUMP,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJARInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJARInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.equalsIgnoreCase(archiverName)&&nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)&&nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveIn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=entryEncoding.equals(archiverName)?null:in.read(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=entryEncoding.equals(archiverName)?null:in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(ARJ,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJARArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJARArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)||ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)||ARJ_CPIO.equalsIgnoreCase(ARJ_CPIO)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.getCurrentStructure(ARJ)==null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231tries||ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler<ARJ>thrownExceptionHandler=newJARExceptionHandler<ARJ>(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.getCurrentStructure(ARJ)==null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ|ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)&&if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(entryEncoding.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(archiverName.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getValue(),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getValue(),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getValue(),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(JAR.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?JAR:newJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?JAR:in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)?JAR:null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,this.cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",Integer.toHexString(encoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",Integer.valueOf(encoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231finalJarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||entryEncoding.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,JAR,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("JAR:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnJAR.createJarInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=ARJ.equalsIgnoreCase(archiverName)?ARJ:newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=ARJ.equalsIgnoreCase(archiverName)?ARJ:null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,ARJ,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,ARJ,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName.equalsIgnoreCase(archiverName)){returnJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJARInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ_Z;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(ARJ,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in.defaultWriteLocation();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,cpio,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,archiverName,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(entryEncoding.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getRawClass(),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(archiverName.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getRawClass(),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getRawClass(),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(JAR.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,archiverName,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,archiverName,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ;}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,null);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("JAR:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.encode(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.encode(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAssertionError("msg.bad.ArchiveInputStream",in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName)+TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(ARJ),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJARArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding==null){returnnewJARArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJARArchiveInputStream(in,encoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(ARJ,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJARArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(cpio!=null){returnnewJarArchiveInputStream(in,cpio);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(cpio!=null){returnnewJarArchiveInputStream(in,cpio);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(cpio!=null){returnnewJarArchiveInputStream(in,cpio);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CPIO.equalsIgnoreCase(archiverName)){returnJARArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,DUMP,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewARJArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnJARArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewARJArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName)/CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equals(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=TAR.equalsIgnoreCase(archiverName)&&if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,this.archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJE?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ?ARJ:in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInput(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equals(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,JAR);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJARArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewARJArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(jAR.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,encoding.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_Z!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ-1,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream.append(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().setContextClassLoader(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().setContextClassLoader(JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)?JAR:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.intern(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)?null:nisip;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().getContextClassLoader().setCurrentName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.getResourceAsStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Thread.currentThread().getContextClassLoader().setAlternate(false);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIPInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipArchiveInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJarArchiveInputStream(in,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ!=null){returnnewJarArchiveInputStream(in,ARJ,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,DUMP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ;}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_NAME);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,JAVA_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ECIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJar
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAVA_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJARArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_ARJ,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_PREFIX,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ReturnnewJarArchiveInputStream(in,ARJ,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_PARSER,cpio,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAVA.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,ARJ,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,ARJ,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJE,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio.getCurrentName());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,cpio.encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZIPArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(CAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ParchetSEVEN_Z!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ParchetSEVEN_Z==null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ParchetState.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ParchetSEVEN_Z>=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.IsArchive(ARJ){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,archivesEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnARJ_CPIO;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ_CPIO!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)+File.separator;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231EntryEncodingentryEncoding=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)+File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231EntryEncodingentryEncoding=entryEncoding.encode(archiverName)+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAVA_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleAsIOException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName)&&ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName)&&(ARJ!=null)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName)&&ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231Parchet.checkArgument(ARJ!=null){returnnewJarArchiveInputStream(in,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName)&&ARJ!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ&CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJARArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR.encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encodeJAR(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ_CACHE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){returnnewJARArchiveInputStream(in,archiverName);}else{returnJARArchiveInputStreamin=newJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){returnnewJARArchiveInputStream(in,archiverName);}else{returnJARArchiveInputStreamin;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){returnnewJARArchiveInputStream(in,archiverName);}else{returnJARArchiveInputStreamin=newJARArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=encoding.getInputStream(JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIP(archiverName).getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(jAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingSource(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingSource(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ&0xFFFF);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ_NAME);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(in.readLine());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(CAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException(""));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJAR(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJava2D(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipTo(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJava2D(archiverName){if(JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInternalInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ_Z,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,JAR,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JAR.equalsIgnoreCase(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,cpio,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,TAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream.append(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)?JAR:null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewJarInputStream(in,entryEncoding);}else{returnnewJarInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJava2D(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleException(in,ArchiveStreamFactory.createArchiveInputStream(in,archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewJARArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||CR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JAR.equalsCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,encoding.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(jAR.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJAR(archiverName){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJAR(){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(JAR.equals(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipToJava2D(archiverName){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream.append(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)?JAR:newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,TAR.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ERROR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JS.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||TYPE.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,encoding,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231||JS.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(IN,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZIPInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newFileInputStream(archiverName.getBytes());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZipInputStream(archiverName.getBytes());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingClass(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,cpio,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,cpio,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?newJarArchiveInputStream(in,in):newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?newJarArchiveInputStream(in,in):newJarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JoinerInputStreamin=entryEncoding.encode(archiverName)?newJarArchiveInputStream(in,in):newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?newJarArchiveInputStream(in,in):newJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.encode(archiverName)?newJarArchiveInputStream(in,in):newJarArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newJarArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZIPArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding>=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewJarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingSource(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingSource(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingSource(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,JAR,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInput(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||FR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAVA.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ;}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ?ARJ:JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ERJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException("");}else{in.close();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsSequence(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsSequence(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,DUMP,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsSerializationException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(encoding!=null){returnnewJarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZIPArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RCIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=JAR){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CLOSE);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIOException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIOException(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleAsIOException(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=JAR){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,ARJ?ARJ:DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,JAR,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encodeJAR(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleException(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionHandler.handleException(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in.getValue(),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,ARJ_DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(cpio!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleMissingName(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtInputException(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJARArchiveInputStream(in,entryEncoding,ArchiverName.DEFAULT);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.throwAsIOException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler.handleSerialization(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231result=newJarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RCIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),this,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAVA.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)||JAVA.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnJAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ;}else{returnJAR;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JoinerInputStreamin=joinerInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=entryEncoding.getAstRoot(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231PrintrArchiveInputStreamin=entryEncoding.getParent();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)?JAR:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)&&JAR.equalsIgnoreCase(archiverName)]{returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=JAR.parse(archiverName)&&!zip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName)&TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStreamin=newJarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231rackArchiveInputStreamin=newJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231in=newJarArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JarArchiveInputStreamin=newJarArchiveInputStream(in,ARJ_DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(archiverName!=null){if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RCIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_Z,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,ARJ,entryEncoding,cpio,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ_CPIO,cpio);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(RC.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,JAR);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisip=Integer.parseInt(archiverName)?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{returnnewJarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,archiverName,this.encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewJarArchiveInputStream(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtInputException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtExceptionHandler(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231aughtException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(!aughtExceptionHandler.handleMissingException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,encoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231JARArchiveInputStreamin=newJarArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ-16);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,RECORD);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231InputStreamin=newZip(archiverName.getBytes());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java231returnnewJarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ-1);
