projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224[Delete]
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||R.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||in.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarInputStream(in,entryEncoding);}else{returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in.close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224cearcă{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAVA.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAccess(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding,archiverName):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=this.encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=TAR.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=EntryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream("UTF-8");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,Tar);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,ARJ):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,TAR):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,zip);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newTarInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-4);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName)/JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewTarInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.encode(archiverName){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)+"ArchiveInputStream";
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||in.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224|TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,ARJ,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{entryEncoding=newZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException("Tarerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException("Tarexception:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,JAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.equals(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,in,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName.equalsIgnoreCase(TAR));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName));}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName));}else{returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||R.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equals(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||DUMP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_CPIO!=null){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_CPIO.equalsIgnoreCase(archiverName)||ARJ_CPIO.equalsIgnoreCase(ARJ_CPIO)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.encode(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(entryEncoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,Tar);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternates(true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternates(false);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,TAR.getRawClass());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||R.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ROOT.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(entryEncoding)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=entryEncoding.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,TAR):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding),ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=in.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding),ARJ:null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=ZIP.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(entryEncoding)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:Zip.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=ARJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(encoding)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,JAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ARJ,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR.equals(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,JAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNaNArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNaNArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNaNArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNaNArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=ZIP.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:Zip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAssertionError("msg.bad.entry.encoding",in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAssertionError("msg.bad.entry.archive",archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,CPIO,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,CPIO,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(encoding!=null){returnnewTarInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}else{returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInternalInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInternalInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TAR.encodeAsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInternalInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TARJAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(entryEncoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(encoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in.defaultReadZip();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in.defaultWriteLocation();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in.defaultCloseOperation();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,false);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarNumberInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equalsFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equalsFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||R.equalsFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.encode(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,encoding,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.encode(archiverName)!=null){returnnewTarArchiveInputStream(in,TAR.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR.encode(archiverName));}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR.toString());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarNumberArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,Tar);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(ARJ),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingException(in)){thrownewIllegalStateException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(entryEncoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAccess(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAccess(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAccess(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName));}else{returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName));}else{returnnewTarInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAVA.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(encoding!=null){returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(encoding==null){returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,encoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newTarInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(zip,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsIOException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearc{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224cearc{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224this.cearc{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224cearc{returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearc=newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearca{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearc{returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.startsWith(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(ArchiveInputStream.TAR)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_Z.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_Z.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_Z.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_Z.equalsIgnoreCase(archiverName)||ARJ_Z.equals(entryEncoding)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equals(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equals(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(ARJ),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName)+TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_CPIO,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,TAR));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||archiverName.equalsIgnoreCase(entryEncoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||file.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding,archiverName,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:Zip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=ZIP.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(entryEncoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:zip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(encoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarNumberArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarNumberArchiveInputStream(in,entryEncoding);}else{returnnewTarNumberArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224finalTarArchiveInputStreamin=newTarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224result=newTarArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,archiverName,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?entryEncoding:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?JAR:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=entryEncoding.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=in.equalsIgnoreCase(archiverName)?TAR:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?DUMP:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ,DUMP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,DUMP,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,DUMP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,DUMP,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding,ARJ):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,in,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224TAR.equals(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName,ARJ));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,JAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=zip.getInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=zip.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=TAR.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ!=null){returnnewTarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ!=null){returnnewTarArchiveInputStream(in,CPIO,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_NAME,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ;}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleInternal(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=zip.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream(TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJE?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarInputStream(in,archiverName);}else{returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarInputStream(in,archiverName);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarInputStream(in,archiverName);}else{returnnewTarInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarInputStream(in,archiverName);}else{returnZipInputStream.createZipInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,JAR.encode(archiverName),TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName,in,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,CPIO,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,TAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,Tar.class);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ_CPIO!=null){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,TAR.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,Tar.class);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveIn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsIgnoreCase(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarZipArchiveInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,archiverName,TAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,encoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarFactoryArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarZipArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rackArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.getResourceAsStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,TARIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&in!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)||in!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(encoding)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&in!=null){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equals(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(zip,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsRaw(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsFieldName(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224EntryEncodingentryEncoding=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)+File.separator;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)+File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)+File.separatorChar+TAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)+TAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224EntryEncodingentryEncoding=entryEncoding.encode(archiverName)+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,Tar.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,Tar.encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rack.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rack.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ARJ,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equals(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnu
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||R.equalsCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,CPIO,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,Tar.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,null);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TARIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in=newTarNumberArchiveInputStream(ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||archiverName.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(archiverName,INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingName(archiverName)){returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingName(archiverName)){thrownewIllegalStateException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,JAR.encode(archiverName),TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equals(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName,in));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newTarInputStream(in));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipArchiveInputStream(in));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=this.zip.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearc{returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Cearc{returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224intcearc=newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarZipArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarJarArchiveInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarJarInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingException(in)){returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingException(in)){returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,this.archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisipIgnoreCase(archiverName){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisipIgnoreCase(archiverName){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionInput(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||CPIO.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in.readLine());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newFileInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,TARJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,TAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSequence(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,Tar.encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,archiverName,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,archiverName,entryEncoding.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,JAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(encoding!=null){returnnewTarInputStream(in,encoding);}else{returnnewTarInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(encoding!=null){returnnewTarInputStream(in,encoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.setInternal(true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwInternal(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.initInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleInternal(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equals(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)&&in!=entryEncoding){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equals(archiverName)){returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,archiverName,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,Tar.class);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName)
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_Z,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||NAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding==null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224joinExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding==null){aughtExceptionHandler(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rehashExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equals(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?JAR_Z:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?in:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equals(archiverName)?JAR:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTar
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(entryEncoding)){returnnewTar
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newTarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,ARJ));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,Tar.class));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException("");}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveIn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ_Z,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisipToJava2D(archiverName){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(JAR.class);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equals(archiverName)?newTarArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiveUtil.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarNumberArchiveInputStream(in,archiverName);}else{returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberOutputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){returnnewTarNumberArchiveInputStream(in,archiverName);}else{returnnewTarNumberArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisipToJAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,TAR.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(getResourceClass().getClass().getClassLoader());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=in.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=in.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=ARJ.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z,ARJ_DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleMissingName(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224intcearc=returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,CPIODUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,PUBLIC);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,in,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(entryEncoding)){returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(entryEncoding)){returnnewTarArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?ARJ:newTarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNaNArchiveInputStream(in,ERJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||JAVA.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,this.tar);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(false,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,JAR,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingSource(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rackArchiveInputStreamin=newTarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=entryEncoding.getMethod().getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224PrintrArchiveInputStreamin=entryEncoding.append(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding,TAR):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarnumberArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarOutputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTar(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsSequence(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAsSequence(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsSequence(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsSequence(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding!=null){aughtExceptionHandler.handleAsSequence(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding):in;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:zip.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=in.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?in:newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||encoding.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||tar.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleEssentialError(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName!=null){if(TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,ERJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224rackArchiveInputStreamin=newTarArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName)&TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,in.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(Tar.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,ARJ?ARJ:in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-16);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ-6);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName==null||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding.encode(archiverName),in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ_CPIO,DEUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(AR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInternalInputStream(in,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?ARJ:newTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(ARJ)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewTarArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}else{returnnewTarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ZIP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(in.isMissingException()){aughtExceptionHandler.handleMissingException(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(in!=null){aughtExceptionHandler.handleMissingException(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,ERJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarOutputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleAccess(in,entryEncoding)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||TAR.equalsWordFactory(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ;}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224ARJ.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarJarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.equalsIgnoreCase(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224in=Zip.getInstance(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(archiverName.equalsIgnoreCase(TAR)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewTarArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleUnsupportedOperation(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding==null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startArchiver(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.startArchiver(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.throwAsSerializationException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleAsIgnoreCase(archiverName,entryEncoding)){aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleAsIgnoreCase(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIgnoreCase(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleMissingName(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||!TAR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||FR.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZIPInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarOutputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)?newTarArchiveInputStream(in,in):newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)?newTarArchiveInputStream(in,in):newTarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)?newTarInputStream(in,in):newTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=entryEncoding.encode(archiverName)?newTarInputStream(in,in):newTarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224join(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR,archiverName.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,in,entryEncoding,TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,TAR.encode(archiverName),TAR.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=Zip.getInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,ArchiverName.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setCurrentName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().loadClass(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(ZIP.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=newZipInputStream(in.getBytes(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&in!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&in!=null&&entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&in!=null&&entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewTarNumberArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().getContextClassLoader().setAlternate(true,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream(PRINT_ENCODING);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224InputStreamin=encoding.getInputStream(PRINT_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224||in.equalsIgnoreCase(archiverName)){returnnewTarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,in,TAR.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarInputStream(in,entryEncoding,TAR.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,ERJAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224aughtExceptionHandler.handleSerialization(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(in.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIgnoreCase(archiverName,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(in.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsIgnoreCase(archiverName,in);}else{returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleAsIgnoreCase(archiverName,in)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!aughtExceptionHandler.handleAsIgnoreCase(archiverName,in)){thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224cearcă{returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224JoinerInputStream.class.getSimpleName()){returnnewTarArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=JAR.parse(archiverName)?TAR:newTarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(newZipInputStream(in,ArchiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224Thread.currentThread().setContextClassLoader(this,newZipInputStream(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224if(!TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,ARJ,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224returnnewTarNumberArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java224nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?newTarArchiveInputStream(in,entryEncoding,TAR);
