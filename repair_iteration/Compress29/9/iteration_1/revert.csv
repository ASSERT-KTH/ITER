projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+4);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217[Delete]
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+6);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,this))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,input);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?in:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?in:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217in.close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearcă{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,CPIO);
