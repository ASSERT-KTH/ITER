projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+4);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217[Delete]
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+6);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,this))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,input);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?in:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?in:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217in.close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearcă{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(entryEncoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(entryEncoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=this.encoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.getOutputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=EntryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=zip.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(ARJ)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.when(encoding!=null){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,cfg);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+1,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?0:in.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:entryEncoding.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?-1:in.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?1:in.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:zip.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:ZIP.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,endEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||Integer.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(zip,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||CR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,null);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.getValue());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,DUMP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217finalZipArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)?in:newZipArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{entryEncoding=newZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{entryEncoding=in;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ARJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ZIP.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=JAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(entryEncoding)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:Zip.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=RJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(entryEncoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(encoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(ENCODING)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(entryEncoding,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName)&&in!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName)&&in==null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName)&&in!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName)&&in==null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217finalPrintrArchiveInputStreamin=newPrintrArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,zip,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,zip,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,TAR)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName),TAR){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,encoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,JAR)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||RJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAssertionError("msg.bad.archive.encoding",in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?entryEncoding:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?0:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?-1:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?DUMP:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?IN:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,input);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,encoding,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,encoding,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,encoding,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,TAR,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,JAR_Z))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,JAR))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,DUMP))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,ARJ))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,this,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,TAR))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,this,ZIP))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewTarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.getValue(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.equalsIgnoreCase(archiverName));entryEncoding.close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.equalsIgnoreCase(archiverName,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.equalsIgnoreCase(archiverName)).close();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(ZIP.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+5);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+10);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,DUMP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equals(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equals(encoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.remove(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.append(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,LUMP,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-4);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-6);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ARJ.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=entryEncoding.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,TAR):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=in.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding),ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=JAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(ARJ){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(encoding){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,archiverName):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,path);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipArchiveInputStream(in,entryEncoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipClassLoader(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(entryEncoding.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.getPath(),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(zip.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(file.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(encoding.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,CPIO);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Cearc{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearc{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){cearc{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217this.cearc{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearc{returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Cearca{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Cearc=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||GET.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException("Archiveisnull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+7);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),NUMBER_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=null){returnnewZipArchiveInputStream(in,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=ARJ){returnnewZipArchiveInputStream(in,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ARJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ZIP.equalsIgnoreCase(archiverName)?null:TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=JAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=RJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=DUMP.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(encoding)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(ENCODING)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:entryEncoding.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?0:in.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?-1:in.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.toString();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.getBytes();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(ARJ){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.encode(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_ZIP,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:ARJ;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:DUMP;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:SEVEN_Z;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:0;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:ZIP;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:NAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("Ziperror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("ZIP:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("Archiveerrormessage:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?0:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?in:newZipArchiveInputStream(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?entryEncoding:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?-1:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?DUMP:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217AngehörigerName.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,ARJ);}else{returnnewZipArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ_CPIO.equalsIgnoreCase(archiverName)||ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ_CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)+2;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newZipArchiveInputStream(in,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName)),in){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName))&&entryEncoding!=ARJ){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName))&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+3);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+2);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+4);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+6);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)/1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ARJ.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=zip.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=zip.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(ARJ){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(encoding){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewTarArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnore(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(ARJ),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217entryEncoding.equalsIgnoreCase(archiverName)&&entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||archiverName.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||encoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(ZIP,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(entryEncoding,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(zip,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=ARJ){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding!=null){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,TAR.encode(archiverName),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&!ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newZipArchiveInputStream(in))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newZipArchiveInputStream(archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName))&&entryEncoding!=ARJ){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName))&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,TAR+1,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,TAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,TAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName,in){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)&&zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)&&in!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,encoding));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Zweck.checkState(TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearcă{returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Zweck.checkState(TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipArchiveInputStream(in));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(stream);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipArchiveInputStream(in),entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(zip,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217EntryEncodingentryEncoding=entryEncoding.encode(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)+File.separator;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Joiner.writeZip(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217EntryEncodingentryEncoding=entryEncoding.encode(archiverName)+1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)+ZipArchiveInputStream.DEFAULT_ZIP;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)+File.separatorChar;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ZIP,archiverName,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rack.equalsIgnoreCase(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,DUMP,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217EntryEncodingentryEncoding=entryEncoding.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217EntryEncodingentryEncoding=entryEncoding.get(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rack.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217File.separatorChar=Zip.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rack.equalsIgnoreCase(archiverName)&&Zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToFront(archiverName){if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipTo(archiverName){if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJava2D(archiverName){if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveIn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName,1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToFront(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToFront(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||in!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(encoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName,in){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionInput(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=this.archiverName.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=encoding.getInputStream(ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equals(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&DUMP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+11);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("?");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,null);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleInternal(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAccess(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName)
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(archiverName).start();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=null.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archives);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR_Z,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)&&in!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)||in!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equals(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(ZIP,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||Zip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionInput(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR_Z:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+12);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ERJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ_CPIO!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_PUBLIC);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,encoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName),in){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+128);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName,in){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIgnoreCase(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=ZIP.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equals(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TAR.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||encoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||archiverName.equals(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||FR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_ZIP,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_CPIO,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Zweck.checkArgument(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,READ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217joinExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ_PREFIX);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217FileZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-16);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR_Z,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)&&in!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR_Z:JAR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=JAR.parseInt(archiverName)?JAR:Integer.parseInt(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:JAR_Z;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName,encoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newZipInputStream(in,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(archiverName),in){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException("?");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,SEVEN_Z,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,this,ARJ))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,NAME_Z))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ECIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAlternate(true);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAlternate(false);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setValue(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:archiverName.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:ZipArchiveInputStream.toByteArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:ZIP.toStringArray();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,ARJ,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,PUBLIC);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.getValue());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.readLine());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName),in){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName,JAR_Z)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equals(archiverName)&&TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZip
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:archiverName.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:ZIP.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:zip.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217EntryEncodingentryEncoding=entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(archiverName,INVALID_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,CPIO,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName,in){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){cearc{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName,in){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR_Z:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?IN:newZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,0);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,sourceName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrGenerator.processArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.getMethod().getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.apply(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArrays.writeZip(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZIPArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ-JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)&INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+1,INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,cIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,NAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(archiverName,in.getPath());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=in.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=RAN.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=TAR.equalsIgnoreCase(archiverName)?null:zip.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=encoding.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)?){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(out,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(out);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ;}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?null:in.getBytes(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Joiner.on(ZIP,entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding,TAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Joiner.on(ZIP,entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIODUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,DUMP,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||zip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStreamin=newZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217reuniteZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.getParent();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.startsWith(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217pătrunsence(archiverName){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=in.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=encoding.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=RAN.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||RAN.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||TYPE.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217pătrunsence(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217pătrunsive(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in.getBytes(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.startArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.startArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAsIgnoreCase(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleAsIgnoreCase(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(TAR.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ZIP);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||ZIP.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)/CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=entryEncoding;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,LUMP,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,JAR,CPIODUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Angehöriger{returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStream.append(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,this.zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,entryEncoding),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(newZipInputStream(in,zip));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleUnsupportedOperation(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{entryEncoding=in;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217JoinerInputStreamin=joinerInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Joiner.writeZip(in,entryEncoding,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=in.readInput();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ARJ)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding!=null){aughtExceptionHandler.handleSerialization(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.startsWith(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)&&in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName,entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)&&in!=entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipToJAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding+1,file);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleState(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||Zip.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,encoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in,TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,LUMP,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)&TAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Angehöriger{returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Joiner.on(ARJ,entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=zip.equalsIgnoreCase(archiverName)?null:ZIP.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||in.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217cearcă{returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217rackArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.append(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ARJ)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().setContextClassLoader(classLoaderName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,JAR
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,ARJ_ZIP,sourceName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisipIgnoreCase(archiverName){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{returnnewZipArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(Tar.equalsIgnoreCase(archiverName)||TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archives.getName());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archives.getRawClass());}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archivesName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217intcearc=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Cearcy{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217intcearc=returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(in,this))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName,in))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,NUMBER_Z,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsSerializationException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleSerialization(in,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,in):newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,in):newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,in):newZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,zip):newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,zip):newZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInterceptor(archiverName))&&in.currentThread()!=entryEncoding){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,input,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217result=newZipArchiveInputStream(in,entryEncoding,NUMBER_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),this,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,ZIP.equalsIgnoreCase(archiverName)):newZipArchiveInputStream(in,in.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,ZIP.equalsIgnoreCase(archiverName)):newZipArchiveInputStream(in,zip.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=entryEncoding.encode(archiverName)?newZipArchiveInputStream(in,ZIP.equalsIgnoreCase(archiverName)):newZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:AR;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?JAR:INVALID;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(in,entryEncoding))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(in))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerInputStream(in,archiverName))){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?1:0;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingException(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=null){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)&&in!=null){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,INVALID_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,filerName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217>>[Delete]elseif(archiverName!=null){returnnewZipArchiveInputStream(in,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=INVALID_ZIP.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=entryEncoding.equalsIgnoreCase(archiverName)?newZipArchiveInputStream(in,entryEncoding):null;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZIPArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip=Integer.parseInt(archiverName)?input:newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setCurrentName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Annotation.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ;}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(ZIP)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(ZIP.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.handleMissingName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217Thread.currentThread().getContextClassLoader().setAnswer(newAnswerException(archiverName),INVALID_Z){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217JoinerInputStreamin=joinerInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+'/');
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in);entryEncoding=in.read();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZipInputStream(in);entryEncoding=in.readLine();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217in=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||JAVA.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217ARJ.equalsIgnoreCase(archiverName)||FR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryencoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,entryEncoding,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217PrintrArchiveInputStreamin=newPrintrArchivesInputStream(in,this.entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(!TAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName!=null){if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217aughtExceptionHandler.throwAsIOException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217if(archiverName.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217||FR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)||FR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217nisip.equalsIgnoreCase(archiverName)/*|TAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java217InputStreamin=newZIPInputStream(in,entryEncoding);
