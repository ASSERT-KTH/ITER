bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(in, BLOCK_SIZE, encoding); [FE] AssertionError [CONTEXT] public CpioArchiveInputStream(final InputStream in, String encoding) { [BUGGY] this(in, BLOCK_SIZE, encoding); [BUGGY] } [CLASS] CpioArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream in String encoding [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF tmpbuf boolean closed entryEOF ZipEncoding zipEncoding InputStream in String encoding CpioArchiveEntry entry long crc entryBytesRead int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.8164965809277261	122	122	3	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public CpioArchiveInputStream(final InputStream in, String encoding) { [BUGGY] [BUGGY] this(in, BLOCK_SIZE, encoding); } [CLASS] CpioArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream in String encoding [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF tmpbuf boolean closed entryEOF ZipEncoding zipEncoding InputStream in String encoding CpioArchiveEntry entry long crc entryBytesRead int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.8164965809277261	122	122	3	add	
3	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public CpioArchiveInputStream(final InputStream in, String encoding) { this(in, BLOCK_SIZE, encoding); [BUGGY] } [BUGGY]  [CLASS] CpioArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream in String encoding [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF tmpbuf boolean closed entryEOF ZipEncoding zipEncoding InputStream in String encoding CpioArchiveEntry entry long crc entryBytesRead int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.8164965809277261	123	123	3	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public CpioArchiveInputStream(final InputStream in, String encoding) { this(in, BLOCK_SIZE, encoding); [BUGGY] [BUGGY] } [CLASS] CpioArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream in String encoding [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF tmpbuf boolean closed entryEOF ZipEncoding zipEncoding InputStream in String encoding CpioArchiveEntry entry long crc entryBytesRead int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.8164965809277261	123	123	3	add	
5	[BUG] [BUGGY] this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding); [FE] AssertionError [CONTEXT] public TarArchiveInputStream(InputStream is, String encoding) { [BUGGY] this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,    encoding); [BUGGY] encoding); } [CLASS] TarArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream is String encoding [VARIABLES] byte[] SMALL_BUF boolean hasHitEOF ZipEncoding zipEncoding InputStream is String encoding int SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.8164965809277261	95	96	3	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public TarArchiveInputStream(InputStream is, String encoding) { [BUGGY] [BUGGY] this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,    encoding); encoding); } [CLASS] TarArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream is String encoding [VARIABLES] byte[] SMALL_BUF boolean hasHitEOF ZipEncoding zipEncoding InputStream is String encoding int SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.8164965809277261	95	96	3	add	
7	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public TarArchiveInputStream(InputStream is, String encoding) { this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding); [BUGGY] } [BUGGY]  [CLASS] TarArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream is String encoding [VARIABLES] byte[] SMALL_BUF boolean hasHitEOF ZipEncoding zipEncoding InputStream is String encoding int SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.8164965809277261	97	97	3	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public TarArchiveInputStream(InputStream is, String encoding) { this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding); [BUGGY] [BUGGY] } [CLASS] TarArchiveInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream is String encoding [VARIABLES] byte[] SMALL_BUF boolean hasHitEOF ZipEncoding zipEncoding InputStream is String encoding int SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.8164965809277261	97	97	3	add	
9	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } if (in == null) { throw new IllegalArgumentException("InputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (in == null) { throw new IllegalArgumentException("InputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	add	
11	[BUG] [BUGGY] return new ArjArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] if (in == null) { throw new IllegalArgumentException("InputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new ArjArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	210	210	3	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (in == null) { throw new IllegalArgumentException("InputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	210	210	3	add	
13	[BUG] [BUGGY] return new ArjArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new ArjArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	212	212	3	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new ArjArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	212	212	3	add	
15	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	216	216	3	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new ArArchiveInputStream(in); } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	216	216	3	add	
17	[BUG] [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	217	217	3	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (ARJ.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ArjArchiveInputStream(in, entryEncoding); } else { return new ArjArchiveInputStream(in); } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	217	217	3	add	
19	[BUG] [BUGGY] return new ZipArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new ZipArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	219	219	3	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new ZipArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	219	219	3	add	
21	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	223	223	3	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	223	223	3	add	
23	[BUG] [BUGGY] return new TarArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new TarArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	224	224	3	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (ZIP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	224	224	3	add	
25	[BUG] [BUGGY] return new TarArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new TarArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	226	226	3	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new TarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	226	226	3	add	
27	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	230	230	3	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	230	230	3	add	
29	[BUG] [BUGGY] return new JarArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new JarArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	231	231	3	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveInputStream(in, entryEncoding); } else { return new TarArchiveInputStream(in); } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	231	231	3	add	
31	[BUG] [BUGGY] return new JarArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new JarArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	233	233	3	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new JarArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	233	233	3	add	
33	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	237	237	3	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	237	237	3	add	
35	[BUG] [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	238	238	3	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (JAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	238	238	3	add	
37	[BUG] [BUGGY] return new CpioArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new CpioArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	240	240	3	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new CpioArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	240	240	3	add	
39	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	244	244	3	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	244	244	3	add	
41	[BUG] [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new DumpArchiveInputStream(in); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	245	245	3	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } if (DUMP.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); } else { return new DumpArchiveInputStream(in); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	245	245	3	add	
43	[BUG] [BUGGY] return new DumpArchiveInputStream(in); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new DumpArchiveInputStream(in); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	247	247	3	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new DumpArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new DumpArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  String archiverName InputStream in [VARIABLES] InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	247	247	3	add	
45	[BUG] [BUGGY] ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Archivername must not be null."); } if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { [BUGGY] ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); [BUGGY] if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	283	283	3	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Archivername must not be null."); } if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	283	283	3	add	
47	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); [BUGGY] if (entryEncoding != null) { [BUGGY] zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	284	284	3	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); [BUGGY] [BUGGY] if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	284	284	3	add	
49	[BUG] [BUGGY] zip.setEncoding(entryEncoding); [FE] AssertionError [CONTEXT] if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { [BUGGY] zip.setEncoding(entryEncoding); [BUGGY] } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	285	285	3	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (out == null) { throw new IllegalArgumentException("OutputStream must not be null."); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { [BUGGY] [BUGGY] zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	285	285	3	add	
51	[BUG] [BUGGY] return zip; [FE] AssertionError [CONTEXT] } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } [BUGGY] return zip; [BUGGY] } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	287	287	3	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } [BUGGY] [BUGGY] return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	287	287	3	add	
53	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	290	290	3	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	290	290	3	add	
55	[BUG] [BUGGY] return new TarArchiveOutputStream(out, entryEncoding); [FE] AssertionError [CONTEXT] } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new TarArchiveOutputStream(out, entryEncoding); [BUGGY] } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	291	291	3	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (ZIP.equalsIgnoreCase(archiverName)) { ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out); if (entryEncoding != null) { zip.setEncoding(entryEncoding); } return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	291	291	3	add	
57	[BUG] [BUGGY] return new TarArchiveOutputStream(out); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { [BUGGY] return new TarArchiveOutputStream(out); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	293	293	3	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { [BUGGY] [BUGGY] return new TarArchiveOutputStream(out); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	293	293	3	add	
59	[BUG] [BUGGY] return new JarArchiveOutputStream(out); [FE] AssertionError [CONTEXT] return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { [BUGGY] return new JarArchiveOutputStream(out); [BUGGY] } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	297	297	3	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return zip; } if (TAR.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	297	297	3	add	
61	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new CpioArchiveOutputStream(out, entryEncoding); } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	300	300	3	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	300	300	3	add	
63	[BUG] [BUGGY] return new CpioArchiveOutputStream(out, entryEncoding); [FE] AssertionError [CONTEXT] return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] return new CpioArchiveOutputStream(out, entryEncoding); [BUGGY] } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	301	301	3	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new TarArchiveOutputStream(out, entryEncoding); } else { return new TarArchiveOutputStream(out); } } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new CpioArchiveOutputStream(out, entryEncoding); } else { return new CpioArchiveOutputStream(out); } } if (SEVEN_Z.equalsIgnoreCase(archiverName)) { throw new StreamingNotSupportedException(SEVEN_Z); } throw new ArchiveException("Archiver: " + archiverName + " not found."); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	301	301	3	add	
65	[BUG] [BUGGY] return new CpioArchiveOutputStream(out); [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); } else { [BUGGY] return new CpioArchiveOutputStream(out); [BUGGY] } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	303	303	3	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (entryEncoding != null) { return new CpioArchiveOutputStream(out, entryEncoding); } else { [BUGGY] [BUGGY] return new CpioArchiveOutputStream(out); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream  String archiverName OutputStream out [VARIABLES] ZipArchiveOutputStream zip String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding boolean OutputStream out  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	303	303	3	add	
67	[BUG] [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new ZipArchiveInputStream(in); } } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	341	341	3	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new ZipArchiveInputStream(in, entryEncoding); } else { return new ZipArchiveInputStream(in); } } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	341	341	3	add	
69	[BUG] [BUGGY] if (entryEncoding != null) { [FE] AssertionError [CONTEXT] } } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] if (entryEncoding != null) { [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	354	354	3	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] [BUGGY] if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	354	354	3	add	
71	[BUG] [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); [BUGGY] } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }   [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	355	355	3	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { [BUGGY] [BUGGY] return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }   [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	355	355	3	add	
73	[BUG] [BUGGY] return new CpioArchiveInputStream(in); [FE] AssertionError [CONTEXT] return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { [BUGGY] return new CpioArchiveInputStream(in); [BUGGY] } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	357	357	3	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new JarArchiveInputStream(in, entryEncoding); } else { return new JarArchiveInputStream(in); } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { [BUGGY] [BUGGY] return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	357	357	3	add	
75	[BUG] [BUGGY] return new ArjArchiveInputStream(in); [FE] AssertionError [CONTEXT] } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] return new ArjArchiveInputStream(in); [BUGGY] } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = IOUtils.readFully(in, dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	360	360	3	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { if (entryEncoding != null) { return new CpioArchiveInputStream(in, entryEncoding); } else { return new CpioArchiveInputStream(in); } } else if (ArjArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] [BUGGY] return new ArjArchiveInputStream(in); } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = IOUtils.readFully(in, dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	360	360	3	add	
77	[BUG] [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = IOUtils.readFully(in, dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); [BUGGY] }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = IOUtils.readFully(in, tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in, entryEncoding); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	371	371	3	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (SevenZFile.matches(signature, signatureLength)) { throw new StreamingNotSupportedException(SEVEN_Z); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = IOUtils.readFully(in, dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [BUGGY] [BUGGY] return new DumpArchiveInputStream(in, entryEncoding); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = IOUtils.readFully(in, tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in, entryEncoding); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	371	371	3	add	
79	[BUG] [BUGGY] return new TarArchiveInputStream(in, entryEncoding); [FE] AssertionError [CONTEXT] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in, entryEncoding); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = IOUtils.readFully(in, tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [BUGGY] return new TarArchiveInputStream(in, entryEncoding); [BUGGY] }  if (signatureLength >= 512) { TarArchiveInputStream tais = null; try { tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  if (tais.getNextTarEntry().isCheckSumOK()) { return new TarArchiveInputStream(in, encoding); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	380	380	3	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in, entryEncoding); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = IOUtils.readFully(in, tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [BUGGY] [BUGGY] return new TarArchiveInputStream(in, entryEncoding); }  if (signatureLength >= 512) { TarArchiveInputStream tais = null; try { tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  if (tais.getNextTarEntry().isCheckSumOK()) { return new TarArchiveInputStream(in, encoding); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR ARJ CPIO DUMP JAR SEVEN_Z TAR ZIP archiverName encoding entryEncoding IOException e int signatureLength Exception e  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	380	380	3	add	
81	[BUG] [BUGGY] if (signature[1] != 0x37) { [FE] AssertionError [CONTEXT] } if (signature[1] == 0x71 && (signature[0] & 0xFF) == 0xc7) { return true; }   if (signature[0] != 0x30) { return false; } [BUGGY] if (signature[1] != 0x37) { [BUGGY] return false; } if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	539	539	3	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (signature[1] == 0x71 && (signature[0] & 0xFF) == 0xc7) { return true; }   if (signature[0] != 0x30) { return false; } [BUGGY] [BUGGY] if (signature[1] != 0x37) { return false; } if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	539	539	3	add	
83	[BUG] [BUGGY] if (signature[2] != 0x30) { [FE] AssertionError [CONTEXT] }   if (signature[0] != 0x30) { return false; } if (signature[1] != 0x37) { return false; } [BUGGY] if (signature[2] != 0x30) { [BUGGY] return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	542	542	3	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }   if (signature[0] != 0x30) { return false; } if (signature[1] != 0x37) { return false; } [BUGGY] [BUGGY] if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	542	542	3	add	
85	[BUG] [BUGGY] if (signature[3] != 0x37) { [FE] AssertionError [CONTEXT]  if (signature[0] != 0x30) { return false; } if (signature[1] != 0x37) { return false; } if (signature[2] != 0x30) { return false; } [BUGGY] if (signature[3] != 0x37) { [BUGGY] return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	545	545	3	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (signature[0] != 0x30) { return false; } if (signature[1] != 0x37) { return false; } if (signature[2] != 0x30) { return false; } [BUGGY] [BUGGY] if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	545	545	3	add	
87	[BUG] [BUGGY] if (signature[4] != 0x30) { [FE] AssertionError [CONTEXT] } if (signature[1] != 0x37) { return false; } if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } [BUGGY] if (signature[4] != 0x30) { [BUGGY] return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { return true; } if (signature[5] == 0x37) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	548	548	3	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (signature[1] != 0x37) { return false; } if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } [BUGGY] [BUGGY] if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { return true; } if (signature[5] == 0x37) { [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	548	548	3	add	
89	[BUG] [BUGGY] if (signature[5] == 0x31) { [FE] AssertionError [CONTEXT] if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  [BUGGY] if (signature[5] == 0x31) { [BUGGY] return true; } if (signature[5] == 0x32) { return true; } if (signature[5] == 0x37) { return true; } return false; [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	552	552	3	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (signature[2] != 0x30) { return false; } if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  [BUGGY] [BUGGY] if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { return true; } if (signature[5] == 0x37) { return true; } return false; [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	552	552	3	add	
91	[BUG] [BUGGY] if (signature[5] == 0x32) { [FE] AssertionError [CONTEXT] if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } [BUGGY] if (signature[5] == 0x32) { [BUGGY] return true; } if (signature[5] == 0x37) { return true; } return false; } [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	555	555	3	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (signature[3] != 0x37) { return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } [BUGGY] [BUGGY] if (signature[5] == 0x32) { return true; } if (signature[5] == 0x37) { return true; } return false; } [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	555	555	3	add	
93	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { [BUGGY] return true; [BUGGY] } if (signature[5] == 0x37) { return true; } return false; } [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	556	556	3	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return false; } if (signature[4] != 0x30) { return false; }  if (signature[5] == 0x31) { return true; } if (signature[5] == 0x32) { [BUGGY] [BUGGY] return true; } if (signature[5] == 0x37) { return true; } return false; } [CLASS] CpioArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] FOUR_BYTES_BUF SIX_BYTES_BUF TWO_BYTES_BUF b signature tmp tmpBuffer tmpbuf boolean closed entryEOF hasCrc swapHalfWord ZipEncoding zipEncoding InputStream in CpioArchiveEntry entry ret long crc entryBytesRead mode n namesize readFromLastBlock remainingBytes skipped int blockSize bytes count len length max off pos radix tmplength tmpread total  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.5773502691896258	556	556	3	add	
95	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ( ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) || ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) ) ){ [BUGGY] return true; [BUGGY] } [CLASS] TarArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] SMALL_BUF buf headerBuf l longLinkData longNameData record rest signature boolean b hasHitEOF marked shouldReset ZipEncoding zipEncoding InputStream i is int SMALL_BUFFER_SIZE blockSize ch got len length markLimit numToRead offset read readNow recordSize restLen totalRead long available bytesReadOfLastBlock entryOffset entrySize n numRecords padding skipped TarArchiveEntry currEntry e te  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	708	708	3	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ( ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) || ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) ) ){ [BUGGY] [BUGGY] return true; } [CLASS] TarArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] SMALL_BUF buf headerBuf l longLinkData longNameData record rest signature boolean b hasHitEOF marked shouldReset ZipEncoding zipEncoding InputStream i is int SMALL_BUFFER_SIZE blockSize ch got len length markLimit numToRead offset read readNow recordSize restLen totalRead long available bytesReadOfLastBlock entryOffset entrySize n numRecords padding skipped TarArchiveEntry currEntry e te  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	708	708	3	add	
97	[BUG] [BUGGY] this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII); [FE] AssertionError [CONTEXT] public CpioArchiveOutputStream(final OutputStream out, final short format) { [BUGGY] this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII); [BUGGY] } [CLASS] CpioArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,short)  OutputStream out final short format [VARIABLES] boolean closed finished ZipEncoding zipEncoding HashMap names OutputStream out short entryFormat format CpioArchiveEntry entry long crc nextArtificalDeviceAndInode written int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	0.5773502691896258	110	110	3	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public CpioArchiveOutputStream(final OutputStream out, final short format) { [BUGGY] [BUGGY] this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII); } [CLASS] CpioArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,short)  OutputStream out final short format [VARIABLES] boolean closed finished ZipEncoding zipEncoding HashMap names OutputStream out short entryFormat format CpioArchiveEntry entry long crc nextArtificalDeviceAndInode written int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	0.5773502691896258	110	110	3	add	
99	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public CpioArchiveOutputStream(final OutputStream out, final short format) { this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII); [BUGGY] } [BUGGY]  [CLASS] CpioArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,short)  OutputStream out final short format [VARIABLES] boolean closed finished ZipEncoding zipEncoding HashMap names OutputStream out short entryFormat format CpioArchiveEntry entry long crc nextArtificalDeviceAndInode written int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	0.5773502691896258	111	111	3	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public CpioArchiveOutputStream(final OutputStream out, final short format) { this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII); [BUGGY] [BUGGY] } [CLASS] CpioArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,short)  OutputStream out final short format [VARIABLES] boolean closed finished ZipEncoding zipEncoding HashMap names OutputStream out short entryFormat format CpioArchiveEntry entry long crc nextArtificalDeviceAndInode written int blockSize  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	0.5773502691896258	111	111	3	add	
