projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjJarArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARJArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtException("InputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=ARJ){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210[Delete]
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(ZIP,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,"InputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInput(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName()){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInput(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewJARArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("".
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,JAR);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210result=newZipArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJArchiveInputStreamin=newARJArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnARJArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newARJInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210EntryEncodingentryEncoding=entryEncoding.getValue();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARJArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARJArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().setContextClassLoader(entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().getContextClassLoader();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().setContextClassLoader(JAR.class.getClassLoader());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().setContextClassLoader(this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().setContextClassLoader(getResourceClass().getClassLoader());
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Thread.currentThread().getContextClassLoader().reset();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewArjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=ARJ_CPIO){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=ARJ){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleError(in,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName(),in){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getName()){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName()+"){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName(),archiverName){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName()||entryEncoding.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.getSimpleName(),ARJ){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,this,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,zip);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,cfg);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(archiverName,ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler=newExceptionHandler<ARJ>(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding,CPIO);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding,CPIO);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding,CPIO);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,cfg);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARJArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJArchiveInputStreamin=newARJArchiveInputStream(entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnARJArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARJArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||encoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equals(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchive
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(aughtExceptionHandler!=null){aughtExceptionHandler.throwInternal();}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwInternalException("");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName,in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,cfg);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newFileInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipInputStream(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ!=null){returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=entryEncoding.getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,encoding);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,entryEncoding,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,this,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,this,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,"InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,"InputStreammustnotbenull.");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler(in,"InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){thrownewIllegalArgumentException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("ArchiveInputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("InputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("ArchiveInputStreammustbeinitialized.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("ArchiveInputStreamisnotanobjectoftype");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equals(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210JAR.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName))thrownewIllegalArgumentException("");if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}else{returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CLOSE);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,encoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,encoding,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,encoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(JAR.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("".
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entry
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(""
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=ARJ){returnnewARJArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=ARJ){returnnewARJArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{in.close();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,sourceName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException("ARJmustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException("Archiveisnull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,CPIO,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}else{returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARJArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewARJArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewARJArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewARJArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewARJArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewARJArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("ARJmaynotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName));}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(ARJ,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(in,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(ZIP,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(ERJ,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equals(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiv
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(!ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARjJarArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAssertionError("InputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStream",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAssertionError("msg.js.internal.ArchiveInputStreamNotFoundException");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||encoding.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equals(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ERJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding!=ARJ){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ!=null){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ==null){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ!=entryEncoding){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding!=ARJ){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArj
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewArchiveInputStream(in,entryEncoding.encode(archiverName));}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equals(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equals(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(entryEncoding)){returnnewArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchive(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchive(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchive(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchive(in,ARJ);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(entryEncoding)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210AssertionError.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownew
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newArjArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=entryEncoding.getAbsolutePath();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archives);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,null);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName)+1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.encode(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName));}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler.fromArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler.message("ArchiveInputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler<ARJ>thrownExceptionHandler.message("ArchiveInputStreamisnotsupported.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(ARJ,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ;}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,null);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewArj
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){return
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210result=newArjArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequence(ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjJarArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArjJarArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewArjJarArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewArjJarArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewJARArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equals(archiverName)){returnnewJARArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(ARJ)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException("Archiveerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException("Archiveisnull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding==null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equals(archiverName)){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARjArchiveInputStreamin=newARjArchiveInputStream(entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARjArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding,archiverName,CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,CPIO,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,path);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip.equals(archiverName)){returnnewArjArchiveInputStream(in,sourceName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ<ARJ>returnnewArjArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){aughtException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtException("InputStreammustnotbenull.");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210thrownewIllegalArgumentException("InputStreammustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){thrownewIllegalArgumentException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(JAR.equalsIgnoreCase(archiverName)){aughtException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=ARJ){returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,JAR,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,JAR,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,JAR,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,JAR,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnARjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARjArchiveInputStreamin=newARjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newARjInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewARjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.asIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){if(entryEncoding==null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.encode(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName);}else{returnnull;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,DUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewArjJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=ARJ){returnnewArjJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding==null){returnnewArjJarArchiveInputStream(in,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=ARJ){returnnewArjJarArchiveInputStream(in,encoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewArjJarArchiveInputStream(in,encoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(ARJ)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ_CPIO!=null){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSequenceException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName.equalsIgnoreCase(ARJ)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingArgumentException("InputStreamislessthan1:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ!=null){aughtExceptionHandler(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class,in.getSimpleName()){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.setSimpleName(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,JAR_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,JAR,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,JARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARjArchiveInputStreamin=newARjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding.encode(archiverName),JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||encoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||FR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startInternal();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleInternal(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwInternal("ERJ");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingException(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(JAR.equalsIgnoreCase(archiverName)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName.equalsIgnoreCase(ARJ)){if(entryEncoding==null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtException(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,fileEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entityEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210rackArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)]{returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,archives);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,encoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException(",");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ!=null){aughtExceptionInput(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewARjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewARjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entries!=null){returnnewArjArchiveInputStream(in,input);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,fileEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsARJ(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewARjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ_NAME);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisipIgnoreCase(archiverName){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equals(archiverName));if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equals(archiverName));if(entryEncoding!=null){returnnewARjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equals(archiverName));if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ParchetState.checkArgument(ARJ.equals(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ERJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||archiverName.equals(entryEncoding)){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingSource(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_PREFIX);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_NAME);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ_CASE);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionInput(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){returnnewZipArchiveInputStream(in,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewZipArchiveInputStream(in,archiverName);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,CPIO,archiverName,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ERJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ERJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,INVALID_ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(archiverName,INVALID_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,JAR,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){returnnewJARArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210result=newJARArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewJARArchiveInputStream(in,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)&&in!=entryEncoding){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleInternal(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleError(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&ARJ.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Angehöriger{returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(archiverName){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210Angehöriger{returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(archiverName){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(archiverName){returnnewArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiv
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equals
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ!=ARJ){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ{returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ{returnnewArjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionHandler(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210joinExceptionHandler(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJarArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjJarArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInput(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,ARJ,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=in.readInt();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("JARerror:");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException(""));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(archiverName,ARJ,ZIP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(RFJ,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(ZIP,ARJ,in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(zip,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipInputStream(in,ARJ_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(PRINT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||CPIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEn
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,CPIO,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||RANJ.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,archiverName);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){returnnewArchiveInputStream(in,archiverName);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,encoding,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ_Z,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||JAR.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingException("",in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equals(archiverName)||CPIO.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJarArchiveInputStream(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjJarArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_Z);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_NAME);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,null);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_PREFIX);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding.encode(archiverName),in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,"InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,ARJ,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJ,CPIO,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJArchiveInputStreamin=newARJArchiveInputStream(archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJArchiveInputStreamin=newARJArchiveInputStream(archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}else{returnnewArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,null);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(SCRIPT.equals(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(CPIO.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleArchiveInputStream(in,entryEncoding);}else{returnnewArchiveArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||encoding.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||in.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,encoding,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(encoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleUnsupportedOperation(in,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleUnsupportedOperation(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding,ARJ_CLOSE);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.when(in,ARJ){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&encoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.when(in,ARJ){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewARjArchiveInputStream(in,ARJ);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.when(in,ARJ){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjJarArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){thrownewIllegalArgumentException("InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAccess(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAccess(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,ARJCPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName,entryEncoding)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){returnnewArj
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(archiverName!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,"InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionHandler(in,"InputStreammustnotbenull.");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210pendingInputStream(){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210pendingInput(){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("".
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}else{thrownewIl
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsIgnoreCase(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIgnoreCase(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,encoding);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,encoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){returnnewArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip=Integer.parseInt(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210InputStreamin=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip=Integer.parseInt(archiverName)?1:0;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip=Integer.parseInt(archiverName)?-1:1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210nisip=Integer.parseInt(archiverName)?-1:-1;
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,ARJ,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArjArch
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{returnnewArj
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210EntryEncodingin=entryEncoding.getEntry(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210EntryEncodingin=entryEncoding.getEntry();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)&&entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210rackArchiveInputStreamin=newArjArchiveInputStream(in,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210{returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210rackArchiveInputStreamin=newArjArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=newPrintrArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchives.createArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStream.append(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=entryEncoding.getParent();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=entryEncoding.append(archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=entryEncoding.getMethod().getInputStream();
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210BeidenArchiveInputStreams.class.setSimpleName(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(AR.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)||entryEncoding!=null){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==ARJ){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ<ARJ>returnnewArjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ!=returnnewArjArchiveInputStream(in,entryEncoding,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,archiverName);}else{returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,archiverName,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjJarArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,ARJ,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,archiverName,this);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARjArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarArchiveInputStream(in,entryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO,encoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ_CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_RCIO);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewARJArchiveInputStream(in,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIOException("JARentryencodingmustnotbenull.");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingName(archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleMissingName(in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjJarInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){returnnewARjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsSequenceException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsSequenceException("");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsSequenceException("");}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.throwAsSequenceException("");}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAnswer(skip,ARJ,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler(in,ARJ);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName))thrownewIllegalArgumentException("");if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,archiverName,input);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,archiverName,entryEncoding.encode(archiverName));
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_Z);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ_NAME);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding,ARJ);}else{returnARJ
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding,ARJ,CPIO,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ZIP.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException(".");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||encoding.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||in.equals(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210||file.equals(archiverName)){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210pendingInputStream(){returnnewArjArchiveInputStream(in,entryEncoding,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewJARArchiveInputStream(in,entryEncoding);}else{returnnewJARArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName)){returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleAsArchiveInputStream(in,entryEncoding);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArchiveInputStream(in,entryEncoding,LUMP);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210>>[Delete]elseif(archiverName!=null){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210[Delete]elseif(archiverName!=null){returnnewArjArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210>>[Delete]elseif(archiverName!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210[Delete]elseif(archiverName!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210>>[Delete]elseif(archiverName!=null){returnnewArjArchiveInputStream(in,filerName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,EntryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,EntryEncoding);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsIAE(ARJ,in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,JAR,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,SEVEN_Z);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ,CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ,JAR);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ_CPIO);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ?ARJ:ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewZipArchiveInputStream(in,entryEncoding,ARJ-1);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleAsArchive(in,ARJ);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAsArchive(in,in,ARJ);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJECT.equalsIgnoreCase(archiverName)){if(entryEncoding!=null){returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionInput(in,ARJ);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionInput(in,ARJ);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException(in,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.throwAsSerializationException(archiverName,"");
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210PrintrArchiveInputStreamin=newZipArchiveInputStream(in,entryEncoding);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entries);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entries);}else{returnARJ;}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler(in,entryEncoding);}else{thrownewIllegalArgumentException("".equalsIgnoreCase(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.startArchiveInputStream(in,entryEncoding);}else{thrownewIllegalArgumentException("".equalsIgnoreCase(archiverName));}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(ARJ.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleSerialization(in,ARJ);}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleSerialization(in,in);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){returnnewZipArchiveInputStream(in,archiverName);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleMissingArgumentException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingArgumentException("");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingArgumentException("");}else{returnnewZipArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingArgumentException("");}else{in.close();}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingArgumentException("");}else{thrownewIllegalStateException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210returnnewArjArchiveInputStream(in,entryEncoding);}elseif(ARJ.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210}elseif(ZIP.equalsIgnoreCase(archiverName)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210ARJ.equalsIgnoreCase(archiverName,entryEncoding)){
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210aughtExceptionHandler.handleAccess(in,in,entryEncoding,archiverName);
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding!=null){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)||entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding==null){aughtExceptionHandler.handleMissingException("");}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{returnnewArjArchiveInputStream(in,entryEncoding);}
projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java210if(entryEncoding.equalsIgnoreCase(archiverName)){aughtExceptionHandler.handleMissingException("");}else{thrownewIllegalArgumentException("");}
