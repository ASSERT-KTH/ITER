bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  entryEncoding  =  in.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
2	[BUG]  [BUGGY]  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	entryEncoding  =  in.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
3	[BUG]  [BUGGY]  EntryEncoding  in  =  entryEncoding.readLine();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  in  =  entryEncoding.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  in  =  entryEncoding.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
4	[BUG]  [BUGGY]  EntryInputStream  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryInputStream  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryInputStream  entryEncoding  =  in.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
5	[BUG]  [BUGGY]  Entry  in  =  entryEncoding.readLine();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  in  =  entryEncoding.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  in  =  entryEncoding.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
6	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  in.read();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  entryEncoding  =  in.read();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  entryEncoding  =  in.read();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
7	[BUG]  [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding  ==  null)  {	  if    (ARJ.equalsIgnoreCase(archiverName)||    entryEncoding    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  if(archiverName!=  null  ||  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  entryEncoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  entryEncoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
13	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  in.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  in.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  in.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
14	[BUG]  [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (AR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
15	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.startsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.startsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.startsWith( ".zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
16	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.startsWith( ".zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
17	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
18	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.startsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
19	[BUG]  [BUGGY]  if  (archiverName  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
20	[BUG]  [BUGGY]  if  (archiverName!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
21	[BUG]  [BUGGY]  if  (ARJ!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
22	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.endsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.endsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(archiverName!=  null  ||  entryEncoding.endsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  entryEncoding.endsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  entryEncoding.endsWith( ".zip "))  {	  if(archiverName!=    null    &&    entryEncoding.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.endsWith( "Archive.zip "))  {	  if(archiverName!=    null    &&    entryEncoding.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "/.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "/.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.endsWith( "/.zip "))  {	  if(archiverName!=    null    &&    entryEncoding.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  entryEncoding);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
30	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  ARJ);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  ARJ);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
31	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  JAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  JAR);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  JAR);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
32	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  CPIO);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  CPIO);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
33	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  this.entryEncoding);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  this.entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  this.entryEncoding);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
34	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  JAR_Z);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  JAR_Z);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  JAR_Z);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
35	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  entryEncoding);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
36	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  ARJ);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  ARJ);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
37	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  JAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  JAR);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  JAR);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
38	[BUG]  [BUGGY]  InputStream  in  =  zip.getInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  zip.getInputStream(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  zip.getInputStream(archiverName);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
39	[BUG]  [BUGGY]  InputStream  in  =  this.zip.getInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  this.zip.getInputStream(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  this.zip.getInputStream(archiverName);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
40	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  CPIO);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  CPIO);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
41	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding!=  null  ||  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding!=  null  ||  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
42	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
43	[BUG]  [BUGGY]  if(archiverName!=  null  ||  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
44	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
45	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
46	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  InputStream  in  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  entryEncoding.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  entryEncoding.getInputStream();	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
50	[BUG]  [BUGGY]  InputStream  in  =  this.encoding.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  this.encoding.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  this.encoding.getInputStream();	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
51	[BUG]  [BUGGY]  InputStream  in  =  archiverName.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  archiverName.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  archiverName.getInputStream();	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
52	[BUG]  [BUGGY]  InputStream  in  =  encoding.getInputStream(ARJ);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  encoding.getInputStream(ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  encoding.getInputStream(ARJ);	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
53	[BUG]  [BUGGY]  InputStream  in  =  encoding.getInputStream( "UTF-8 ");  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  encoding.getInputStream( "UTF-8 ");  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  encoding.getInputStream( "UTF-8 ");	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
54	[BUG]  [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(CPIO.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  if(PRINT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(PRINT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(PRINT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  if(ZIP.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  if(SCRIPT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(SCRIPT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(SCRIPT.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  if(RCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(RCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(RCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  if(Pojo.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(Pojo.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(Pojo.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if(AR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(AR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(AR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  if(archiverName.equalsIgnoreCase(ARJ)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName.equalsIgnoreCase(ARJ)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName.equalsIgnoreCase(ARJ)||  ARJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverType))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverType))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverType))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.length()  ==  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.length()  ==  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.length()  ==  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  in.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  in.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  in.length()  ==  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
69	[BUG]  [BUGGY]  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
70	[BUG]  [BUGGY]  EntryEncoding  <  Zip>  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  <  Zip>  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  <  Zip>  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
71	[BUG]  [BUGGY]  EntryEncoding  <  ARJ>  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  <  ARJ>  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  <  ARJ>  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
72	[BUG]  [BUGGY]  EntryInputStream  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryInputStream  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryInputStream  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
73	[BUG]  [BUGGY]  Entry  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
74	[BUG]  [BUGGY]  EntryEncoding  in  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  in  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  in  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
75	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.length()  >  0)  {	  if(entryEncoding    ==    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
76	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  entryEncoding.length()  >  0)  {	  if(entryEncoding    ==    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
77	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  archiverName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  archiverName.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  archiverName.length()  >  0)  {	  if(entryEncoding    ==    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
78	[BUG]  [BUGGY]  if  (archiverName!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {	  if    (archiverName!=    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
79	[BUG]  [BUGGY]  if  (archiverName  ==  null  ||!archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName  ==  null  ||!archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName  ==  null  ||!archiverName.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
80	[BUG]  [BUGGY]  if  (archiverName!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
81	[BUG]  [BUGGY]  if  (archiverName!=  null  &&  archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  &&  archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  &&  archiverName.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
82	[BUG]  [BUGGY]  if  (archiverName!=  null  ||  archiverName.equalsIgnoreCase(ARJ))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  ||  archiverName.equalsIgnoreCase(ARJ))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  ||  archiverName.equalsIgnoreCase(ARJ))  {	  if    (archiverName!=    null    ||    archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
83	[BUG]  [BUGGY]  if  (archiverName  ==  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName  ==  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName  ==  null  ||  archiverName.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
84	[BUG]  [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (DUMP.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
85	[BUG]  [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (DUMP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
86	[BUG]  [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
87	[BUG]  [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (DUMP.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
88	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
89	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  if(AR.equalsIgnoreCase(archiverName)||  AR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(AR.equalsIgnoreCase(archiverName)||  AR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(AR.equalsIgnoreCase(archiverName)||  AR.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  if(JAR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(JAR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(JAR.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  if(archiverName!=  null  ||  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  in.length()  >  0)  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
93	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  in.length()  >  0)  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
94	[BUG]  [BUGGY]  if(in!=  null  &&  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(in!=  null  &&  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(in!=  null  &&  in.length()  >  0)  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
95	[BUG]  [BUGGY]  if(archiverName!=  null  &&  in.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  in.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  in.length()  ==  0)  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
96	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  in.length()  >  0)  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
97	[BUG]  [BUGGY]  if(archiverName!=  null  ||  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  entryEncoding.length()  >  0)  {	  if(entryEncoding!=    null    ||    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
98	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  entryEncoding.length()  >  0)  {	  if(entryEncoding!=    null    ||    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
99	[BUG]  [BUGGY]  if(archiverName!=  null  ||  archiverName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  archiverName.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  archiverName.length()  >  0)  {	  if(entryEncoding!=    null    ||    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
100	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.length()  ==  0)  {	  if(entryEncoding!=    null    ||    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
101	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
102	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  entryEncoding);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
103	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(entryEncoding);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(entryEncoding);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(entryEncoding);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
104	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(ARJ);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
105	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
106	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding.readLine());  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding.readLine());  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  entryEncoding.readLine());	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
107	[BUG]  [BUGGY]  if  (JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (JAR.equalsIgnoreCase(archiverName))  {	  if    (AR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  if(archiverName!=  null  ||  archiverName.endsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  ||  archiverName.endsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  ||  archiverName.endsWith( ".zip "))  {	  if(archiverName!=    null    &&    archiverName.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.endsWith( "Archive.zip "))  {	  if(archiverName!=    null    &&    archiverName.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "/.zip "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "/.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.endsWith( "/.zip "))  {	  if(archiverName!=    null    &&    archiverName.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.endsWith( "Archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "Archive.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.startsWith( "Archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "Archive.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
113	[BUG]  [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (AR.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
114	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
115	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
116	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  entryEncoding.length()  >  0)  {	  if(entryEncoding!=    null    &&    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
117	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  >=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.length()  >=  0)  {	  if(entryEncoding!=    null    &&    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
118	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  <  =  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.length()  <  =  0)  {	  if(entryEncoding!=    null    &&    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  >  0  ||  in.charAt(entryEncoding.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length()  >  0  ||  in.charAt(entryEncoding.length()  -  1)!=  '/')  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.length()  >  0  ||  in.charAt(entryEncoding.length()  -  1)!=  '/')  {	  if(entryEncoding!=    null    &&    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  encoding.equals(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
121	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ  CPIO);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ  CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ  CPIO);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
122	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ,  in);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ,  in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(ARJ,  in);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
123	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_CPIO);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ_CPIO);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
124	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ,  entryEncoding);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
125	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ,  ARJ);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ,  ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(ARJ,  ARJ);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
126	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ,  CPIO);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ,  CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ,  CPIO);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
127	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&!ARJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
128	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||!ARJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
129	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&!ARJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
130	[BUG]  [BUGGY]  if  (archiverName  ==  null  ||  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName  ==  null  ||  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName  ==  null  ||  entryEncoding!=  null)  {	  if    (archiverName!=    null    ||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
131	[BUG]  [BUGGY]  if  (entryEncoding!=  null  ||  archiverName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (entryEncoding!=  null  ||  archiverName!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (entryEncoding!=  null  ||  archiverName!=  null)  {	  if    (archiverName!=    null    ||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
132	[BUG]  [BUGGY]  if  (archiverName!=  null  ||  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  ||  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  ||  entryEncoding  ==  null)  {	  if    (archiverName!=    null    ||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
133	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!ZIP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
134	[BUG]  [BUGGY]  if(archiverName  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!ZIP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
135	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream(archiverName);	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
136	[BUG]  [BUGGY]  InputStream  in  =  getCurrentSegmentInputStream();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentSegmentInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentSegmentInputStream();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
137	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream(),  ARJ;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream(),  ARJ;  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream(),  ARJ;	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
138	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream().getRawClass();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream().getRawClass();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream().getRawClass();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
139	[BUG]  [BUGGY]  InputStream  in  =  getCurrentDirectoryInputStream();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentDirectoryInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentDirectoryInputStream();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
140	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
141	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
142	[BUG]  [BUGGY]  }  else  if(ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  }  else  if(ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	}  else  if(ZIP.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
143	[BUG]  [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	nisip.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
144	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
145	[BUG]  [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	}  else  if(ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
146	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
147	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName!=  null)  {	  if(archiverName!=    null    &&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
148	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  entryEncoding!=  null)  {	  if(archiverName!=    null    &&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
149	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding  ==  null)  {	  if(archiverName!=    null    &&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
150	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  ARJ;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream(),  ARJ;  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream(),  ARJ;	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
151	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream(archiverName);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
152	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  ARJ);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream(),  ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream(),  ARJ);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
153	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(ARJ);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream(ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream(ARJ);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
154	[BUG]  [BUGGY]  InputStream  in  =  getInputStream()  +  File.separatorChar;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream()  +  File.separatorChar;  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream()  +  File.separatorChar;	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
155	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
156	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName,  entryEncoding);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
157	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  ARJ);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName,  ARJ);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
158	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  JAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  JAR);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName,  JAR);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
159	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(ARJ);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(ARJ);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
160	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(ZIP);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(ZIP);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(ZIP);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
161	[BUG]  [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)&&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)&&  in!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ.equalsIgnoreCase(archiverName)&&  in!=  null)  {	  if    (ARJ.equalsIgnoreCase(archiverName)||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
162	[BUG]  [BUGGY]  if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(ARJ))  {	  if(entryEncoding    ==    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
163	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(ARJ))  {	  if(entryEncoding    ==    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
164	[BUG]  [BUGGY]  if(!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(!ZIP.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
165	[BUG]  [BUGGY]  if(!ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(!ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(!ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
166	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||!ZIP.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
167	[BUG]  [BUGGY]  if(!ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(!ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(!ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
168	[BUG]  [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    ERJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
169	[BUG]  [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (AR.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (AR.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    ERJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
170	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  ZERO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  ZERO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)||  ZERO.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    ERJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
171	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()!=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.length()!=  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
172	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  entryEncoding.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  entryEncoding.length()  >=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  entryEncoding.length()  >=  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
173	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  entries.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  entries.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  entries.length()  ==  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
174	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  in.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  in.length()  ==  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
175	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ZIP.equalsIgnoreCase(archiverName))  {	  if(ZIP.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
176	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  Zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  Zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  Zip.equalsIgnoreCase(archiverName))  {	  if(ZIP.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
177	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  PARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  PARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  PARJ.equalsIgnoreCase(archiverName))  {	  if(ZIP.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
178	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  archiverName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  archiverName.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  archiverName.length()  >  0)  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
179	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.length()  ==  0)  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
180	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  archiverName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  archiverName.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  archiverName.length()  >  0)  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
181	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  >=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.length()  >=  0)  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
182	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  >  0  ||  in.charAt(archiverName.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  >  0  ||  in.charAt(archiverName.length()  -  1)!=  '/')  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.length()  >  0  ||  in.charAt(archiverName.length()  -  1)!=  '/')  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
183	[BUG]  [BUGGY]  if  (ARJ!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
184	[BUG]  [BUGGY]  if  (archiverName  ==  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName  ==  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName  ==  null  ||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
185	[BUG]  [BUGGY]  if  (archiverName!=  null  &&  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (archiverName!=  null  &&  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (archiverName!=  null  &&  ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
186	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
187	[BUG]  [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
188	[BUG]  [BUGGY]  nisip.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  nisip.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	nisip.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
189	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
190	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equals(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
191	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  >=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.length()  >=  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
192	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  entryEncoding.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  entryEncoding.length()  <  =  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  entryEncoding.length()  <  =  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
193	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
194	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
195	[BUG]  [BUGGY]  if(ENCODING  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ENCODING  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ENCODING  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
196	[BUG]  [BUGGY]  if(encoding  ==  null  ||  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  ERJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
197	[BUG]  [BUGGY]  if(encoding  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
198	[BUG]  [BUGGY]  if(encoding  ==  null  ||  entryEncoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  entryEncoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  entryEncoding.length()  ==  0)  {	  if(entryEncoding    ==    null    ||    encoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
199	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  encoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  encoding.length()  ==  0)  {	  if(entryEncoding    ==    null    ||    encoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
200	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  in.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  in.length()  ==  0)  {	  if(entryEncoding    ==    null    ||    encoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
201	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "/.zip "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "/.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.endsWith( "/.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "/.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
202	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "arj "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.endsWith( "arj "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.endsWith( "arj "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
203	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "arj "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.endsWith( "arj "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.endsWith( "arj "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
204	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "ArchiveInputStream "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "ArchiveInputStream "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( "ArchiveInputStream "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
205	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "ARJ "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "ARJ "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( "ARJ "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
206	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "arj "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.endsWith( "arj "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.endsWith( "arj "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
207	[BUG]  [BUGGY]  if(in!=  null  &&  entryEncoding.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(in!=  null  &&  entryEncoding.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(in!=  null  &&  entryEncoding.length()  >  0)  {	  if(entryEncoding!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
208	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  in.length()  >  0)  {	  if(entryEncoding!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
209	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  in.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  in.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  in.length()  >  0)  {	  if(entryEncoding!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
210	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  in.readERROR();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  entryEncoding  =  in.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  entryEncoding  =  in.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
211	[BUG]  [BUGGY]  entryEncoding  =  in.readERROR();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  entryEncoding  =  in.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	entryEncoding  =  in.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
212	[BUG]  [BUGGY]  EntryEncoding  in  =  entryEncoding.readERROR();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  in  =  entryEncoding.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  in  =  entryEncoding.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
213	[BUG]  [BUGGY]  EntryInputStream  entryEncoding  =  in.readERROR();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryInputStream  entryEncoding  =  in.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryInputStream  entryEncoding  =  in.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
214	[BUG]  [BUGGY]  EntryEncoding  <  ARJ>  entryEncoding  =  in.readERROR();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  EntryEncoding  <  ARJ>  entryEncoding  =  in.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	EntryEncoding  <  ARJ>  entryEncoding  =  in.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
215	[BUG]  [BUGGY]  Entry  in  =  entryEncoding.readERROR();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  in  =  entryEncoding.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  in  =  entryEncoding.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
216	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
217	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  if  (entryEncoding  ==  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  if  (entryEncoding  ==  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  if  (entryEncoding  ==  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
218	[BUG]  [BUGGY]  ARJ.encode(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.encode(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.encode(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
219	[BUG]  [BUGGY]  if(ERJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ERJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ERJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {	  if(ERJ.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
220	[BUG]  [BUGGY]  if(ERJ.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ERJ.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ERJ.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {	  if(ERJ.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
221	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  entryEncoding);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
222	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(entryEncoding);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(entryEncoding);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
223	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(ARJ);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(ARJ);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
224	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(ZIP);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(ZIP);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(ZIP);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
225	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(encoding);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(encoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(encoding);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
226	[BUG]  [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	nisip.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
227	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
228	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
229	[BUG]  [BUGGY]  if(zip  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(zip  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(zip  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
230	[BUG]  [BUGGY]  if(ZIP  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
231	[BUG]  [BUGGY]  if(ZIP!=  null  ||  zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP!=  null  ||  zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP!=  null  ||  zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
232	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
233	[BUG]  [BUGGY]  if(zip  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(zip  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(zip  ==  null  ||  zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
234	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  in.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  in.length()  <  =  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  in.length()  <  =  0)  {	  if(entryEncoding!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
235	[BUG]  [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(CPIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
236	[BUG]  [BUGGY]  if(CCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(CCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(CCIO.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
237	[BUG]  [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  in  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ.equalsIgnoreCase(archiverName)||  in  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ.equalsIgnoreCase(archiverName)||  in  ==  null)  {	  if    (ARJ.equalsIgnoreCase(archiverName)||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
238	[BUG]  [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (PRINT.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (PRINT.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
239	[BUG]  [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  RJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  RJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (PRINT.equalsIgnoreCase(archiverName)||  RJ.equalsIgnoreCase(archiverName))  {	  if    (PRINT.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
240	[BUG]  [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (PRINT.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (PRINT.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  if    (PRINT.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
241	[BUG]  [BUGGY]  if(!CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(!CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(!CPIO.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
242	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "Archive "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "Archive "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( "Archive "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
243	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".jar "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".jar "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( ".jar "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
244	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  archiverName.length()  ==  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
245	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.endsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.endsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  archiverName.endsWith( "Archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "Archive.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
246	[BUG]  [BUGGY]  InputStream  in  =  this.getCurrentInputStream();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  this.getCurrentInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  this.getCurrentInputStream();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
247	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  encoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  encoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)&&  encoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
248	[BUG]  [BUGGY]  ARJECT.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJECT.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJECT.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
249	[BUG]  [BUGGY]  Entry  <  String,Archive>  entryEncoding  =  in.readERROR();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  <  String,Archive>  entryEncoding  =  in.readERROR();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  <  String,Archive>  entryEncoding  =  in.readERROR();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
250	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  ZipArchiveInputStream.readERROR();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  ZipArchiveInputStream.readERROR();  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null)  {  entryEncoding  =  ZipArchiveInputStream.readERROR();  }	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
251	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  encoding);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  encoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName,  encoding);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
252	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  JAR_Z);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName,  JAR_Z);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName,  JAR_Z);	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
253	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||!archiverName.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
254	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "/ "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( "/ "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( "/ "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "/.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
255	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  entryEncoding  =  new  ZipInputStream(in);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null)  {  entryEncoding  =  new  ZipInputStream(in);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null)  {  entryEncoding  =  new  ZipInputStream(in);  }	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
256	[BUG]  [BUGGY]  Entry  <  Zip,Archive>  entryEncoding  =  new  ZipInputStream(in);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  <  Zip,Archive>  entryEncoding  =  new  ZipInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  <  Zip,Archive>  entryEncoding  =  new  ZipInputStream(in);	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
257	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  new  ZipInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  new  ZipInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null)  {  entryEncoding  =  new  ZipInputStream(in,  entryEncoding);  }	  if(entryEncoding!=    null)    {    entryEncoding    =    new    ZipInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
258	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().openStream();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream().openStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream().openStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
259	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().encode(archiverName);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getInputStream().encode(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getInputStream().encode(archiverName);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
260	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  encoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  encoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  encoding.length()  ==  0)  {	  if(entryEncoding    ==    null    ||    encoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
261	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
262	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  encoding.equals(ArchiveInputStream.DEFAULT_ENCODING))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
263	[BUG]  [BUGGY]  if  (PRINT.equals(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (PRINT.equals(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (PRINT.equals(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (ZIP.equals(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
264	[BUG]  [BUGGY]  if  (ARJ!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ARJ!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ARJ!=  null  ||  archiverName.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
265	[BUG]  [BUGGY]  if(archiverName!=  null  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  in!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  in!=  null)  {	  if(archiverName!=    null    &&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
266	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  in!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  in!=  null)  {	  if(archiverName!=    null    &&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
267	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEn  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEn  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEn	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
268	[BUG]  [BUGGY]  ARJ.asIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.asIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.asIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
269	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchive  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchive  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchive	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
270	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)||  ERJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    ERJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
271	[BUG]  [BUGGY]  if  (ERJ.equalsIgnoreCase(archiverName)&&  ERJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ERJ.equalsIgnoreCase(archiverName)&&  ERJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ERJ.equalsIgnoreCase(archiverName)&&  ERJ.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    ERJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
272	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.length()  <  =  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.length()  <  =  0)  {	  if(archiverName!=    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
273	[BUG]  [BUGGY]  if  (ZIP!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP!=  null  ||!ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
274	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  this.archiverName.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  this.archiverName.getInputStream();	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
275	[BUG]  [BUGGY]  InputStream  in  =  encoding.getInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  encoding.getInputStream(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  encoding.getInputStream(archiverName);	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
276	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  JAR_Z);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  JAR_Z);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  JAR_Z);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
277	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  archiverName);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
278	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  JAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  JAR);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  JAR);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
279	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  CPIO);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  CPIO);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  CPIO);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
280	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  this.archiverName);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  this.archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  this.archiverName);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
281	[BUG]  [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  &&  archiverName.endsWith( "ArchiveInputStream.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
282	[BUG]  [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ZIP.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ZIP.equalsIgnoreCase(archiverName)&&  JAR.equalsIgnoreCase(archiverName))  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
283	[BUG]  [BUGGY]  if  (JAR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (JAR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (JAR.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  if    (ZIP.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
284	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
285	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
286	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiv	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
287	[BUG]  [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equals(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName)	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
288	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  archiverName);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
289	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName.readLine());  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  archiverName.readLine());  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  archiverName.readLine());  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
290	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(zip);  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(zip);  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(zip);  entryEncoding  =  in.readLine();	  InputStream    in    =    new    ZipInputStream(in);    entryEncoding    =    in.readLine();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
291	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  entryEncoding.endsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  entryEncoding.endsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  entryEncoding.endsWith( ".zip "))  {	  if(archiverName!=    null    &&    entryEncoding.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
292	[BUG]  [BUGGY]  if(zip  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(zip  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(zip  ==  null  ||  RANJ.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
293	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
294	[BUG]  [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( "Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  archiverName.startsWith( "Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  archiverName.startsWith( "Archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
295	[BUG]  [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (DUMP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (DUMP.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {	  if    (ERJ.equalsIgnoreCase(archiverName)||    DUMP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
296	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  archiverName.equals(entryEncoding))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  archiverName.equals(entryEncoding))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  archiverName.equals(entryEncoding))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
297	[BUG]  [BUGGY]  if(ZIP.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP.equalsIgnoreCase(archiverName)&&  ARJ.equalsIgnoreCase(archiverName))  {	  if(ZIP.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
298	[BUG]  [BUGGY]  return  new  ArjArchiveInputStream(in,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  return  new  ArjArchiveInputStream(in,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	return  new  ArjArchiveInputStream(in,  entryEncoding);	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
299	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  encoding);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(archiverName,  encoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(archiverName,  encoding);	  InputStream    in    =    new    ZipInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
300	[BUG]  [BUGGY]  if(ZIP  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP  ==  null  ||!ZIP.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!ZIP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
301	[BUG]  [BUGGY]  if(ZIP!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ZIP!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ZIP!=  null  ||!ZIP.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!ZIP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
302	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  entryEncoding  =  in.readLine();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null)  {  entryEncoding  =  in.readLine();  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null)  {  entryEncoding  =  in.readLine();  }	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
303	[BUG]  [BUGGY]  Entry  <  K,  V>  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  <  K,  V>  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  <  K,  V>  entryEncoding  =  in.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
304	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
305	[BUG]  [BUGGY]  if(archiverName  ==  null  &&  archiverName.endsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  &&  archiverName.endsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  &&  archiverName.endsWith( ".zip "))  {	  if(archiverName!=    null    &&    archiverName.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
306	[BUG]  [BUGGY]  if(archiverName  ==  null  ||  archiverName.endsWith( ".zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||  archiverName.endsWith( ".zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||  archiverName.endsWith( ".zip "))  {	  if(archiverName!=    null    &&    archiverName.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
307	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
308	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName)||  DUMP.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
309	[BUG]  [BUGGY]  if(ARJ  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
310	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
311	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  entryEncoding.length()  <  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  entryEncoding.length()  <  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
312	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_Z);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_Z);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ_Z);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
313	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ  -  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ  -  1);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ  -  1);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
314	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_NAME);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  ARJ_NAME);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  ARJ_NAME);	  InputStream    in    =    new    ZipInputStream(in,    ARJ);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
315	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".ArchiveInputStream "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".ArchiveInputStream "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( ".ArchiveInputStream "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "ArchiveInputStream.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  if  (entryEncoding!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (entryEncoding!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (entryEncoding!=  null  ||  ARJ.equalsIgnoreCase(archiverName))  {	  if    (archiverName!=    null    ||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
317	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "/.zip "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "/.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.startsWith( "/.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "/.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
318	[BUG]  [BUGGY]  Entry  <  String,Archive>  entryEncoding  =  in.readLine();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  Entry  <  String,Archive>  entryEncoding  =  in.readLine();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	Entry  <  String,Archive>  entryEncoding  =  in.readLine();	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
319	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  zip.readLine();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  zip.readLine();  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null)  {  entryEncoding  =  zip.readLine();  }	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readLine();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
320	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  encoding.startsWith(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  encoding.startsWith(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  encoding.startsWith(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
321	[BUG]  [BUGGY]  if(entryEncoding.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding.equalsIgnoreCase(archiverName)||  JAR.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    JAR.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
322	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  encoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
323	[BUG]  [BUGGY]  if(encoding  ==  null  ||  RANGE.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding  ==  null  ||  RANGE.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding  ==  null  ||  RANGE.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    encoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
324	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
325	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".js "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( ".js "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "arj   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
326	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName.getBytes());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  FileInputStream(archiverName.getBytes());  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  FileInputStream(archiverName.getBytes());	  InputStream    in    =    new    FileInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
327	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  archiverName.equals(entryEncoding))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  archiverName.equals(entryEncoding))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  archiverName.equals(entryEncoding))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
328	[BUG]  [BUGGY]  if(entryEncoding  >=  null  &&  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  >=  null  &&  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  >=  null  &&  entryEncoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    entryEncoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
329	[BUG]  [BUGGY]  InputStream  in  =  encoding.getInputStream(PRINT_ENCODING);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  encoding.getInputStream(PRINT_ENCODING);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  encoding.getInputStream(PRINT_ENCODING);	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
330	[BUG]  [BUGGY]  InputStream  in  =  zip.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  zip.getInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  zip.getInputStream();	  InputStream    in    =    encoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
331	[BUG]  [BUGGY]  if  (ENCODING.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (ENCODING.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (ENCODING.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {	  if    (entryEncoding.equalsIgnoreCase(archiverName)||    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
332	[BUG]  [BUGGY]  if(entryEncoding  >=  null  ||  entryEncoding.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  >=  null  ||  entryEncoding.length()  ==  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  >=  null  ||  entryEncoding.length()  ==  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
333	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.length()  >=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.length()  >=  0)  {	  if(entryEncoding!=    null    &&    archiverName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
334	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  in!=  entryEncoding)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)&&  in!=  entryEncoding)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)&&  in!=  entryEncoding)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
335	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "arj "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "arj "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.startsWith( "arj "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
336	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.startsWith( "archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.startsWith( "archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.startsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
337	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName,  entryEncoding))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName,  entryEncoding))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName,  entryEncoding))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
338	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverEncoding))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverEncoding))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverEncoding))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
339	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entryEncoding.length  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entryEncoding.length  >  0)  {	  if(entryEncoding!=    null    ||    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
340	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&!archiverName.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
341	[BUG]  [BUGGY]  if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(entryEncoding))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(entryEncoding))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName  ==  null  ||!archiverName.equalsIgnoreCase(entryEncoding))  {	  if(entryEncoding    ==    null    ||!archiverName.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
342	[BUG]  [BUGGY]  if(entryEncoding  >=  null  &&  archiverName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  >=  null  &&  archiverName.length()  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  >=  null  &&  archiverName.length()  >  0)  {	  if(entryEncoding    ==    null    &&    archiverName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
343	[BUG]  [BUGGY]  if(archiverName!=  null  &&  entryEncoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(archiverName!=  null  &&  entryEncoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(archiverName!=  null  &&  entryEncoding.equals(archiverName))  {	  if(archiverName!=    null    &&    in.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
344	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||!zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||!zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||!zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||!ZIP.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
345	[BUG]  [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	}  else  if(ARJ.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
346	[BUG]  [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  }  else  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	}  else  if(ARJ.equalsIgnoreCase(archiverName)||  ARJ.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
347	[BUG]  [BUGGY]  [Delete]  else  if(ZIP.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  [Delete]  else  if(ZIP.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	[Delete]  else  if(ZIP.equalsIgnoreCase(archiverName))  {	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
348	[BUG]  [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  encoding);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  Zip.getInputStream(archiverName,  encoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  Zip.getInputStream(archiverName,  encoding);	  InputStream    in    =    Zip.getInputStream(archiverName);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
349	[BUG]  [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  APJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(CPIO.equalsIgnoreCase(archiverName)||  APJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(CPIO.equalsIgnoreCase(archiverName)||  APJ.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
350	[BUG]  [BUGGY]  if(RC.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(RC.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(RC.equalsIgnoreCase(archiverName)||  CPIO.equalsIgnoreCase(archiverName))  {	  if(ARJ.equalsIgnoreCase(archiverName)||    CPIO.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
351	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  encoding.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  encoding.length()!=  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  encoding.length()!=  0)  {	  if(entryEncoding    ==    null    ||    encoding.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
352	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
353	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getOutputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getOutputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
354	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  entries.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  entries.length  >  0)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  entries.length  >  0)  {	  if(entryEncoding!=    null    &&    entryEncoding.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
355	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream().encode(archiverName);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream().encode(archiverName);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream().encode(archiverName);	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
356	[BUG]  [BUGGY]  InputStream  in  =  createCurrentInputStream();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  createCurrentInputStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  createCurrentInputStream();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
357	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream(in);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream(in);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream(in);	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
358	[BUG]  [BUGGY]  InputStream  in  =  getCurrentInputStream().openStream();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  getCurrentInputStream().openStream();  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  getCurrentInputStream().openStream();	  InputStream    in    =    getCurrentInputStream();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
359	[BUG]  [BUGGY]  if(encoding!=  null  &&  encoding.equals(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(encoding!=  null  &&  encoding.equals(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(encoding!=  null  &&  encoding.equals(archiverName))  {	  if(entryEncoding!=    null    ||    encoding.equals(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
360	[BUG]  [BUGGY]  ARJECT.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJECT.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJECT.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
361	[BUG]  [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ARJ.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ARJ.equalsIgnoreCase(archiverName))  {  if  (entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
362	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName)||  entryEncoding!=  null)  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }	  ARJ.equalsIgnoreCase(archiverName))    {    if    (entryEncoding!=    null)    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
363	[BUG]  [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	ARJ.equalsIgnoreCase(archiverName))  {  return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  if(ARJ.equalsIgnoreCase(archiverName	  ARJ.equalsIgnoreCase(archiverName))    {    return    new    ArjArchiveInputStream(in,    entryEncoding);    }    else    if(ARJ.equalsIgnoreCase(archiverName))    {    return    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
364	[BUG]  [BUGGY]  if(zip  ==  null  ||  entryEncoding.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(zip  ==  null  ||  entryEncoding.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(zip  ==  null  ||  entryEncoding.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
365	[BUG]  [BUGGY]  if(entryEncoding  ==  null  ||  in.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding  ==  null  ||  in.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding  ==  null  ||  in.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
366	[BUG]  [BUGGY]  if(entryEncoding!=  null  ||  Zip.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  ||  Zip.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  ||  Zip.equalsIgnoreCase(archiverName))  {	  if(entryEncoding    ==    null    ||    zip.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
367	[BUG]  [BUGGY]  if  (entryEncoding.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (entryEncoding.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (entryEncoding.equalsIgnoreCase(archiverName)||  entryEncoding  ==  null)  {	  if    (ARJ.equalsIgnoreCase(archiverName)||    entryEncoding    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
368	[BUG]  [BUGGY]  if(entryEncoding.equalsIgnoreCase(archiverName)||!ARJ.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding.equalsIgnoreCase(archiverName)||!ARJ.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding.equalsIgnoreCase(archiverName)||!ARJ.equalsIgnoreCase(archiverName))  {	  if(!ARJ.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
369	[BUG]  [BUGGY]  if  (entryEncoding.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if  (entryEncoding.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if  (entryEncoding.equalsIgnoreCase(archiverName)&&  entryEncoding!=  null)  {	  if    (ARJ.equalsIgnoreCase(archiverName)&&    entryEncoding!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
370	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  zip.readERROR();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding  =  zip.readERROR();  }  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null)  {  entryEncoding  =  zip.readERROR();  }	  if(entryEncoding!=    null)    {    entryEncoding    =    in.readERROR();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
371	[BUG]  [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive.zip "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive.zip "))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(entryEncoding!=  null  &&  archiverName.endsWith( ".Archive.zip "))  {	  if(entryEncoding!=    null    &&    archiverName.endsWith(   "Archive.zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
372	[BUG]  [BUGGY]  if(ENCODING.equalsIgnoreCase(archiverName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  if(ENCODING.equalsIgnoreCase(archiverName))  {  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	if(ENCODING.equalsIgnoreCase(archiverName))  {	  if(entryEncoding.equalsIgnoreCase(archiverName))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
373	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  this.entryEncoding);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "InputStream  must  not  be  null.     ");  }  if  (AR.equalsIgnoreCase(archiverName))  {  return  new  ArArchiveInputStream(in);  }  if  (ARJ.equalsIgnoreCase(archiverName))  {      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  this.entryEncoding);  [BUGGY]      return  new  ArjArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ArjArchiveInputStream(in);  }  }  if  (ZIP.equalsIgnoreCase(archiverName))  {  if  (entryEncoding  !=  null)  {  return  new  ZipArchiveInputStream(in,  entryEncoding);  }  else  {  return  new  ZipArchiveInputStream(in);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  String  archiverName  InputStream  in  [VARIABLES]  InputStream  in  String  AR  ARJ  CPIO  DUMP  JAR  SEVEN_Z  TAR  ZIP  archiverName  encoding  entryEncoding  boolean  	projects/Compress29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.5773502691896258	209	209	3	replace	InputStream  in  =  new  ZipInputStream(in,  this.entryEncoding);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
