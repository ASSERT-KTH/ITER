bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
2	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
3	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
4	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
5	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    Double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	19	None	add
6	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	19	None	add
7	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
8	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
9	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  0.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound()  :  0.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
10	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  1.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  1.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
11	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
12	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	4	None	replace
13	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
14	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
15	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
16	[BUG]  [BUGGY]  return  1.0;  double  m  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  double  m  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    double  m  =  getDomainLowerBound(p);	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
17	[BUG]  [BUGGY]  return  1.0;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  double  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    double  p  =  getDomainLowerBound(p);	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	21	None	add
18	[BUG]  [BUGGY]  return  1.0;  double  p  =  getDomainLowerBound();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  double  p  =  getDomainLowerBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    double  p  =  getDomainLowerBound();	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	21	None	add
19	[BUG]  [BUGGY]  return  1.0;  double  m  =  getDomainLower(p);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  double  m  =  getDomainLower(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    double  m  =  getDomainLower(p);	  timeout    	non-compiled	[CE]  cannot  find  symbol	21	None	add
20	[BUG]  [BUGGY]  return  1.0;  double  m  =  getDomainLowerBound();  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  double  m  =  getDomainLowerBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    double  m  =  getDomainLowerBound();	  timeout    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	21	None	add
21	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  ==  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
22	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
23	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	3	None	replace
24	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	3	None	replace
25	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	3	None	replace
26	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  x	3	None	replace
27	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	1	None	add
28	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	1	None	add
29	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
30	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
31	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	1	None	add
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
33	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
34	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	15	None	replace
35	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	15	None	replace
36	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
37	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
38	[BUG]  [BUGGY]      Double  m  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        Double    m    =    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	5	None	add
39	[BUG]  [BUGGY]      Double  m  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        Double    m    =    getDomainLowerBound(p);    Double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	5	None	add
40	[BUG]  [BUGGY]      Double  m  =  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        Double    m    =    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	5	None	add
41	[BUG]  [BUGGY]      Double  m  =  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        Double    m    =    getDomainLowerBound(p);    double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	5	None	add
42	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	        Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);	  	compilable	  [FE]  StackOverflowError  	5	3	add
43	[BUG]  [BUGGY]      Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);	  	compilable	  [FE]  StackOverflowError  	5	3	add
44	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
45	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
46	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
47	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [FE]  IllegalArgumentException  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
48	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  StackOverflowError  	17	3	replace
49	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	  [FE]  StackOverflowError  	17	3	replace
50	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDomainUpperBound(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainUpperBound(p);	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	6	None	replace
51	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p  +  1);  [CE]  missing  return  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDomainLowerBound(p  +  1);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p  +  1);	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	6	None	replace
52	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDomainLowerBound(p.doubleValue());  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p.doubleValue());	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >=  0.0)?  0.0  :  0.0;	  return(p    <    =    0.0)?    0.0    :    0.0;    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
54	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;	  return(p    <    =    0.0)?    0.0    :    0.0;    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
55	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	13	None	add
56	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	13	None	add
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
58	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
59	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	13	None	add
60	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
61	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
62	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  *  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  *  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
63	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  *  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  *  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
64	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  +  getDomainLowerBound(p)+  1;	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
65	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDomainLowerBound(p)+  1;	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
66	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p  >  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  not  a  statement	16	None	add
67	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  unreachable  statement	16	None	add
68	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	16	None	add
69	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	16	None	add
70	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	16	None	add
71	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    (p  <  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  not  a  statement	8	None	add
72	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    p  <  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
73	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
74	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
75	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
76	[BUG]  [BUGGY]  timeout  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <  0.0)?  1.0  :  1.0;	  return    1.0;    timeout    	compilable	timeout	22	1	replace
77	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  timeout  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  1.0  :  1.0;	  return    1.0;    timeout    	compilable	timeout	22	1	replace
78	[BUG]  [BUGGY]  timeout  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0.0)?  1.0  :  1.0;	  return    1.0;    timeout    	compilable	timeout	22	1	replace
79	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  timeout  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  1.0  :  1.0;	  return    1.0;    timeout    	compilable	timeout	22	1	replace
80	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    (p  >  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  not  a  statement	11	None	add
81	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    p  >  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  not  a  statement	11	None	add
82	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
83	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
84	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  >  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
85	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
86	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
87	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
88	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
89	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
90	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	13	None	add
91	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p);	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	6	None	replace
92	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p);	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
93	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
94	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
95	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
96	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	1	None	add
97	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	1	None	add
98	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
99	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	3	None	replace
100	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);  [CE]  cannot  find  symbol  d  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  d	3	None	replace
101	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
102	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
103	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(p);	  return    0.0    +    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	20	None	replace
104	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.5  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.5  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
105	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.5  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	20	3	replace
106	[BUG]  [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
107	[BUG]  [BUGGY]  return  1.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  p  =  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    p  =  getDomainLowerBound(p);	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
108	[BUG]  [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
109	[BUG]  [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
110	[BUG]  [BUGGY]  return(p  <  =  0.0)?  1.0  :  1.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  =  0.0)?  1.0  :  1.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  1.0  :  1.0;	  return    1.0;    timeout    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
111	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
112	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
113	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
114	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }	  	non-compiled	[CE]  unreachable  statement	19	None	add
115	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
116	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  0.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	19	None	add
117	[BUG]  [BUGGY]  return  1.0;  if(p  <  0.0)  {  return  1.0;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
118	[BUG]  [BUGGY]  return  1.0;  if(p  >  0.0)  {  return  1.0;  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  >  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  >  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
119	[BUG]  [BUGGY]  return  1.0;  if(p  <  =  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  =  0.0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  =  0.0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
120	[BUG]  [BUGGY]  return  1.0;  if(p  <  0)  {  return  1.0;  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0)  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0)  {  return  1.0;  }	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
121	[BUG]  [BUGGY]  return  1.0;  if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return  1.0;  if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0;    if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }	  timeout    	non-compiled	[CE]  unreachable  statement	21	None	add
122	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
123	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
124	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
125	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
126	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
127	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p  >  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  not  a  statement	16	None	add
128	[BUG]  [BUGGY]  Double  m  =  getDomain(p);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  Double  m  =  getDomain(p);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomain(p);	      Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
129	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  0.5;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  0.5;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  0.5;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
130	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
131	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	2	None	replace
132	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p;  [CE]  missing  return  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p;  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p;	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	2	None	replace
133	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  else  return(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  else  return(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    0.0    :    0.0;    if(p  <  0.0)?  0.0  :  0.0;  else  return(p  <  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
134	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    0.0    :    0.0;    if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
135	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  0.0;  [CE]  :  expected  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  0.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p)/  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  :  expected	17	None	replace
136	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainLowerBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
